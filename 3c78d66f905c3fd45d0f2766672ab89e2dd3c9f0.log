
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 3c78d66f905c3fd45d0f2766672ab89e2dd3c9f0
Note: checking out '3c78d66f905c3fd45d0f2766672ab89e2dd3c9f0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 3c78d66... Switch to arbitrarySizedNatural from QuickCheck >= 2.8

Identifying

git log -n 1
commit 3c78d66f905c3fd45d0f2766672ab89e2dd3c9f0
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sat May 23 16:48:26 2015 +0200

    Switch to arbitrarySizedNatural from QuickCheck >= 2.8
    
    arbitrarySizedNatural got implemented in QuickCheck 2.8, so we no longer
    need to keep our own implementation.
    Bump the dependency on QuickCheck to >= 2.8.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1311       1027      43.9%        410       2748
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1311       1027      43.9%        410       2748

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.69 μs   (34.66 μs .. 34.71 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.72 μs   (34.70 μs .. 34.76 μs)
std dev              85.33 ns   (40.37 ns .. 161.5 ns)

benchmarking bounds/[Word8]
time                 42.52 μs   (42.51 μs .. 42.52 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.53 μs   (42.52 μs .. 42.54 μs)
std dev              23.02 ns   (17.67 ns .. 35.08 ns)

benchmarking small ByteString
time                 239.5 ns   (239.3 ns .. 239.7 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 239.9 ns   (239.7 ns .. 240.2 ns)
std dev              670.5 ps   (564.4 ps .. 842.8 ps)

benchmarking large ByteString
time                 241.4 ns   (241.2 ns .. 241.6 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 241.8 ns   (241.6 ns .. 242.0 ns)
std dev              669.7 ps   (539.0 ps .. 847.3 ps)

benchmarking length-prefixed ByteString
time                 6.778 μs   (6.776 μs .. 6.780 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.780 μs   (6.779 μs .. 6.781 μs)
std dev              2.846 ns   (2.316 ns .. 3.712 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 363.2 μs   (362.7 μs .. 363.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 362.5 μs   (362.3 μs .. 362.7 μs)
std dev              658.1 ns   (510.6 ns .. 805.4 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 221.5 μs   (221.3 μs .. 221.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 221.1 μs   (220.9 μs .. 221.2 μs)
std dev              558.7 ns   (487.8 ns .. 647.3 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 151.1 μs   (150.9 μs .. 151.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 150.6 μs   (150.5 μs .. 150.8 μs)
std dev              416.0 ns   (339.4 ns .. 557.2 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 94.70 μs   (94.45 μs .. 94.93 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 94.57 μs   (94.42 μs .. 94.70 μs)
std dev              446.3 ns   (405.4 ns .. 529.7 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.747 ms   (5.744 ms .. 5.749 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.757 ms   (5.754 ms .. 5.761 ms)
std dev              10.90 μs   (8.575 μs .. 13.36 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 5.959 ms   (5.956 ms .. 5.961 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.959 ms   (5.957 ms .. 5.962 ms)
std dev              8.238 μs   (5.919 μs .. 12.58 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.643 ms   (2.642 ms .. 2.645 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.643 ms   (2.642 ms .. 2.644 ms)
std dev              4.091 μs   (3.182 μs .. 5.734 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.709 ms   (2.708 ms .. 2.711 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.707 ms   (2.706 ms .. 2.709 ms)
std dev              4.888 μs   (3.931 μs .. 6.499 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.641 ms   (2.640 ms .. 2.642 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.641 ms   (2.640 ms .. 2.642 ms)
std dev              4.279 μs   (3.485 μs .. 5.659 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 8.233 ms   (8.228 ms .. 8.239 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 8.229 ms   (8.224 ms .. 8.234 ms)
std dev              14.10 μs   (10.89 μs .. 19.22 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 24.29 ms   (23.66 ms .. 25.03 ms)
                     0.996 R²   (0.992 R² .. 0.999 R²)
mean                 24.27 ms   (23.85 ms .. 24.64 ms)
std dev              906.8 μs   (713.0 μs .. 1.163 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.43 ms   (35.25 ms .. 37.58 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 36.29 ms   (35.72 ms .. 36.78 ms)
std dev              1.046 ms   (801.2 μs .. 1.413 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.51 ms   (25.83 ms .. 27.07 ms)
                     0.997 R²   (0.993 R² .. 0.999 R²)
mean                 26.66 ms   (26.20 ms .. 27.52 ms)
std dev              1.311 ms   (683.6 μs .. 2.162 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.891 ms   (1.890 ms .. 1.891 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.890 ms   (1.890 ms .. 1.890 ms)
std dev              1.001 μs   (821.8 ns .. 1.299 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 13.78 ms   (13.78 ms .. 13.78 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.77 ms   (13.77 ms .. 13.77 ms)
std dev              7.073 μs   (4.528 μs .. 11.29 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.309 ms   (2.304 ms .. 2.313 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.311 ms   (2.306 ms .. 2.315 ms)
std dev              15.83 μs   (12.36 μs .. 21.37 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.827 ms   (1.827 ms .. 1.828 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.828 ms   (1.828 ms .. 1.828 ms)
std dev              948.4 ns   (764.1 ns .. 1.280 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.604 ms   (5.602 ms .. 5.606 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.603 ms   (5.602 ms .. 5.605 ms)
std dev              4.057 μs   (3.163 μs .. 5.639 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.286 ms   (7.283 ms .. 7.291 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.291 ms   (7.290 ms .. 7.293 ms)
std dev              3.937 μs   (2.873 μs .. 5.810 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 10.37 ms   (10.37 ms .. 10.37 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 10.38 ms   (10.37 ms .. 10.38 ms)
std dev              3.798 μs   (2.857 μs .. 5.138 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 944.4 μs   (944.0 μs .. 944.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 944.0 μs   (943.6 μs .. 944.4 μs)
std dev              1.425 μs   (1.117 μs .. 1.973 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 539.9 μs   (539.9 μs .. 540.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 540.0 μs   (540.0 μs .. 540.2 μs)
std dev              355.0 ns   (189.7 ns .. 641.6 ns)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 441.1 μs   (441.1 μs .. 441.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 441.1 μs   (441.0 μs .. 441.1 μs)
std dev              131.6 ns   (104.6 ns .. 184.0 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 491.0 μs   (490.9 μs .. 491.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 491.0 μs   (491.0 μs .. 491.2 μs)
std dev              336.0 ns   (119.7 ns .. 666.5 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.284s, at: 3520.9MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.300s, at: 3333.1MB/s
1000MB of bytes read    in 0.412s, at: 2427.0MB/s
1000MB of words written in 0.116s, at: 8620.1MB/s
1000MB of words read    in 0.072s, at: 13888.1MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.808s, at: 1237.5MB/s
1000MB of bytes read    in 0.832s, at: 1201.8MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.108s, at: 9258.7MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  250.0 MB/s write,   94.0 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  531.9 MB/s write,  165.6 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  961.5 MB/s write,  347.2 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1562.4 MB/s write,  961.5 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 3c78d66f905c3fd45d0f2766672ab89e2dd3c9f0.log.tmp 3c78d66f905c3fd45d0f2766672ab89e2dd3c9f0.log
