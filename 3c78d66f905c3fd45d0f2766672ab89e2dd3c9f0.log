
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 3c78d66f905c3fd45d0f2766672ab89e2dd3c9f0
Note: checking out '3c78d66f905c3fd45d0f2766672ab89e2dd3c9f0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 3c78d66... Switch to arbitrarySizedNatural from QuickCheck >= 2.8

Identifying

git log -n 1
commit 3c78d66f905c3fd45d0f2766672ab89e2dd3c9f0
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sat May 23 16:48:26 2015 +0200

    Switch to arbitrarySizedNatural from QuickCheck >= 2.8
    
    arbitrarySizedNatural got implemented in QuickCheck 2.8, so we no longer
    need to keep our own implementation.
    Bump the dependency on QuickCheck to >= 2.8.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1311       1027      43.9%        410       2748
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1311       1027      43.9%        410       2748

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.13 μs   (35.11 μs .. 35.15 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.13 μs   (35.12 μs .. 35.15 μs)
std dev              36.44 ns   (28.96 ns .. 45.50 ns)

benchmarking bounds/[Word8]
time                 42.72 μs   (42.71 μs .. 42.73 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.71 μs   (42.71 μs .. 42.72 μs)
std dev              28.28 ns   (23.09 ns .. 38.26 ns)

benchmarking small ByteString
time                 327.0 ns   (326.7 ns .. 327.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 327.8 ns   (327.5 ns .. 328.1 ns)
std dev              965.8 ps   (826.3 ps .. 1.180 ns)

benchmarking large ByteString
time                 322.8 ns   (322.7 ns .. 322.9 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 322.9 ns   (322.7 ns .. 323.0 ns)
std dev              420.1 ps   (324.7 ps .. 544.9 ps)

benchmarking length-prefixed ByteString
time                 6.716 μs   (6.715 μs .. 6.716 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.715 μs   (6.714 μs .. 6.716 μs)
std dev              3.638 ns   (2.859 ns .. 4.818 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.5 μs   (366.3 μs .. 366.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.4 μs   (366.3 μs .. 366.5 μs)
std dev              249.2 ns   (110.0 ns .. 473.7 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.5 μs   (224.3 μs .. 225.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.9 μs   (224.8 μs .. 225.1 μs)
std dev              414.2 ns   (284.2 ns .. 541.9 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.4 μs   (154.4 μs .. 154.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.4 μs   (154.3 μs .. 154.4 μs)
std dev              184.1 ns   (127.7 ns .. 248.3 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 96.93 μs   (96.68 μs .. 97.22 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 96.85 μs   (96.81 μs .. 96.97 μs)
std dev              221.8 ns   (106.3 ns .. 433.8 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 6.031 ms   (6.028 ms .. 6.032 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.041 ms   (6.038 ms .. 6.045 ms)
std dev              10.52 μs   (8.363 μs .. 14.03 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.255 ms   (6.252 ms .. 6.258 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.254 ms   (6.251 ms .. 6.257 ms)
std dev              8.825 μs   (6.750 μs .. 14.08 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.665 ms   (2.663 ms .. 2.666 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.663 ms   (2.662 ms .. 2.664 ms)
std dev              4.661 μs   (3.804 μs .. 5.684 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.746 ms   (2.744 ms .. 2.747 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.743 ms   (2.741 ms .. 2.744 ms)
std dev              5.270 μs   (4.119 μs .. 7.456 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.663 ms   (2.662 ms .. 2.664 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.663 ms   (2.662 ms .. 2.664 ms)
std dev              3.713 μs   (2.948 μs .. 5.087 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.903 ms   (7.899 ms .. 7.907 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.902 ms   (7.898 ms .. 7.906 ms)
std dev              11.86 μs   (8.411 μs .. 20.83 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 24.21 ms   (23.70 ms .. 24.71 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 24.23 ms   (23.85 ms .. 24.56 ms)
std dev              800.5 μs   (581.8 μs .. 1.297 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.77 ms   (35.73 ms .. 37.82 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 36.95 ms   (36.39 ms .. 37.87 ms)
std dev              1.313 ms   (761.8 μs .. 2.140 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.71 ms   (26.24 ms .. 27.14 ms)
                     0.999 R²   (0.997 R² .. 0.999 R²)
mean                 26.83 ms   (26.46 ms .. 27.66 ms)
std dev              1.159 ms   (532.9 μs .. 2.336 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.892 ms   (1.892 ms .. 1.892 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.892 ms   (1.892 ms .. 1.892 ms)
std dev              645.6 ns   (562.1 ns .. 762.2 ns)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.08 ms   (14.08 ms .. 14.08 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.09 ms   (14.09 ms .. 14.09 ms)
std dev              5.789 μs   (3.624 μs .. 10.10 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.248 ms   (2.244 ms .. 2.252 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.242 ms   (2.238 ms .. 2.246 ms)
std dev              12.71 μs   (10.25 μs .. 17.32 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.902 ms   (1.899 ms .. 1.905 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.902 ms   (1.901 ms .. 1.904 ms)
std dev              4.832 μs   (3.702 μs .. 6.548 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.802 ms   (5.801 ms .. 5.804 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.800 ms   (5.799 ms .. 5.801 ms)
std dev              3.300 μs   (2.637 μs .. 4.255 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.495 ms   (7.494 ms .. 7.497 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.498 ms   (7.497 ms .. 7.499 ms)
std dev              2.399 μs   (1.970 μs .. 2.992 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 10.69 ms   (10.68 ms .. 10.69 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 10.69 ms   (10.69 ms .. 10.70 ms)
std dev              4.727 μs   (3.937 μs .. 5.933 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 953.0 μs   (952.3 μs .. 953.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 953.6 μs   (953.1 μs .. 954.2 μs)
std dev              1.850 μs   (1.448 μs .. 2.389 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 550.7 μs   (549.5 μs .. 551.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 551.4 μs   (550.2 μs .. 552.9 μs)
std dev              4.517 μs   (3.666 μs .. 5.747 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 440.9 μs   (440.9 μs .. 441.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 440.9 μs   (440.9 μs .. 440.9 μs)
std dev              123.7 ns   (91.83 ns .. 191.2 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 491.1 μs   (490.6 μs .. 491.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 491.6 μs   (491.5 μs .. 492.2 μs)
std dev              866.0 ns   (164.9 ns .. 1.813 μs)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.130s, at: 7712.0MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.0MB/s
1000MB of bytes read    in 0.413s, at: 2422.5MB/s
1000MB of words written in 0.114s, at: 8789.0MB/s
1000MB of words read    in 0.068s, at: 14692.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.4MB/s
1000MB of bytes read    in 0.830s, at: 1204.5MB/s
1000MB of words written in 0.113s, at: 8823.4MB/s
1000MB of words read    in 0.107s, at: 9343.6MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  262.9 MB/s write,   92.2 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  526.8 MB/s write,  162.8 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  936.3 MB/s write,  341.1 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1637.5 MB/s write,  932.5 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 3c78d66f905c3fd45d0f2766672ab89e2dd3c9f0.log.tmp 3c78d66f905c3fd45d0f2766672ab89e2dd3c9f0.log
