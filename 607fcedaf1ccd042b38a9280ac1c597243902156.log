
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 607fcedaf1ccd042b38a9280ac1c597243902156
Note: checking out '607fcedaf1ccd042b38a9280ac1c597243902156'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 607fced... Bump version to 0.7.4.0

Identifying

git log -n 1
commit 607fcedaf1ccd042b38a9280ac1c597243902156
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Mon Feb 23 18:28:42 2015 +0100

    Bump version to 0.7.4.0
    
    and update the changelog.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1311       1027      43.9%        410       2748
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1311       1027      43.9%        410       2748

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.03 μs   (35.03 μs .. 35.04 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.06 μs   (35.04 μs .. 35.09 μs)
std dev              57.16 ns   (19.13 ns .. 115.8 ns)

benchmarking bounds/[Word8]
time                 42.69 μs   (42.68 μs .. 42.69 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.67 μs   (42.66 μs .. 42.68 μs)
std dev              19.66 ns   (17.56 ns .. 21.52 ns)

benchmarking small ByteString
time                 323.5 ns   (323.2 ns .. 323.8 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.0 ns   (322.8 ns .. 323.2 ns)
std dev              607.5 ps   (480.8 ps .. 770.7 ps)

benchmarking large ByteString
time                 322.0 ns   (321.8 ns .. 322.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 321.9 ns   (321.8 ns .. 322.0 ns)
std dev              394.0 ps   (331.4 ps .. 491.3 ps)

benchmarking length-prefixed ByteString
time                 6.716 μs   (6.713 μs .. 6.718 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.717 μs   (6.716 μs .. 6.718 μs)
std dev              3.853 ns   (2.861 ns .. 6.137 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 367.4 μs   (367.0 μs .. 367.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 367.7 μs   (367.6 μs .. 367.9 μs)
std dev              275.6 ns   (114.2 ns .. 537.2 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.8 μs   (224.5 μs .. 225.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.9 μs   (224.8 μs .. 224.9 μs)
std dev              291.0 ns   (208.2 ns .. 431.3 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.9 μs   (154.8 μs .. 155.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.6 μs   (154.5 μs .. 154.7 μs)
std dev              313.6 ns   (241.7 ns .. 452.5 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.66 μs   (97.37 μs .. 97.87 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.12 μs   (97.02 μs .. 97.28 μs)
std dev              447.3 ns   (340.5 ns .. 558.2 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 6.037 ms   (6.034 ms .. 6.039 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.047 ms   (6.043 ms .. 6.050 ms)
std dev              10.82 μs   (8.609 μs .. 14.60 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.263 ms   (6.260 ms .. 6.265 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.262 ms   (6.259 ms .. 6.266 ms)
std dev              8.661 μs   (6.439 μs .. 13.86 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.670 ms   (2.669 ms .. 2.671 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.669 ms   (2.668 ms .. 2.670 ms)
std dev              4.376 μs   (3.617 μs .. 5.691 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.748 ms   (2.743 ms .. 2.750 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 2.756 ms   (2.748 ms .. 2.786 ms)
std dev              46.76 μs   (5.430 μs .. 98.41 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.666 ms   (2.665 ms .. 2.668 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.667 ms   (2.666 ms .. 2.668 ms)
std dev              3.885 μs   (3.193 μs .. 4.903 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.915 ms   (7.911 ms .. 7.919 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.916 ms   (7.911 ms .. 7.919 ms)
std dev              12.33 μs   (8.384 μs .. 20.58 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 24.68 ms   (24.28 ms .. 25.11 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 24.60 ms   (24.18 ms .. 24.92 ms)
std dev              814.7 μs   (605.1 μs .. 1.118 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 37.04 ms   (36.30 ms .. 37.92 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 37.59 ms   (37.10 ms .. 38.36 ms)
std dev              1.266 ms   (665.6 μs .. 1.992 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.96 ms   (26.42 ms .. 27.52 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 27.05 ms   (26.67 ms .. 27.93 ms)
std dev              1.201 ms   (541.6 μs .. 2.211 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.892 ms   (1.892 ms .. 1.893 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.892 ms   (1.892 ms .. 1.892 ms)
std dev              832.8 ns   (672.8 ns .. 1.059 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.13 ms   (14.13 ms .. 14.13 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.13 ms   (14.13 ms .. 14.13 ms)
std dev              2.873 μs   (1.610 μs .. 4.184 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.224 ms   (2.221 ms .. 2.227 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.221 ms   (2.217 ms .. 2.224 ms)
std dev              11.37 μs   (8.478 μs .. 16.58 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.902 ms   (1.898 ms .. 1.905 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.901 ms   (1.899 ms .. 1.903 ms)
std dev              6.325 μs   (5.521 μs .. 8.278 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.816 ms   (5.815 ms .. 5.817 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.813 ms   (5.812 ms .. 5.815 ms)
std dev              4.533 μs   (2.816 μs .. 7.518 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.522 ms   (7.520 ms .. 7.523 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.523 ms   (7.522 ms .. 7.524 ms)
std dev              3.102 μs   (2.538 μs .. 3.977 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 10.75 ms   (10.74 ms .. 10.75 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 10.74 ms   (10.74 ms .. 10.74 ms)
std dev              2.556 μs   (2.084 μs .. 3.237 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 954.3 μs   (953.8 μs .. 954.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 954.8 μs   (954.3 μs .. 955.3 μs)
std dev              1.629 μs   (1.305 μs .. 2.133 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 546.1 μs   (545.0 μs .. 547.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 547.1 μs   (546.1 μs .. 548.3 μs)
std dev              3.786 μs   (3.022 μs .. 5.007 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 441.1 μs   (441.1 μs .. 441.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 441.2 μs   (441.1 μs .. 441.3 μs)
std dev              274.6 ns   (185.5 ns .. 405.0 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 490.7 μs   (490.2 μs .. 491.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 491.3 μs   (491.2 μs .. 491.7 μs)
std dev              588.6 ns   (104.7 ns .. 1.242 μs)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.132s, at: 7602.4MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.2MB/s
1000MB of bytes read    in 0.413s, at: 2424.0MB/s
1000MB of words written in 0.114s, at: 8782.4MB/s
1000MB of words read    in 0.068s, at: 14694.6MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.830s, at: 1205.1MB/s
1000MB of words written in 0.113s, at: 8832.4MB/s
1000MB of words read    in 0.107s, at: 9346.1MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.9 MB/s write,   91.8 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  519.7 MB/s write,  161.9 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  929.3 MB/s write,  339.7 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1625.8 MB/s write,  928.5 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 607fcedaf1ccd042b38a9280ac1c597243902156.log.tmp 607fcedaf1ccd042b38a9280ac1c597243902156.log
