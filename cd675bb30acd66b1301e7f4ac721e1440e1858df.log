
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout cd675bb30acd66b1301e7f4ac721e1440e1858df
Note: checking out 'cd675bb30acd66b1301e7f4ac721e1440e1858df'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at cd675bb... Use GHC 7.10.2 on Travis CI instead of GHC 7.10.1.

Identifying

git log -n 1
commit cd675bb30acd66b1301e7f4ac721e1440e1858df
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Thu Jul 30 10:17:25 2015 +0200

    Use GHC 7.10.2 on Travis CI instead of GHC 7.10.1.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1029      43.6%        421       2780
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1029      43.6%        421       2780

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.18 μs   (35.16 μs .. 35.19 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.19 μs   (35.18 μs .. 35.21 μs)
std dev              48.50 ns   (33.52 ns .. 75.17 ns)

benchmarking bounds/[Word8]
time                 42.69 μs   (42.68 μs .. 42.69 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.67 μs   (42.67 μs .. 42.68 μs)
std dev              20.35 ns   (16.01 ns .. 28.17 ns)

benchmarking small ByteString
time                 323.2 ns   (323.0 ns .. 323.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.5 ns   (323.4 ns .. 323.6 ns)
std dev              468.9 ps   (390.7 ps .. 567.4 ps)

benchmarking large ByteString
time                 325.3 ns   (325.1 ns .. 325.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.8 ns   (324.6 ns .. 325.0 ns)
std dev              564.9 ps   (471.0 ps .. 680.2 ps)

benchmarking length-prefixed ByteString
time                 6.699 μs   (6.698 μs .. 6.700 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.701 μs   (6.700 μs .. 6.702 μs)
std dev              3.338 ns   (2.457 ns .. 4.849 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.5 μs   (366.4 μs .. 366.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.4 μs   (366.4 μs .. 366.5 μs)
std dev              178.2 ns   (109.3 ns .. 313.0 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.4 μs   (224.0 μs .. 224.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.0 μs   (223.9 μs .. 224.2 μs)
std dev              336.6 ns   (199.4 ns .. 526.1 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.0 μs   (154.7 μs .. 155.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.1 μs   (153.9 μs .. 154.3 μs)
std dev              717.7 ns   (619.9 ns .. 808.6 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 96.95 μs   (96.81 μs .. 97.08 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 96.70 μs   (96.61 μs .. 96.83 μs)
std dev              370.7 ns   (336.2 ns .. 413.4 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.804 ms   (5.801 ms .. 5.806 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.811 ms   (5.808 ms .. 5.816 ms)
std dev              11.46 μs   (7.872 μs .. 18.35 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.173 ms   (6.170 ms .. 6.177 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.168 ms   (6.163 ms .. 6.171 ms)
std dev              11.82 μs   (8.991 μs .. 15.73 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.943 ms   (2.938 ms .. 2.949 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.937 ms   (2.932 ms .. 2.942 ms)
std dev              16.53 μs   (13.05 μs .. 21.92 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.879 ms   (2.872 ms .. 2.887 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.887 ms   (2.880 ms .. 2.897 ms)
std dev              27.97 μs   (20.01 μs .. 43.52 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.743 ms   (2.734 ms .. 2.753 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.756 ms   (2.749 ms .. 2.765 ms)
std dev              26.14 μs   (21.14 μs .. 33.58 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.527 ms   (7.522 ms .. 7.532 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.529 ms   (7.525 ms .. 7.533 ms)
std dev              11.71 μs   (8.841 μs .. 18.11 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.20 ms   (22.69 ms .. 23.77 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.66 ms   (23.28 ms .. 24.04 ms)
std dev              856.7 μs   (604.4 μs .. 1.269 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.66 ms   (35.99 ms .. 37.62 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 37.15 ms   (36.64 ms .. 37.97 ms)
std dev              1.238 ms   (691.5 μs .. 2.061 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.49 ms   (25.99 ms .. 27.07 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.59 ms   (26.19 ms .. 27.39 ms)
std dev              1.184 ms   (533.9 μs .. 2.140 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.958 ms   (1.957 ms .. 1.958 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.957 ms   (1.957 ms .. 1.958 ms)
std dev              823.0 ns   (644.0 ns .. 1.106 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.18 ms   (14.18 ms .. 14.19 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.18 ms   (14.18 ms .. 14.18 ms)
std dev              5.173 μs   (3.649 μs .. 7.737 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.349 ms   (2.344 ms .. 2.353 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.335 ms   (2.330 ms .. 2.339 ms)
std dev              15.31 μs   (11.96 μs .. 21.37 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.010 ms   (2.009 ms .. 2.011 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.010 ms   (2.009 ms .. 2.010 ms)
std dev              2.022 μs   (1.592 μs .. 2.578 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.978 ms   (5.974 ms .. 5.980 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.979 ms   (5.977 ms .. 5.980 ms)
std dev              4.014 μs   (3.134 μs .. 5.368 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.669 ms   (7.653 ms .. 7.683 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.668 ms   (7.661 ms .. 7.674 ms)
std dev              18.00 μs   (15.82 μs .. 21.21 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.94 ms   (12.93 ms .. 12.95 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.94 ms   (12.93 ms .. 12.96 ms)
std dev              26.58 μs   (8.802 μs .. 51.02 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 976.7 μs   (976.0 μs .. 977.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 976.2 μs   (975.7 μs .. 976.7 μs)
std dev              1.625 μs   (1.318 μs .. 2.058 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 599.7 μs   (598.7 μs .. 600.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 600.1 μs   (599.1 μs .. 600.8 μs)
std dev              2.771 μs   (2.021 μs .. 3.953 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 503.3 μs   (503.1 μs .. 503.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 503.2 μs   (503.1 μs .. 503.3 μs)
std dev              389.7 ns   (328.5 ns .. 462.5 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 553.7 μs   (553.6 μs .. 553.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 553.7 μs   (553.6 μs .. 553.8 μs)
std dev              307.0 ns   (199.2 ns .. 463.1 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7777.2MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3354.6MB/s
1000MB of bytes read    in 0.413s, at: 2423.3MB/s
1000MB of words written in 0.114s, at: 8798.8MB/s
1000MB of words read    in 0.068s, at: 14725.6MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.810s, at: 1235.0MB/s
1000MB of bytes read    in 0.820s, at: 1219.5MB/s
1000MB of words written in 0.113s, at: 8818.6MB/s
1000MB of words read    in 0.107s, at: 9348.9MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.3 MB/s write,   88.0 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  464.4 MB/s write,  152.5 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  846.6 MB/s write,  326.7 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1405.7 MB/s write,  844.5 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv cd675bb30acd66b1301e7f4ac721e1440e1858df.log.tmp cd675bb30acd66b1301e7f4ac721e1440e1858df.log
