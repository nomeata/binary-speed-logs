
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout cd675bb30acd66b1301e7f4ac721e1440e1858df
Note: checking out 'cd675bb30acd66b1301e7f4ac721e1440e1858df'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at cd675bb... Use GHC 7.10.2 on Travis CI instead of GHC 7.10.1.

Identifying

git log -n 1
commit cd675bb30acd66b1301e7f4ac721e1440e1858df
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Thu Jul 30 10:17:25 2015 +0200

    Use GHC 7.10.2 on Travis CI instead of GHC 7.10.1.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1029      43.6%        421       2780
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1029      43.6%        421       2780

Building

cabal configure --enable-benchmarks
Warning: The package list for 'hackage.haskell.org' is 78 days old.
Run 'cabal update' to get the latest list of available packages.
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.87 μs   (34.85 μs .. 34.87 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.89 μs   (34.88 μs .. 34.90 μs)
std dev              27.00 ns   (14.64 ns .. 48.98 ns)

benchmarking bounds/[Word8]
time                 42.89 μs   (42.88 μs .. 42.90 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.89 μs   (42.89 μs .. 42.90 μs)
std dev              24.83 ns   (20.61 ns .. 30.42 ns)

benchmarking small ByteString
time                 329.5 ns   (329.2 ns .. 329.7 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 329.5 ns   (329.3 ns .. 329.7 ns)
std dev              662.9 ps   (544.6 ps .. 816.9 ps)

benchmarking large ByteString
time                 329.3 ns   (328.7 ns .. 329.9 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 329.4 ns   (329.1 ns .. 329.7 ns)
std dev              836.1 ps   (646.1 ps .. 1.143 ns)

benchmarking length-prefixed ByteString
time                 6.950 μs   (6.949 μs .. 6.950 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.950 μs   (6.949 μs .. 6.950 μs)
std dev              2.100 ns   (1.756 ns .. 2.839 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 368.3 μs   (368.3 μs .. 368.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 368.2 μs   (368.1 μs .. 368.3 μs)
std dev              327.9 ns   (202.5 ns .. 511.1 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 225.0 μs   (224.8 μs .. 225.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 225.2 μs   (225.1 μs .. 225.3 μs)
std dev              293.5 ns   (214.2 ns .. 402.1 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.9 μs   (154.4 μs .. 155.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.4 μs   (155.2 μs .. 155.6 μs)
std dev              720.9 ns   (573.3 ns .. 876.3 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.83 μs   (97.53 μs .. 98.00 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 96.94 μs   (96.74 μs .. 97.20 μs)
std dev              742.3 ns   (639.6 ns .. 834.1 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.954 ms   (5.952 ms .. 5.955 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.961 ms   (5.959 ms .. 5.965 ms)
std dev              9.128 μs   (5.820 μs .. 12.97 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.318 ms   (6.316 ms .. 6.321 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.312 ms   (6.308 ms .. 6.315 ms)
std dev              10.33 μs   (7.786 μs .. 13.50 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.725 ms   (2.724 ms .. 2.727 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.726 ms   (2.725 ms .. 2.728 ms)
std dev              4.886 μs   (3.526 μs .. 6.947 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.787 ms   (2.785 ms .. 2.789 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.789 ms   (2.787 ms .. 2.792 ms)
std dev              7.694 μs   (5.623 μs .. 12.02 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.715 ms   (2.715 ms .. 2.717 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.716 ms   (2.715 ms .. 2.717 ms)
std dev              4.442 μs   (3.365 μs .. 6.013 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.365 ms   (7.359 ms .. 7.370 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.366 ms   (7.361 ms .. 7.370 ms)
std dev              12.92 μs   (10.59 μs .. 18.01 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.13 ms   (22.58 ms .. 23.71 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 23.53 ms   (23.15 ms .. 23.93 ms)
std dev              871.0 μs   (617.0 μs .. 1.186 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.62 ms   (35.89 ms .. 37.44 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 36.61 ms   (35.88 ms .. 37.21 ms)
std dev              1.363 ms   (959.6 μs .. 2.083 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.14 ms   (25.76 ms .. 26.57 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.40 ms   (26.05 ms .. 27.38 ms)
std dev              1.137 ms   (491.2 μs .. 2.251 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.952 ms   (1.952 ms .. 1.953 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.953 ms   (1.953 ms .. 1.953 ms)
std dev              541.0 ns   (412.5 ns .. 817.0 ns)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.14 ms   (14.14 ms .. 14.14 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.14 ms   (14.13 ms .. 14.14 ms)
std dev              4.176 μs   (2.465 μs .. 7.475 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.208 ms   (2.204 ms .. 2.212 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.207 ms   (2.204 ms .. 2.210 ms)
std dev              10.69 μs   (8.981 μs .. 13.21 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.996 ms   (1.995 ms .. 1.996 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.995 ms   (1.995 ms .. 1.996 ms)
std dev              2.188 μs   (1.760 μs .. 2.739 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.947 ms   (5.944 ms .. 5.950 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.947 ms   (5.945 ms .. 5.948 ms)
std dev              4.054 μs   (3.083 μs .. 6.137 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.601 ms   (7.591 ms .. 7.610 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.601 ms   (7.596 ms .. 7.607 ms)
std dev              14.16 μs   (11.70 μs .. 21.18 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.91 ms   (12.90 ms .. 12.92 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.92 ms   (12.92 ms .. 12.95 ms)
std dev              31.76 μs   (13.99 μs .. 54.99 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.019 ms   (1.019 ms .. 1.020 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.019 ms   (1.018 ms .. 1.019 ms)
std dev              1.378 μs   (1.149 μs .. 1.929 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 594.1 μs   (593.9 μs .. 594.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 594.0 μs   (593.7 μs .. 594.2 μs)
std dev              738.2 ns   (580.2 ns .. 1.055 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 503.6 μs   (503.4 μs .. 503.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 503.8 μs   (503.6 μs .. 503.9 μs)
std dev              514.0 ns   (431.5 ns .. 633.4 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.2 μs   (554.1 μs .. 554.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.2 μs   (554.1 μs .. 554.2 μs)
std dev              132.5 ns   (105.3 ns .. 171.9 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7778.3MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.0MB/s
1000MB of bytes read    in 0.413s, at: 2423.3MB/s
1000MB of words written in 0.114s, at: 8808.8MB/s
1000MB of words read    in 0.068s, at: 14753.8MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.6MB/s
1000MB of bytes read    in 0.820s, at: 1220.1MB/s
1000MB of words written in 0.113s, at: 8841.0MB/s
1000MB of words read    in 0.107s, at: 9352.6MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.6 MB/s write,   87.9 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  468.3 MB/s write,  152.5 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  857.4 MB/s write,  327.9 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1422.8 MB/s write,  842.7 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv cd675bb30acd66b1301e7f4ac721e1440e1858df.log.tmp cd675bb30acd66b1301e7f4ac721e1440e1858df.log
