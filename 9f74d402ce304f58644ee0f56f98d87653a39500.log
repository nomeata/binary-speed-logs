
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 9f74d402ce304f58644ee0f56f98d87653a39500
Note: checking out '9f74d402ce304f58644ee0f56f98d87653a39500'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 9f74d40... Remove unused import.

Identifying

git log -n 1
commit 9f74d402ce304f58644ee0f56f98d87653a39500
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Fri Aug 14 22:31:00 2015 +0200

    Remove unused import.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
[ 1 of 11] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 2 of 11] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder.o )
[ 3 of 11] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 4 of 11] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Put.o )
[ 5 of 11] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get.o )
[ 6 of 11] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Class.o )
[ 7 of 11] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Generic.o )
[ 8 of 11] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary.o )
[ 9 of 11] Compiling GenericsBenchTypes ( benchmarks/GenericsBenchTypes.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchTypes.o )
[10 of 11] Compiling GenericsBenchCache ( benchmarks/GenericsBenchCache.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchCache.o )
[11 of 11] Compiling Main             ( benchmarks/GenericsBench.hs, dist/build/generics-bench/generics-bench-tmp/Main.o )
Linking dist/build/generics-bench/generics-bench ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[3 of 3] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 4 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.98 μs   (34.96 μs .. 35.00 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.02 μs   (35.01 μs .. 35.03 μs)
std dev              37.90 ns   (30.71 ns .. 49.56 ns)

benchmarking bounds/[Word8]
time                 42.76 μs   (42.75 μs .. 42.76 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.77 μs   (42.77 μs .. 42.78 μs)
std dev              26.57 ns   (19.32 ns .. 35.42 ns)

benchmarking small ByteString
time                 329.4 ns   (329.1 ns .. 329.6 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 329.3 ns   (329.0 ns .. 329.6 ns)
std dev              920.2 ps   (804.5 ps .. 1.120 ns)

benchmarking large ByteString
time                 330.6 ns   (330.5 ns .. 330.7 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 330.8 ns   (330.8 ns .. 331.0 ns)
std dev              364.8 ps   (306.3 ps .. 456.9 ps)

benchmarking length-prefixed ByteString
time                 7.518 μs   (7.518 μs .. 7.519 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.519 μs   (7.518 μs .. 7.520 μs)
std dev              3.362 ns   (2.372 ns .. 5.786 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.4 μs   (365.8 μs .. 367.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 365.9 μs   (365.8 μs .. 366.1 μs)
std dev              540.6 ns   (227.2 ns .. 939.2 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.6 μs   (224.3 μs .. 224.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.5 μs   (224.4 μs .. 224.6 μs)
std dev              276.6 ns   (191.1 ns .. 457.9 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.2 μs   (154.2 μs .. 154.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.1 μs   (154.1 μs .. 154.2 μs)
std dev              123.3 ns   (100.5 ns .. 149.0 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.72 μs   (97.42 μs .. 98.01 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.59 μs   (97.43 μs .. 97.77 μs)
std dev              579.7 ns   (534.3 ns .. 665.9 ns)

Benchmark builder: FINISH
Benchmark generics-bench: RUNNING...
creating cabal cache file... done
benchmarking encode
time                 45.95 ms   (45.20 ms .. 46.72 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 45.79 ms   (45.29 ms .. 46.72 ms)
std dev              1.262 ms   (514.4 μs .. 2.224 ms)

benchmarking decode
time                 18.10 ms   (17.73 ms .. 18.45 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 17.95 ms   (17.50 ms .. 18.42 ms)
std dev              1.135 ms   (752.5 μs .. 1.717 ms)
variance introduced by outliers: 25% (moderately inflated)

benchmarking decode null
time                 11.23 ms   (11.01 ms .. 11.48 ms)
                     0.996 R²   (0.993 R² .. 0.998 R²)
mean                 11.15 ms   (10.97 ms .. 11.37 ms)
std dev              538.1 μs   (407.6 μs .. 775.1 μs)
variance introduced by outliers: 20% (moderately inflated)

benchmarking embarrassment/read
time                 719.1 ms   (713.2 ms .. 724.5 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 715.4 ms   (714.3 ms .. 716.2 ms)
std dev              1.329 ms   (0.0 s .. 1.460 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking embarrassment/show
time                 36.91 ms   (36.56 ms .. 37.24 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 36.80 ms   (36.56 ms .. 37.04 ms)
std dev              494.2 μs   (381.4 μs .. 656.1 μs)

Benchmark generics-bench: FINISH
Benchmark get: RUNNING...
benchmarking brackets/Binary 100kb, one chunk
time                 6.378 ms   (6.375 ms .. 6.382 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.386 ms   (6.383 ms .. 6.392 ms)
std dev              12.73 μs   (8.299 μs .. 17.15 μs)

benchmarking brackets/Binary 100kb, 100 byte chunks
time                 6.757 ms   (6.754 ms .. 6.761 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.750 ms   (6.746 ms .. 6.754 ms)
std dev              11.71 μs   (9.106 μs .. 15.24 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, one chunk
time                 2.771 ms   (2.770 ms .. 2.772 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.772 ms   (2.770 ms .. 2.773 ms)
std dev              4.976 μs   (3.641 μs .. 7.910 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, 100 byte chunks
time                 2.849 ms   (2.847 ms .. 2.851 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.844 ms   (2.842 ms .. 2.846 ms)
std dev              6.784 μs   (5.583 μs .. 9.039 μs)

benchmarking brackets/Attoparsec strict-bs 100kb
time                 2.775 ms   (2.773 ms .. 2.776 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.775 ms   (2.774 ms .. 2.776 ms)
std dev              4.521 μs   (3.345 μs .. 6.395 μs)

benchmarking brackets/Cereal strict-bs 100kb
time                 7.392 ms   (7.381 ms .. 7.403 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.383 ms   (7.378 ms .. 7.389 ms)
std dev              17.25 μs   (13.00 μs .. 23.49 μs)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Attoparsec
time                 26.77 ms   (26.38 ms .. 27.23 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.76 ms   (26.38 ms .. 27.68 ms)
std dev              1.191 ms   (477.3 μs .. 2.169 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Binary
time                 23.20 ms   (22.58 ms .. 23.84 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 23.52 ms   (23.07 ms .. 23.99 ms)
std dev              1.075 ms   (746.3 μs .. 1.602 ms)
variance introduced by outliers: 14% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Cereal
time                 36.45 ms   (35.59 ms .. 37.64 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 36.82 ms   (36.10 ms .. 37.53 ms)
std dev              1.473 ms   (1.011 ms .. 2.368 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking comparison getWord8, 1MB/Attoparsec
time                 106.3 ms   (96.72 ms .. 112.2 ms)
                     0.987 R²   (0.954 R² .. 0.999 R²)
mean                 110.2 ms   (105.1 ms .. 115.2 ms)
std dev              7.619 ms   (4.876 ms .. 12.85 ms)
variance introduced by outliers: 20% (moderately inflated)

benchmarking comparison getWord8, 1MB/Binary
time                 65.37 ms   (62.73 ms .. 67.69 ms)
                     0.995 R²   (0.985 R² .. 0.999 R²)
mean                 67.21 ms   (65.76 ms .. 69.99 ms)
std dev              3.403 ms   (1.531 ms .. 5.641 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking comparison getWord8, 1MB/Cereal
time                 117.8 ms   (110.5 ms .. 123.6 ms)
                     0.993 R²   (0.972 R² .. 1.000 R²)
mean                 121.5 ms   (116.4 ms .. 124.6 ms)
std dev              5.832 ms   (2.656 ms .. 8.864 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 2 bytes
time                 34.14 ms   (33.77 ms .. 34.68 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.60 ms   (34.16 ms .. 35.53 ms)
std dev              1.250 ms   (635.9 μs .. 2.216 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 4 bytes
time                 25.76 ms   (25.28 ms .. 26.24 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 25.91 ms   (25.67 ms .. 26.16 ms)
std dev              551.0 μs   (418.4 μs .. 818.6 μs)

benchmarking getWord8 1MB/chunk size 8 bytes
time                 17.01 ms   (16.96 ms .. 17.05 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 17.03 ms   (17.01 ms .. 17.06 ms)
std dev              54.35 μs   (29.95 μs .. 96.51 μs)

benchmarking getWord8 1MB/chunk size 16 bytes
time                 17.43 ms   (17.26 ms .. 17.57 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 17.42 ms   (17.30 ms .. 17.83 ms)
std dev              500.3 μs   (126.0 μs .. 989.4 μs)

benchmarking getWord8 1MB Applicative/chunk size 2 bytes
time                 34.00 ms   (33.58 ms .. 34.54 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 33.96 ms   (33.26 ms .. 34.29 ms)
std dev              1.007 ms   (416.9 μs .. 1.754 ms)

benchmarking getWord8 1MB Applicative/chunk size 4 bytes
time                 18.45 ms   (18.17 ms .. 18.77 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 18.49 ms   (18.39 ms .. 18.73 ms)
std dev              338.5 μs   (211.7 μs .. 563.8 μs)

benchmarking getWord8 1MB Applicative/chunk size 8 bytes
time                 11.92 ms   (11.79 ms .. 12.07 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 11.86 ms   (11.77 ms .. 11.95 ms)
std dev              231.3 μs   (177.0 μs .. 335.2 μs)

benchmarking getWord8 1MB Applicative/chunk size 16 bytes
time                 7.475 ms   (7.429 ms .. 7.530 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 7.466 ms   (7.385 ms .. 7.531 ms)
std dev              216.0 μs   (144.3 μs .. 319.7 μs)
variance introduced by outliers: 11% (moderately inflated)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7771.9MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.7MB/s
1000MB of bytes read    in 0.413s, at: 2423.1MB/s
1000MB of words written in 0.114s, at: 8804.5MB/s
1000MB of words read    in 0.068s, at: 14691.6MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.6MB/s
1000MB of bytes read    in 0.819s, at: 1220.3MB/s
1000MB of words written in 0.113s, at: 8836.3MB/s
1000MB of words read    in 0.107s, at: 9344.4MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.5 MB/s write,   87.5 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  467.4 MB/s write,  153.5 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  846.9 MB/s write,  326.9 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1405.9 MB/s write,  839.7 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 9f74d402ce304f58644ee0f56f98d87653a39500.log.tmp 9f74d402ce304f58644ee0f56f98d87653a39500.log
