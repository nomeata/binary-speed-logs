
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 9f74d402ce304f58644ee0f56f98d87653a39500
Note: checking out '9f74d402ce304f58644ee0f56f98d87653a39500'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 9f74d40... Remove unused import.

Identifying

git log -n 1
commit 9f74d402ce304f58644ee0f56f98d87653a39500
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Fri Aug 14 22:31:00 2015 +0200

    Remove unused import.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
[ 1 of 11] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 2 of 11] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder.o )
[ 3 of 11] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 4 of 11] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Put.o )
[ 5 of 11] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get.o )
[ 6 of 11] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Class.o )
[ 7 of 11] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Generic.o )
[ 8 of 11] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary.o )
[ 9 of 11] Compiling GenericsBenchTypes ( benchmarks/GenericsBenchTypes.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchTypes.o )
[10 of 11] Compiling GenericsBenchCache ( benchmarks/GenericsBenchCache.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchCache.o )
[11 of 11] Compiling Main             ( benchmarks/GenericsBench.hs, dist/build/generics-bench/generics-bench-tmp/Main.o )
Linking dist/build/generics-bench/generics-bench ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[3 of 3] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 4 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.95 μs   (34.93 μs .. 34.98 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.06 μs   (34.99 μs .. 35.33 μs)
std dev              389.9 ns   (54.21 ns .. 792.1 ns)

benchmarking bounds/[Word8]
time                 42.70 μs   (42.69 μs .. 42.72 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.73 μs   (42.71 μs .. 42.76 μs)
std dev              69.40 ns   (35.19 ns .. 127.6 ns)

benchmarking small ByteString
time                 326.2 ns   (325.7 ns .. 326.6 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.4 ns   (325.1 ns .. 325.7 ns)
std dev              1.021 ns   (843.5 ps .. 1.314 ns)

benchmarking large ByteString
time                 335.8 ns   (335.7 ns .. 335.9 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 335.3 ns   (335.1 ns .. 335.5 ns)
std dev              694.5 ps   (610.7 ps .. 802.7 ps)

benchmarking length-prefixed ByteString
time                 7.486 μs   (7.484 μs .. 7.489 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.490 μs   (7.487 μs .. 7.497 μs)
std dev              13.64 ns   (7.109 ns .. 26.56 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 365.8 μs   (365.5 μs .. 366.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.0 μs   (365.9 μs .. 366.1 μs)
std dev              317.7 ns   (191.8 ns .. 528.5 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.0 μs   (224.0 μs .. 224.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.1 μs   (224.1 μs .. 224.2 μs)
std dev              199.6 ns   (138.0 ns .. 282.9 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.0 μs   (153.9 μs .. 154.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.0 μs   (154.0 μs .. 154.0 μs)
std dev              145.3 ns   (90.61 ns .. 273.0 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 98.25 μs   (97.96 μs .. 98.43 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.67 μs   (97.53 μs .. 97.85 μs)
std dev              527.5 ns   (427.4 ns .. 594.7 ns)

Benchmark builder: FINISH
Benchmark generics-bench: RUNNING...
creating cabal cache file... done
benchmarking encode
time                 45.38 ms   (44.63 ms .. 46.06 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 45.24 ms   (44.80 ms .. 46.15 ms)
std dev              1.229 ms   (536.1 μs .. 2.031 ms)

benchmarking decode
time                 17.78 ms   (17.43 ms .. 18.11 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 17.64 ms   (17.18 ms .. 18.06 ms)
std dev              1.094 ms   (742.2 μs .. 1.696 ms)
variance introduced by outliers: 25% (moderately inflated)

benchmarking decode null
time                 11.17 ms   (10.94 ms .. 11.40 ms)
                     0.996 R²   (0.993 R² .. 0.998 R²)
mean                 11.11 ms   (10.94 ms .. 11.32 ms)
std dev              512.4 μs   (385.6 μs .. 718.0 μs)
variance introduced by outliers: 20% (moderately inflated)

benchmarking embarrassment/read
time                 636.6 ms   (633.7 ms .. 638.9 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 633.0 ms   (632.1 ms .. 633.7 ms)
std dev              1.095 ms   (0.0 s .. 1.215 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking embarrassment/show
time                 36.09 ms   (35.77 ms .. 36.40 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 36.00 ms   (35.76 ms .. 36.23 ms)
std dev              480.4 μs   (358.0 μs .. 615.2 μs)

Benchmark generics-bench: FINISH
Benchmark get: RUNNING...
benchmarking brackets/Binary 100kb, one chunk
time                 6.398 ms   (6.388 ms .. 6.406 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.399 ms   (6.395 ms .. 6.406 ms)
std dev              14.17 μs   (10.05 μs .. 18.38 μs)

benchmarking brackets/Binary 100kb, 100 byte chunks
time                 6.759 ms   (6.756 ms .. 6.763 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.755 ms   (6.751 ms .. 6.759 ms)
std dev              11.55 μs   (9.185 μs .. 14.87 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, one chunk
time                 2.783 ms   (2.779 ms .. 2.787 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.781 ms   (2.778 ms .. 2.784 ms)
std dev              10.11 μs   (8.708 μs .. 12.09 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, 100 byte chunks
time                 2.835 ms   (2.832 ms .. 2.838 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.838 ms   (2.837 ms .. 2.841 ms)
std dev              6.373 μs   (4.827 μs .. 9.593 μs)

benchmarking brackets/Attoparsec strict-bs 100kb
time                 2.771 ms   (2.767 ms .. 2.775 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.773 ms   (2.771 ms .. 2.775 ms)
std dev              7.088 μs   (5.796 μs .. 9.240 μs)

benchmarking brackets/Cereal strict-bs 100kb
time                 7.404 ms   (7.394 ms .. 7.414 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.409 ms   (7.403 ms .. 7.419 ms)
std dev              22.91 μs   (15.63 μs .. 35.63 μs)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Attoparsec
time                 26.82 ms   (26.21 ms .. 27.44 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.78 ms   (26.41 ms .. 27.81 ms)
std dev              1.210 ms   (514.8 μs .. 2.134 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Binary
time                 23.25 ms   (22.64 ms .. 24.01 ms)
                     0.997 R²   (0.996 R² .. 0.999 R²)
mean                 23.63 ms   (23.16 ms .. 24.16 ms)
std dev              1.098 ms   (781.9 μs .. 1.643 ms)
variance introduced by outliers: 14% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Cereal
time                 36.64 ms   (35.80 ms .. 37.83 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 36.95 ms   (36.14 ms .. 37.63 ms)
std dev              1.471 ms   (1.010 ms .. 2.284 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking comparison getWord8, 1MB/Attoparsec
time                 106.6 ms   (95.48 ms .. 114.7 ms)
                     0.987 R²   (0.937 R² .. 0.999 R²)
mean                 114.5 ms   (109.1 ms .. 120.8 ms)
std dev              8.480 ms   (5.710 ms .. 13.51 ms)
variance introduced by outliers: 23% (moderately inflated)

benchmarking comparison getWord8, 1MB/Binary
time                 65.61 ms   (62.75 ms .. 67.94 ms)
                     0.995 R²   (0.983 R² .. 0.999 R²)
mean                 67.46 ms   (65.92 ms .. 70.40 ms)
std dev              3.367 ms   (1.488 ms .. 5.409 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking comparison getWord8, 1MB/Cereal
time                 118.3 ms   (111.4 ms .. 123.9 ms)
                     0.993 R²   (0.975 R² .. 1.000 R²)
mean                 121.8 ms   (116.0 ms .. 124.7 ms)
std dev              5.681 ms   (2.565 ms .. 8.554 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 2 bytes
time                 34.31 ms   (33.90 ms .. 34.87 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.73 ms   (34.30 ms .. 35.50 ms)
std dev              1.218 ms   (654.6 μs .. 2.226 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 4 bytes
time                 25.88 ms   (25.40 ms .. 26.38 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 26.11 ms   (25.87 ms .. 26.38 ms)
std dev              575.6 μs   (432.8 μs .. 838.5 μs)

benchmarking getWord8 1MB/chunk size 8 bytes
time                 16.99 ms   (16.97 ms .. 17.02 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 17.02 ms   (17.01 ms .. 17.05 ms)
std dev              47.02 μs   (19.93 μs .. 86.44 μs)

benchmarking getWord8 1MB/chunk size 16 bytes
time                 17.47 ms   (17.31 ms .. 17.63 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 17.42 ms   (17.29 ms .. 17.90 ms)
std dev              509.7 μs   (147.8 μs .. 1.008 ms)

benchmarking getWord8 1MB Applicative/chunk size 2 bytes
time                 34.11 ms   (33.62 ms .. 34.74 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.23 ms   (33.59 ms .. 34.59 ms)
std dev              965.5 μs   (458.4 μs .. 1.718 ms)

benchmarking getWord8 1MB Applicative/chunk size 4 bytes
time                 18.53 ms   (18.25 ms .. 18.89 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 18.57 ms   (18.45 ms .. 18.75 ms)
std dev              329.8 μs   (221.4 μs .. 484.9 μs)

benchmarking getWord8 1MB Applicative/chunk size 8 bytes
time                 11.87 ms   (11.74 ms .. 12.02 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 11.82 ms   (11.74 ms .. 11.92 ms)
std dev              231.8 μs   (184.1 μs .. 318.5 μs)

benchmarking getWord8 1MB Applicative/chunk size 16 bytes
time                 7.462 ms   (7.417 ms .. 7.514 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 7.461 ms   (7.379 ms .. 7.533 ms)
std dev              218.5 μs   (140.8 μs .. 340.3 μs)
variance introduced by outliers: 11% (moderately inflated)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.133s, at: 7539.4MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.3MB/s
1000MB of bytes read    in 0.413s, at: 2423.0MB/s
1000MB of words written in 0.114s, at: 8770.2MB/s
1000MB of words read    in 0.068s, at: 14634.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.7MB/s
1000MB of bytes read    in 0.820s, at: 1219.4MB/s
1000MB of words written in 0.114s, at: 8793.4MB/s
1000MB of words read    in 0.107s, at: 9335.3MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.2 MB/s write,   87.0 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  464.5 MB/s write,  153.2 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  843.5 MB/s write,  325.9 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1398.3 MB/s write,  838.2 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 9f74d402ce304f58644ee0f56f98d87653a39500.log.tmp 9f74d402ce304f58644ee0f56f98d87653a39500.log
