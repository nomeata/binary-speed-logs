
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 848a000cee0e01fcf685f52b93aa77c8d68b7f0b
Note: checking out '848a000cee0e01fcf685f52b93aa77c8d68b7f0b'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 848a000... Change the non-allocating benchmarks to allocating.

Identifying

git log -n 1
commit 848a000cee0e01fcf685f52b93aa77c8d68b7f0b
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sun Aug 9 18:11:02 2015 +0200

    Change the non-allocating benchmarks to allocating.
    
    Previously we had several non-allocating benchmarks.
    They were not representative to the most common use case where we want
    to save all the decoded input, not just a fraction.
    This patch updates the benchmark to save the decoded input in lists.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[3 of 3] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.91 μs   (34.90 μs .. 34.93 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.94 μs   (34.93 μs .. 34.96 μs)
std dev              44.37 ns   (32.09 ns .. 71.09 ns)

benchmarking bounds/[Word8]
time                 42.73 μs   (42.72 μs .. 42.74 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.71 μs   (42.70 μs .. 42.72 μs)
std dev              30.04 ns   (25.63 ns .. 33.77 ns)

benchmarking small ByteString
time                 327.8 ns   (327.6 ns .. 328.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 327.5 ns   (327.2 ns .. 327.7 ns)
std dev              667.8 ps   (573.0 ps .. 801.0 ps)

benchmarking large ByteString
time                 326.7 ns   (326.6 ns .. 326.8 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 326.7 ns   (326.6 ns .. 326.7 ns)
std dev              282.9 ps   (216.5 ps .. 421.1 ps)

benchmarking length-prefixed ByteString
time                 7.524 μs   (7.523 μs .. 7.525 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.525 μs   (7.524 μs .. 7.527 μs)
std dev              4.645 ns   (2.070 ns .. 8.962 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 365.2 μs   (364.5 μs .. 365.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 364.8 μs   (364.6 μs .. 365.0 μs)
std dev              669.9 ns   (371.0 ns .. 1.011 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.7 μs   (224.4 μs .. 225.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.3 μs   (224.1 μs .. 224.5 μs)
std dev              596.5 ns   (395.9 ns .. 941.6 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.4 μs   (155.2 μs .. 155.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.0 μs   (154.8 μs .. 155.2 μs)
std dev              659.7 ns   (587.8 ns .. 787.4 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 96.90 μs   (96.86 μs .. 96.95 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.03 μs   (96.98 μs .. 97.10 μs)
std dev              194.8 ns   (163.4 ns .. 264.9 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.932 ms   (5.930 ms .. 5.934 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.939 ms   (5.937 ms .. 5.944 ms)
std dev              9.611 μs   (6.743 μs .. 13.52 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.316 ms   (6.284 ms .. 6.385 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 6.286 ms   (6.277 ms .. 6.322 ms)
std dev              47.03 μs   (10.94 μs .. 94.65 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.758 ms   (2.757 ms .. 2.759 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.758 ms   (2.757 ms .. 2.760 ms)
std dev              4.959 μs   (3.822 μs .. 7.048 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.805 ms   (2.803 ms .. 2.808 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.816 ms   (2.812 ms .. 2.820 ms)
std dev              12.85 μs   (8.804 μs .. 19.48 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.752 ms   (2.742 ms .. 2.759 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.760 ms   (2.756 ms .. 2.778 ms)
std dev              20.71 μs   (4.878 μs .. 45.36 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.620 ms   (7.608 ms .. 7.648 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.619 ms   (7.612 ms .. 7.639 ms)
std dev              31.79 μs   (13.03 μs .. 61.18 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.33 ms   (22.95 ms .. 23.79 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.67 ms   (23.33 ms .. 24.12 ms)
std dev              884.7 μs   (605.8 μs .. 1.459 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.60 ms   (35.76 ms .. 37.60 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 36.76 ms   (36.29 ms .. 37.15 ms)
std dev              860.0 μs   (590.1 μs .. 1.279 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 27.95 ms   (27.30 ms .. 28.49 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 28.24 ms   (27.89 ms .. 29.08 ms)
std dev              1.094 ms   (485.4 μs .. 1.973 ms)
variance introduced by outliers: 10% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 65.64 ms   (62.96 ms .. 68.09 ms)
                     0.995 R²   (0.984 R² .. 0.999 R²)
mean                 67.10 ms   (65.62 ms .. 69.93 ms)
std dev              3.319 ms   (1.561 ms .. 5.248 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 118.7 ms   (113.0 ms .. 122.0 ms)
                     0.997 R²   (0.991 R² .. 1.000 R²)
mean                 121.5 ms   (118.2 ms .. 124.2 ms)
std dev              4.274 ms   (2.499 ms .. 6.340 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 106.6 ms   (97.90 ms .. 112.7 ms)
                     0.988 R²   (0.962 R² .. 0.999 R²)
mean                 110.3 ms   (105.4 ms .. 115.1 ms)
std dev              7.498 ms   (5.036 ms .. 11.99 ms)
variance introduced by outliers: 20% (moderately inflated)

benchmarking getWord8 1MB chunk size 2 bytes
time                 34.03 ms   (33.55 ms .. 34.69 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.43 ms   (33.98 ms .. 35.31 ms)
std dev              1.255 ms   (616.3 μs .. 2.219 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB chunk size 4 bytes
time                 25.84 ms   (25.20 ms .. 26.52 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 25.98 ms   (25.76 ms .. 26.22 ms)
std dev              527.8 μs   (391.6 μs .. 761.6 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 17.04 ms   (17.02 ms .. 17.06 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 17.07 ms   (17.06 ms .. 17.08 ms)
std dev              21.02 μs   (13.59 μs .. 29.32 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 17.42 ms   (17.25 ms .. 17.62 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 17.48 ms   (17.34 ms .. 17.87 ms)
std dev              510.1 μs   (172.2 μs .. 984.4 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 33.71 ms   (33.26 ms .. 34.28 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 33.72 ms   (33.03 ms .. 34.05 ms)
std dev              990.2 μs   (423.2 μs .. 1.706 ms)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 18.47 ms   (18.17 ms .. 18.80 ms)
                     0.998 R²   (0.997 R² .. 1.000 R²)
mean                 18.54 ms   (18.41 ms .. 18.73 ms)
std dev              363.2 μs   (248.2 μs .. 533.5 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 11.87 ms   (11.71 ms .. 12.01 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 11.80 ms   (11.71 ms .. 11.90 ms)
std dev              249.8 μs   (193.8 μs .. 330.2 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 7.469 ms   (7.411 ms .. 7.541 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 7.416 ms   (7.313 ms .. 7.486 ms)
std dev              243.2 μs   (165.6 μs .. 361.5 μs)
variance introduced by outliers: 13% (moderately inflated)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.131s, at: 7614.6MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.0MB/s
1000MB of bytes read    in 0.413s, at: 2423.2MB/s
1000MB of words written in 0.114s, at: 8807.0MB/s
1000MB of words read    in 0.068s, at: 14729.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.819s, at: 1221.1MB/s
1000MB of bytes read    in 0.820s, at: 1220.2MB/s
1000MB of words written in 0.113s, at: 8842.5MB/s
1000MB of words read    in 0.107s, at: 9348.9MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.8 MB/s write,   87.5 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  469.3 MB/s write,  153.4 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  847.2 MB/s write,  327.2 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1408.2 MB/s write,  841.0 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 848a000cee0e01fcf685f52b93aa77c8d68b7f0b.log.tmp 848a000cee0e01fcf685f52b93aa77c8d68b7f0b.log
