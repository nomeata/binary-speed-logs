
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 848a000cee0e01fcf685f52b93aa77c8d68b7f0b
Note: checking out '848a000cee0e01fcf685f52b93aa77c8d68b7f0b'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 848a000... Change the non-allocating benchmarks to allocating.

Identifying

git log -n 1
commit 848a000cee0e01fcf685f52b93aa77c8d68b7f0b
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sun Aug 9 18:11:02 2015 +0200

    Change the non-allocating benchmarks to allocating.
    
    Previously we had several non-allocating benchmarks.
    They were not representative to the most common use case where we want
    to save all the decoded input, not just a fraction.
    This patch updates the benchmark to save the decoded input in lists.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Warning: The package list for 'hackage.haskell.org' is 78 days old.
Run 'cabal update' to get the latest list of available packages.
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[3 of 3] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.79 μs   (34.78 μs .. 34.79 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.82 μs   (34.81 μs .. 34.84 μs)
std dev              56.88 ns   (46.34 ns .. 75.86 ns)

benchmarking bounds/[Word8]
time                 42.65 μs   (42.65 μs .. 42.65 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.66 μs   (42.65 μs .. 42.66 μs)
std dev              7.243 ns   (6.163 ns .. 8.730 ns)

benchmarking small ByteString
time                 333.8 ns   (333.7 ns .. 334.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 334.4 ns   (334.1 ns .. 334.7 ns)
std dev              968.6 ps   (824.9 ps .. 1.184 ns)

benchmarking large ByteString
time                 330.3 ns   (330.2 ns .. 330.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 330.5 ns   (330.3 ns .. 330.7 ns)
std dev              608.8 ps   (484.0 ps .. 835.5 ps)

benchmarking length-prefixed ByteString
time                 7.574 μs   (7.573 μs .. 7.576 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.575 μs   (7.574 μs .. 7.577 μs)
std dev              3.849 ns   (2.568 ns .. 6.705 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 368.6 μs   (368.5 μs .. 368.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 368.8 μs   (368.7 μs .. 369.0 μs)
std dev              523.0 ns   (415.6 ns .. 638.3 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 225.3 μs   (225.0 μs .. 225.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 225.5 μs   (225.4 μs .. 225.6 μs)
std dev              314.4 ns   (206.9 ns .. 423.2 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.3 μs   (155.2 μs .. 155.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.3 μs   (155.2 μs .. 155.4 μs)
std dev              295.7 ns   (187.7 ns .. 444.4 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.41 μs   (97.40 μs .. 97.43 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.38 μs   (97.36 μs .. 97.40 μs)
std dev              73.55 ns   (58.07 ns .. 101.7 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 6.027 ms   (6.024 ms .. 6.030 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.038 ms   (6.035 ms .. 6.043 ms)
std dev              12.28 μs   (8.577 μs .. 16.93 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.416 ms   (6.413 ms .. 6.419 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.409 ms   (6.406 ms .. 6.412 ms)
std dev              10.31 μs   (8.196 μs .. 13.43 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.790 ms   (2.789 ms .. 2.791 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.791 ms   (2.790 ms .. 2.793 ms)
std dev              4.743 μs   (3.404 μs .. 6.822 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.851 ms   (2.848 ms .. 2.852 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.850 ms   (2.848 ms .. 2.852 ms)
std dev              5.554 μs   (4.143 μs .. 7.478 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.779 ms   (2.778 ms .. 2.780 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.779 ms   (2.778 ms .. 2.781 ms)
std dev              4.057 μs   (3.036 μs .. 5.999 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.478 ms   (7.473 ms .. 7.484 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.477 ms   (7.473 ms .. 7.483 ms)
std dev              13.69 μs   (9.913 μs .. 22.04 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.68 ms   (23.04 ms .. 24.52 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 24.00 ms   (23.69 ms .. 24.30 ms)
std dev              726.2 μs   (561.5 μs .. 1.021 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 37.00 ms   (36.04 ms .. 38.11 ms)
                     0.997 R²   (0.993 R² .. 0.999 R²)
mean                 37.14 ms   (36.41 ms .. 38.00 ms)
std dev              1.550 ms   (1.041 ms .. 2.226 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.93 ms   (26.48 ms .. 27.33 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 27.04 ms   (26.71 ms .. 28.04 ms)
std dev              1.132 ms   (444.3 μs .. 2.190 ms)
variance introduced by outliers: 10% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 68.00 ms   (65.88 ms .. 70.19 ms)
                     0.996 R²   (0.989 R² .. 0.999 R²)
mean                 68.87 ms   (67.25 ms .. 70.74 ms)
std dev              2.862 ms   (1.844 ms .. 4.816 ms)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 118.1 ms   (110.2 ms .. 123.1 ms)
                     0.996 R²   (0.989 R² .. 1.000 R²)
mean                 122.6 ms   (118.9 ms .. 125.5 ms)
std dev              4.927 ms   (3.489 ms .. 6.398 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 107.2 ms   (97.89 ms .. 113.0 ms)
                     0.989 R²   (0.959 R² .. 0.999 R²)
mean                 111.0 ms   (106.8 ms .. 116.0 ms)
std dev              7.535 ms   (5.063 ms .. 11.88 ms)
variance introduced by outliers: 20% (moderately inflated)

benchmarking getWord8 1MB chunk size 2 bytes
time                 35.06 ms   (34.62 ms .. 35.65 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 35.42 ms   (34.94 ms .. 36.33 ms)
std dev              1.274 ms   (604.5 μs .. 2.123 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB chunk size 4 bytes
time                 25.97 ms   (25.57 ms .. 26.41 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.29 ms   (26.14 ms .. 26.47 ms)
std dev              363.8 μs   (271.3 μs .. 489.7 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 17.14 ms   (17.12 ms .. 17.16 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 17.19 ms   (17.18 ms .. 17.20 ms)
std dev              30.76 μs   (20.65 μs .. 49.94 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 17.44 ms   (17.28 ms .. 17.56 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 17.47 ms   (17.35 ms .. 17.98 ms)
std dev              494.2 μs   (125.1 μs .. 1.021 ms)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 34.51 ms   (34.01 ms .. 35.09 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.59 ms   (33.84 ms .. 34.95 ms)
std dev              935.8 μs   (469.2 μs .. 1.687 ms)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 18.98 ms   (18.67 ms .. 19.28 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 18.90 ms   (18.78 ms .. 19.09 ms)
std dev              365.8 μs   (256.4 μs .. 518.3 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 12.01 ms   (11.88 ms .. 12.13 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 11.92 ms   (11.85 ms .. 12.01 ms)
std dev              212.4 μs   (161.8 μs .. 287.1 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 7.530 ms   (7.475 ms .. 7.587 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 7.527 ms   (7.455 ms .. 7.602 ms)
std dev              203.1 μs   (141.0 μs .. 306.8 μs)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7764.7MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.1MB/s
1000MB of bytes read    in 0.413s, at: 2423.5MB/s
1000MB of words written in 0.114s, at: 8793.1MB/s
1000MB of words read    in 0.068s, at: 14711.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.820s, at: 1220.0MB/s
1000MB of words written in 0.113s, at: 8823.3MB/s
1000MB of words read    in 0.107s, at: 9346.0MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  262.3 MB/s write,   87.6 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  472.0 MB/s write,  153.5 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  859.1 MB/s write,  328.3 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1427.7 MB/s write,  841.8 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 848a000cee0e01fcf685f52b93aa77c8d68b7f0b.log.tmp 848a000cee0e01fcf685f52b93aa77c8d68b7f0b.log
