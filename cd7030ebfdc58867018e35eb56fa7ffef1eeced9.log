
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout cd7030ebfdc58867018e35eb56fa7ffef1eeced9
Note: checking out 'cd7030ebfdc58867018e35eb56fa7ffef1eeced9'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at cd7030e... Update Travis CI to use GHC 7.8.3 -> 7.8.4.

Identifying

git log -n 1
commit cd7030ebfdc58867018e35eb56fa7ffef1eeced9
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Tue Jul 28 13:25:48 2015 +0200

    Update Travis CI to use GHC 7.8.3 -> 7.8.4.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1328       1028      43.6%        421       2777
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1328       1028      43.6%        421       2777

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.0...
cabal build
Building binary-0.7.6.0...
Preprocessing library binary-0.7.6.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.0...
Preprocessing benchmark 'builder' for binary-0.7.6.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.0...
Preprocessing library binary-0.7.6.0...
In-place registering binary-0.7.6.0...
Preprocessing benchmark 'builder' for binary-0.7.6.0...
Preprocessing benchmark 'get' for binary-0.7.6.0...
Preprocessing benchmark 'bench' for binary-0.7.6.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.04 μs   (35.03 μs .. 35.04 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.04 μs   (35.04 μs .. 35.06 μs)
std dev              23.60 ns   (11.39 ns .. 38.18 ns)

benchmarking bounds/[Word8]
time                 42.68 μs   (42.67 μs .. 42.68 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.68 μs   (42.67 μs .. 42.69 μs)
std dev              25.90 ns   (9.022 ns .. 53.39 ns)

benchmarking small ByteString
time                 323.9 ns   (323.7 ns .. 324.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.0 ns   (323.9 ns .. 324.2 ns)
std dev              571.8 ps   (488.5 ps .. 701.6 ps)

benchmarking large ByteString
time                 323.0 ns   (322.8 ns .. 323.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 322.9 ns   (322.8 ns .. 323.1 ns)
std dev              667.5 ps   (478.0 ps .. 1.164 ns)

benchmarking length-prefixed ByteString
time                 6.698 μs   (6.697 μs .. 6.699 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.698 μs   (6.698 μs .. 6.699 μs)
std dev              2.869 ns   (2.054 ns .. 4.449 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 365.6 μs   (365.2 μs .. 366.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 365.8 μs   (365.8 μs .. 365.9 μs)
std dev              212.6 ns   (100.9 ns .. 403.7 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 225.0 μs   (224.6 μs .. 225.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.3 μs   (224.1 μs .. 224.5 μs)
std dev              680.6 ns   (558.8 ns .. 832.8 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.4 μs   (155.2 μs .. 155.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.1 μs   (155.0 μs .. 155.2 μs)
std dev              439.2 ns   (379.8 ns .. 528.4 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.39 μs   (97.33 μs .. 97.49 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.86 μs   (97.72 μs .. 98.01 μs)
std dev              468.2 ns   (445.9 ns .. 511.1 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.813 ms   (5.810 ms .. 5.815 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.820 ms   (5.817 ms .. 5.825 ms)
std dev              9.761 μs   (5.964 μs .. 14.76 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.176 ms   (6.173 ms .. 6.179 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.173 ms   (6.170 ms .. 6.177 ms)
std dev              10.70 μs   (8.241 μs .. 13.52 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.980 ms   (2.977 ms .. 2.983 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.981 ms   (2.978 ms .. 2.984 ms)
std dev              9.841 μs   (7.141 μs .. 13.81 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.867 ms   (2.858 ms .. 2.874 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.883 ms   (2.875 ms .. 2.892 ms)
std dev              28.04 μs   (20.12 μs .. 42.21 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.736 ms   (2.733 ms .. 2.740 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.736 ms   (2.733 ms .. 2.739 ms)
std dev              10.05 μs   (8.236 μs .. 12.40 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.527 ms   (7.522 ms .. 7.532 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.528 ms   (7.524 ms .. 7.532 ms)
std dev              12.21 μs   (8.902 μs .. 18.20 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.14 ms   (22.66 ms .. 23.71 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.57 ms   (23.20 ms .. 23.93 ms)
std dev              823.0 μs   (559.1 μs .. 1.241 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.53 ms   (35.80 ms .. 37.38 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 37.02 ms   (36.53 ms .. 37.87 ms)
std dev              1.247 ms   (673.9 μs .. 2.149 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.42 ms   (25.91 ms .. 26.99 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.53 ms   (26.16 ms .. 27.47 ms)
std dev              1.188 ms   (534.6 μs .. 2.057 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.955 ms   (1.954 ms .. 1.955 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.954 ms   (1.954 ms .. 1.955 ms)
std dev              1.148 μs   (897.4 ns .. 1.607 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.22 ms   (14.21 ms .. 14.22 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.21 ms   (14.21 ms .. 14.21 ms)
std dev              5.857 μs   (4.067 μs .. 8.682 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.327 ms   (2.322 ms .. 2.331 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.316 ms   (2.310 ms .. 2.320 ms)
std dev              16.03 μs   (12.91 μs .. 19.84 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.014 ms   (2.013 ms .. 2.015 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.014 ms   (2.014 ms .. 2.015 ms)
std dev              2.820 μs   (2.125 μs .. 3.899 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.988 ms   (5.984 ms .. 5.991 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.991 ms   (5.989 ms .. 5.993 ms)
std dev              5.709 μs   (4.407 μs .. 7.790 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.676 ms   (7.666 ms .. 7.685 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.675 ms   (7.671 ms .. 7.679 ms)
std dev              12.21 μs   (11.00 μs .. 14.36 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.97 ms   (12.96 ms .. 12.97 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.98 ms   (12.97 ms .. 13.00 ms)
std dev              29.86 μs   (5.951 μs .. 59.86 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 977.3 μs   (976.9 μs .. 977.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 977.3 μs   (977.0 μs .. 978.0 μs)
std dev              1.541 μs   (1.106 μs .. 2.697 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 600.0 μs   (599.1 μs .. 601.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 601.2 μs   (600.7 μs .. 601.5 μs)
std dev              1.282 μs   (944.0 ns .. 1.741 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 504.0 μs   (503.9 μs .. 504.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 504.1 μs   (504.0 μs .. 504.2 μs)
std dev              428.7 ns   (340.5 ns .. 541.9 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.9 μs   (554.8 μs .. 554.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 555.0 μs   (554.9 μs .. 555.0 μs)
std dev              155.5 ns   (111.0 ns .. 232.3 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7776.8MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.8MB/s
1000MB of bytes read    in 0.413s, at: 2423.0MB/s
1000MB of words written in 0.114s, at: 8776.5MB/s
1000MB of words read    in 0.068s, at: 14669.4MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.820s, at: 1219.9MB/s
1000MB of words written in 0.113s, at: 8829.3MB/s
1000MB of words read    in 0.107s, at: 9336.3MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  258.9 MB/s write,   87.6 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  463.1 MB/s write,  152.0 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  847.5 MB/s write,  325.8 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1401.8 MB/s write,  839.9 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv cd7030ebfdc58867018e35eb56fa7ffef1eeced9.log.tmp cd7030ebfdc58867018e35eb56fa7ffef1eeced9.log
