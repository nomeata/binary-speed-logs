
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout cd7030ebfdc58867018e35eb56fa7ffef1eeced9
Note: checking out 'cd7030ebfdc58867018e35eb56fa7ffef1eeced9'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at cd7030e... Update Travis CI to use GHC 7.8.3 -> 7.8.4.

Identifying

git log -n 1
commit cd7030ebfdc58867018e35eb56fa7ffef1eeced9
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Tue Jul 28 13:25:48 2015 +0200

    Update Travis CI to use GHC 7.8.3 -> 7.8.4.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1328       1028      43.6%        421       2777
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1328       1028      43.6%        421       2777

Building

cabal configure --enable-benchmarks
Warning: The package list for 'hackage.haskell.org' is 78 days old.
Run 'cabal update' to get the latest list of available packages.
Resolving dependencies...
Configuring binary-0.7.6.0...
cabal build
Building binary-0.7.6.0...
Preprocessing library binary-0.7.6.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.0...
Preprocessing benchmark 'builder' for binary-0.7.6.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.0...
Preprocessing library binary-0.7.6.0...
In-place registering binary-0.7.6.0...
Preprocessing benchmark 'builder' for binary-0.7.6.0...
Preprocessing benchmark 'get' for binary-0.7.6.0...
Preprocessing benchmark 'bench' for binary-0.7.6.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.74 μs   (34.72 μs .. 34.75 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.74 μs   (34.73 μs .. 34.74 μs)
std dev              19.71 ns   (16.38 ns .. 23.99 ns)

benchmarking bounds/[Word8]
time                 42.64 μs   (42.64 μs .. 42.64 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.64 μs   (42.64 μs .. 42.65 μs)
std dev              16.24 ns   (12.27 ns .. 23.36 ns)

benchmarking small ByteString
time                 324.5 ns   (324.3 ns .. 324.7 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.2 ns   (324.9 ns .. 325.4 ns)
std dev              829.3 ps   (713.3 ps .. 971.1 ps)

benchmarking large ByteString
time                 325.0 ns   (324.7 ns .. 325.3 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.6 ns   (324.5 ns .. 324.8 ns)
std dev              596.6 ps   (495.4 ps .. 727.6 ps)

benchmarking length-prefixed ByteString
time                 6.958 μs   (6.957 μs .. 6.959 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.960 μs   (6.959 μs .. 6.961 μs)
std dev              2.445 ns   (1.910 ns .. 3.258 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 367.0 μs   (366.9 μs .. 367.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.8 μs   (366.6 μs .. 367.0 μs)
std dev              785.2 ns   (619.3 ns .. 1.014 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 225.2 μs   (224.9 μs .. 225.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 225.3 μs   (225.2 μs .. 225.4 μs)
std dev              338.5 ns   (201.9 ns .. 509.9 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.2 μs   (154.8 μs .. 155.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.5 μs   (155.3 μs .. 155.6 μs)
std dev              496.3 ns   (393.0 ns .. 585.1 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.97 μs   (97.74 μs .. 98.11 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.50 μs   (97.37 μs .. 97.64 μs)
std dev              444.8 ns   (349.7 ns .. 504.6 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.963 ms   (5.961 ms .. 5.965 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.970 ms   (5.967 ms .. 5.975 ms)
std dev              10.97 μs   (7.164 μs .. 15.60 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.328 ms   (6.325 ms .. 6.332 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.321 ms   (6.317 ms .. 6.325 ms)
std dev              11.40 μs   (8.976 μs .. 14.23 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.725 ms   (2.724 ms .. 2.726 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.725 ms   (2.724 ms .. 2.727 ms)
std dev              4.860 μs   (3.385 μs .. 7.040 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.792 ms   (2.790 ms .. 2.794 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.795 ms   (2.792 ms .. 2.798 ms)
std dev              8.142 μs   (4.815 μs .. 13.55 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.719 ms   (2.718 ms .. 2.720 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.719 ms   (2.718 ms .. 2.721 ms)
std dev              4.329 μs   (3.328 μs .. 5.988 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.376 ms   (7.372 ms .. 7.380 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.378 ms   (7.373 ms .. 7.382 ms)
std dev              12.46 μs   (9.743 μs .. 17.23 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.16 ms   (22.67 ms .. 23.72 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 23.58 ms   (23.24 ms .. 24.04 ms)
std dev              884.6 μs   (667.1 μs .. 1.290 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.61 ms   (35.75 ms .. 37.53 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 36.64 ms   (35.81 ms .. 37.28 ms)
std dev              1.428 ms   (973.3 μs .. 2.095 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.21 ms   (25.83 ms .. 26.65 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.45 ms   (26.08 ms .. 27.18 ms)
std dev              1.151 ms   (491.9 μs .. 2.050 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.949 ms   (1.942 ms .. 1.952 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 1.963 ms   (1.951 ms .. 2.019 ms)
std dev              74.82 μs   (674.4 ns .. 172.3 μs)
variance introduced by outliers: 25% (moderately inflated)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.17 ms   (14.17 ms .. 14.17 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.17 ms   (14.17 ms .. 14.17 ms)
std dev              3.092 μs   (2.159 μs .. 4.713 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.205 ms   (2.201 ms .. 2.208 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.201 ms   (2.198 ms .. 2.205 ms)
std dev              10.88 μs   (9.421 μs .. 13.04 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.995 ms   (1.994 ms .. 1.995 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.994 ms   (1.993 ms .. 1.994 ms)
std dev              2.048 μs   (1.649 μs .. 2.531 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.954 ms   (5.951 ms .. 5.957 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.954 ms   (5.953 ms .. 5.955 ms)
std dev              3.981 μs   (3.251 μs .. 5.501 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.641 ms   (7.633 ms .. 7.649 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.644 ms   (7.641 ms .. 7.648 ms)
std dev              10.96 μs   (9.421 μs .. 12.80 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.98 ms   (12.98 ms .. 12.99 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.99 ms   (12.99 ms .. 13.00 ms)
std dev              9.072 μs   (6.023 μs .. 15.24 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.021 ms   (1.021 ms .. 1.022 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.020 ms   (1.020 ms .. 1.021 ms)
std dev              2.177 μs   (1.696 μs .. 3.211 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 593.9 μs   (593.7 μs .. 594.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 594.0 μs   (593.8 μs .. 594.3 μs)
std dev              877.4 ns   (694.3 ns .. 1.304 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 504.0 μs   (503.9 μs .. 504.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 504.2 μs   (504.0 μs .. 504.4 μs)
std dev              585.1 ns   (475.2 ns .. 764.7 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.5 μs   (554.4 μs .. 554.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.5 μs   (554.4 μs .. 554.5 μs)
std dev              121.2 ns   (99.50 ns .. 149.2 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.134s, at: 7474.0MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.8MB/s
1000MB of bytes read    in 0.413s, at: 2422.9MB/s
1000MB of words written in 0.114s, at: 8797.0MB/s
1000MB of words read    in 0.068s, at: 14703.3MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.810s, at: 1235.3MB/s
1000MB of bytes read    in 0.820s, at: 1219.9MB/s
1000MB of words written in 0.113s, at: 8837.8MB/s
1000MB of words read    in 0.107s, at: 9346.8MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.6 MB/s write,   87.7 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  466.2 MB/s write,  152.0 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  855.0 MB/s write,  327.4 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1417.4 MB/s write,  840.5 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv cd7030ebfdc58867018e35eb56fa7ffef1eeced9.log.tmp cd7030ebfdc58867018e35eb56fa7ffef1eeced9.log
