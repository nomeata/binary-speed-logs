
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout d8c1ee8df945899fa413e155672ec214e1d91e55
Note: checking out 'd8c1ee8df945899fa413e155672ec214e1d91e55'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at d8c1ee8... Refactor and remove compiler warnings from ensureN.

Identifying

git log -n 1
commit d8c1ee8df945899fa413e155672ec214e1d91e55
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Thu May 28 21:40:00 2015 +0200

    Refactor and remove compiler warnings from ensureN.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1318       1030      43.9%        411       2759
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1318       1030      43.9%        411       2759

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:413:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:413:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:413:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.77 μs   (34.75 μs .. 34.79 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.78 μs   (34.77 μs .. 34.80 μs)
std dev              39.42 ns   (23.16 ns .. 70.47 ns)

benchmarking bounds/[Word8]
time                 42.56 μs   (42.55 μs .. 42.58 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.58 μs   (42.57 μs .. 42.60 μs)
std dev              57.99 ns   (35.96 ns .. 96.17 ns)

benchmarking small ByteString
time                 239.0 ns   (238.6 ns .. 239.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 238.7 ns   (238.6 ns .. 239.2 ns)
std dev              801.3 ps   (380.7 ps .. 1.666 ns)

benchmarking large ByteString
time                 237.2 ns   (237.0 ns .. 237.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 238.0 ns   (237.7 ns .. 238.3 ns)
std dev              981.7 ps   (839.7 ps .. 1.164 ns)

benchmarking length-prefixed ByteString
time                 6.781 μs   (6.779 μs .. 6.783 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.785 μs   (6.783 μs .. 6.786 μs)
std dev              4.710 ns   (3.930 ns .. 5.733 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 361.9 μs   (361.7 μs .. 362.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 361.4 μs   (361.2 μs .. 361.6 μs)
std dev              698.9 ns   (562.9 ns .. 899.5 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 220.7 μs   (220.7 μs .. 220.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 220.9 μs   (220.8 μs .. 221.1 μs)
std dev              373.8 ns   (182.1 ns .. 762.5 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 151.3 μs   (151.2 μs .. 151.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 150.9 μs   (150.8 μs .. 151.1 μs)
std dev              663.9 ns   (574.5 ns .. 803.1 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 94.62 μs   (94.35 μs .. 94.80 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 94.04 μs   (93.90 μs .. 94.23 μs)
std dev              551.2 ns   (448.9 ns .. 672.6 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.789 ms   (5.787 ms .. 5.791 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.795 ms   (5.792 ms .. 5.799 ms)
std dev              9.157 μs   (6.118 μs .. 12.51 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.133 ms   (6.129 ms .. 6.137 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.129 ms   (6.125 ms .. 6.132 ms)
std dev              10.50 μs   (8.411 μs .. 13.77 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.676 ms   (2.675 ms .. 2.677 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.675 ms   (2.674 ms .. 2.677 ms)
std dev              4.401 μs   (3.377 μs .. 6.191 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.737 ms   (2.736 ms .. 2.739 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.741 ms   (2.740 ms .. 2.745 ms)
std dev              7.664 μs   (3.939 μs .. 14.36 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.670 ms   (2.669 ms .. 2.671 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.669 ms   (2.668 ms .. 2.670 ms)
std dev              3.634 μs   (3.028 μs .. 4.351 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.151 ms   (7.147 ms .. 7.154 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.150 ms   (7.144 ms .. 7.154 ms)
std dev              12.72 μs   (9.643 μs .. 18.80 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.43 ms   (22.91 ms .. 24.00 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 23.98 ms   (23.60 ms .. 24.55 ms)
std dev              1.049 ms   (691.4 μs .. 1.523 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.58 ms   (35.59 ms .. 37.65 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 36.80 ms   (36.29 ms .. 37.78 ms)
std dev              1.292 ms   (688.1 μs .. 2.089 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.57 ms   (26.10 ms .. 27.01 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.73 ms   (26.36 ms .. 27.69 ms)
std dev              1.240 ms   (455.0 μs .. 2.128 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 2.047 ms   (2.034 ms .. 2.060 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.044 ms   (2.035 ms .. 2.053 ms)
std dev              30.61 μs   (25.40 μs .. 38.32 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.03 ms   (14.03 ms .. 14.03 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.03 ms   (14.03 ms .. 14.03 ms)
std dev              4.194 μs   (3.096 μs .. 5.313 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.169 ms   (2.166 ms .. 2.172 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.160 ms   (2.156 ms .. 2.163 ms)
std dev              13.35 μs   (9.715 μs .. 17.54 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.018 ms   (2.017 ms .. 2.019 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.018 ms   (2.017 ms .. 2.018 ms)
std dev              2.381 μs   (1.992 μs .. 2.887 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.742 ms   (5.740 ms .. 5.746 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.742 ms   (5.741 ms .. 5.744 ms)
std dev              4.305 μs   (3.249 μs .. 5.833 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.478 ms   (7.473 ms .. 7.483 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.481 ms   (7.477 ms .. 7.488 ms)
std dev              14.15 μs   (7.392 μs .. 23.70 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 13.44 ms   (13.43 ms .. 13.45 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.45 ms   (13.44 ms .. 13.48 ms)
std dev              37.51 μs   (8.115 μs .. 75.14 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.118 ms   (1.118 ms .. 1.119 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.118 ms   (1.118 ms .. 1.119 ms)
std dev              1.193 μs   (980.2 ns .. 1.536 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 671.3 μs   (668.5 μs .. 673.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 664.9 μs   (662.9 μs .. 667.0 μs)
std dev              6.736 μs   (5.623 μs .. 8.647 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 528.5 μs   (527.7 μs .. 529.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 527.2 μs   (526.7 μs .. 527.7 μs)
std dev              1.719 μs   (1.434 μs .. 2.142 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 558.6 μs   (558.2 μs .. 558.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 558.3 μs   (558.0 μs .. 558.5 μs)
std dev              731.0 ns   (643.7 ns .. 884.8 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.284s, at: 3520.9MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.300s, at: 3333.1MB/s
1000MB of bytes read    in 0.412s, at: 2427.0MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.072s, at: 13887.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.812s, at: 1231.5MB/s
1000MB of bytes read    in 0.832s, at: 1201.8MB/s
1000MB of words written in 0.112s, at: 8928.0MB/s
1000MB of words read    in 0.112s, at: 8928.0MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  245.1 MB/s write,   89.9 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  471.7 MB/s write,  160.2 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  862.0 MB/s write,  423.7 MB/s read,   0.5 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1388.8 MB/s write,  862.0 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv d8c1ee8df945899fa413e155672ec214e1d91e55.log.tmp d8c1ee8df945899fa413e155672ec214e1d91e55.log
