
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout d8c1ee8df945899fa413e155672ec214e1d91e55
Note: checking out 'd8c1ee8df945899fa413e155672ec214e1d91e55'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at d8c1ee8... Refactor and remove compiler warnings from ensureN.

Identifying

git log -n 1
commit d8c1ee8df945899fa413e155672ec214e1d91e55
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Thu May 28 21:40:00 2015 +0200

    Refactor and remove compiler warnings from ensureN.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1318       1030      43.9%        411       2759
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1318       1030      43.9%        411       2759

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:413:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:413:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:413:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.04 μs   (35.03 μs .. 35.05 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.07 μs   (35.06 μs .. 35.08 μs)
std dev              37.47 ns   (30.17 ns .. 51.17 ns)

benchmarking bounds/[Word8]
time                 42.60 μs   (42.60 μs .. 42.61 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.62 μs   (42.61 μs .. 42.62 μs)
std dev              16.64 ns   (14.34 ns .. 20.98 ns)

benchmarking small ByteString
time                 330.4 ns   (330.0 ns .. 330.8 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 330.6 ns   (330.4 ns .. 330.7 ns)
std dev              569.2 ps   (476.5 ps .. 707.7 ps)

benchmarking large ByteString
time                 323.3 ns   (323.1 ns .. 323.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.4 ns   (323.3 ns .. 323.5 ns)
std dev              341.9 ps   (275.2 ps .. 439.8 ps)

benchmarking length-prefixed ByteString
time                 6.702 μs   (6.702 μs .. 6.703 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.702 μs   (6.702 μs .. 6.703 μs)
std dev              1.760 ns   (1.427 ns .. 2.252 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 365.9 μs   (365.8 μs .. 366.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 365.8 μs   (365.8 μs .. 365.9 μs)
std dev              169.5 ns   (126.8 ns .. 240.1 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.7 μs   (224.4 μs .. 225.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.4 μs   (224.3 μs .. 224.7 μs)
std dev              557.6 ns   (428.6 ns .. 726.1 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.2 μs   (155.0 μs .. 155.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.7 μs   (154.5 μs .. 154.9 μs)
std dev              528.3 ns   (427.8 ns .. 708.5 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.95 μs   (97.86 μs .. 98.02 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.90 μs   (97.82 μs .. 97.95 μs)
std dev              220.6 ns   (140.7 ns .. 359.7 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.847 ms   (5.844 ms .. 5.849 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.853 ms   (5.851 ms .. 5.858 ms)
std dev              9.924 μs   (6.688 μs .. 14.61 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.209 ms   (6.206 ms .. 6.212 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.203 ms   (6.198 ms .. 6.206 ms)
std dev              10.86 μs   (8.338 μs .. 13.64 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.759 ms   (2.757 ms .. 2.760 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.758 ms   (2.757 ms .. 2.760 ms)
std dev              5.813 μs   (4.413 μs .. 7.919 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.810 ms   (2.806 ms .. 2.812 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.815 ms   (2.812 ms .. 2.819 ms)
std dev              10.79 μs   (7.709 μs .. 16.61 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.749 ms   (2.748 ms .. 2.751 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.750 ms   (2.749 ms .. 2.752 ms)
std dev              4.667 μs   (3.296 μs .. 7.073 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.599 ms   (7.593 ms .. 7.605 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.602 ms   (7.597 ms .. 7.607 ms)
std dev              15.12 μs   (10.20 μs .. 24.33 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.25 ms   (22.81 ms .. 23.86 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.61 ms   (23.31 ms .. 24.04 ms)
std dev              830.7 μs   (523.2 μs .. 1.272 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.87 ms   (35.77 ms .. 37.86 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 37.03 ms   (36.48 ms .. 37.92 ms)
std dev              1.314 ms   (741.8 μs .. 2.155 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.77 ms   (26.28 ms .. 27.18 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 26.93 ms   (26.55 ms .. 27.88 ms)
std dev              1.183 ms   (500.9 μs .. 2.311 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.954 ms   (1.952 ms .. 1.956 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.955 ms   (1.953 ms .. 1.958 ms)
std dev              9.090 μs   (4.813 μs .. 17.65 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.14 ms   (14.13 ms .. 14.15 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.14 ms   (14.14 ms .. 14.14 ms)
std dev              4.493 μs   (3.091 μs .. 5.968 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.142 ms   (2.136 ms .. 2.149 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.143 ms   (2.138 ms .. 2.147 ms)
std dev              16.60 μs   (13.07 μs .. 21.13 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.001 ms   (2.000 ms .. 2.002 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.001 ms   (2.000 ms .. 2.002 ms)
std dev              1.992 μs   (1.565 μs .. 2.654 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.909 ms   (5.906 ms .. 5.912 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.910 ms   (5.909 ms .. 5.912 ms)
std dev              4.353 μs   (3.421 μs .. 5.964 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.784 ms   (7.779 ms .. 7.788 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.786 ms   (7.784 ms .. 7.788 ms)
std dev              7.036 μs   (5.302 μs .. 9.841 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 13.76 ms   (13.75 ms .. 13.77 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.77 ms   (13.76 ms .. 13.79 ms)
std dev              28.11 μs   (6.957 μs .. 56.05 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 978.3 μs   (977.5 μs .. 979.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 978.5 μs   (978.0 μs .. 979.3 μs)
std dev              2.157 μs   (1.646 μs .. 2.922 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 590.4 μs   (590.1 μs .. 590.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 590.4 μs   (590.1 μs .. 590.7 μs)
std dev              984.6 ns   (662.6 ns .. 1.472 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 502.7 μs   (502.6 μs .. 502.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 502.8 μs   (502.7 μs .. 502.9 μs)
std dev              335.3 ns   (281.5 ns .. 408.2 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.0 μs   (554.0 μs .. 554.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.2 μs   (554.1 μs .. 554.4 μs)
std dev              342.4 ns   (118.6 ns .. 700.9 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7742.1MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.7MB/s
1000MB of bytes read    in 0.413s, at: 2423.3MB/s
1000MB of words written in 0.114s, at: 8793.8MB/s
1000MB of words read    in 0.068s, at: 14736.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.830s, at: 1204.6MB/s
1000MB of words written in 0.113s, at: 8833.1MB/s
1000MB of words read    in 0.107s, at: 9342.5MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  261.6 MB/s write,   87.3 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  473.0 MB/s write,  156.2 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  847.5 MB/s write,  412.0 MB/s read,   0.5 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1409.0 MB/s write,  840.2 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv d8c1ee8df945899fa413e155672ec214e1d91e55.log.tmp d8c1ee8df945899fa413e155672ec214e1d91e55.log
