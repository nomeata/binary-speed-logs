
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout f9ff5c36f46f4f6d12baf5ab2fce7d553dba712f
Note: checking out 'f9ff5c36f46f4f6d12baf5ab2fce7d553dba712f'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at f9ff5c3... Conditionally include Data.Monoid for older GHC versions.

Identifying

git log -n 1
commit f9ff5c36f46f4f6d12baf5ab2fce7d553dba712f
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Fri Aug 14 22:30:16 2015 +0200

    Conditionally include Data.Monoid for older GHC versions.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
[ 1 of 11] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 2 of 11] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder.o )
[ 3 of 11] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 4 of 11] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Put.o )
[ 5 of 11] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get.o )
[ 6 of 11] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Class.o )
[ 7 of 11] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Generic.o )
[ 8 of 11] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary.o )
[ 9 of 11] Compiling GenericsBenchTypes ( benchmarks/GenericsBenchTypes.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchTypes.o )
[10 of 11] Compiling GenericsBenchCache ( benchmarks/GenericsBenchCache.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchCache.o )
[11 of 11] Compiling Main             ( benchmarks/GenericsBench.hs, dist/build/generics-bench/generics-bench-tmp/Main.o )
Linking dist/build/generics-bench/generics-bench ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[3 of 3] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 4 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.99 μs   (34.97 μs .. 35.00 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.01 μs   (35.00 μs .. 35.02 μs)
std dev              32.74 ns   (27.53 ns .. 40.58 ns)

benchmarking bounds/[Word8]
time                 42.85 μs   (42.83 μs .. 42.86 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.80 μs   (42.79 μs .. 42.82 μs)
std dev              59.19 ns   (50.14 ns .. 72.47 ns)

benchmarking small ByteString
time                 325.5 ns   (325.2 ns .. 325.8 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.4 ns   (325.2 ns .. 325.6 ns)
std dev              539.0 ps   (461.2 ps .. 658.5 ps)

benchmarking large ByteString
time                 330.3 ns   (330.2 ns .. 330.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 330.6 ns   (330.5 ns .. 330.7 ns)
std dev              508.9 ps   (421.4 ps .. 627.4 ps)

benchmarking length-prefixed ByteString
time                 7.531 μs   (7.530 μs .. 7.531 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.531 μs   (7.531 μs .. 7.531 μs)
std dev              1.496 ns   (1.267 ns .. 1.839 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.5 μs   (366.4 μs .. 366.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.8 μs   (366.7 μs .. 367.1 μs)
std dev              737.1 ns   (523.9 ns .. 961.2 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 223.8 μs   (223.8 μs .. 223.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 223.9 μs   (223.8 μs .. 223.9 μs)
std dev              85.09 ns   (65.69 ns .. 129.6 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.4 μs   (154.4 μs .. 154.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.7 μs   (154.6 μs .. 154.8 μs)
std dev              289.1 ns   (258.5 ns .. 324.1 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.10 μs   (97.08 μs .. 97.12 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.10 μs   (97.08 μs .. 97.12 μs)
std dev              62.21 ns   (51.55 ns .. 82.90 ns)

Benchmark builder: FINISH
Benchmark generics-bench: RUNNING...
creating cabal cache file... done
benchmarking encode
time                 45.57 ms   (44.83 ms .. 46.28 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 45.38 ms   (44.97 ms .. 46.39 ms)
std dev              1.215 ms   (515.9 μs .. 2.153 ms)

benchmarking decode
time                 17.75 ms   (17.38 ms .. 18.08 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 17.60 ms   (17.13 ms .. 18.03 ms)
std dev              1.115 ms   (730.8 μs .. 1.654 ms)
variance introduced by outliers: 25% (moderately inflated)

benchmarking decode null
time                 11.14 ms   (10.94 ms .. 11.38 ms)
                     0.996 R²   (0.993 R² .. 0.998 R²)
mean                 11.06 ms   (10.89 ms .. 11.28 ms)
std dev              523.2 μs   (409.0 μs .. 774.5 μs)
variance introduced by outliers: 20% (moderately inflated)

benchmarking embarrassment/read
time                 639.2 ms   (633.8 ms .. 644.5 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 635.6 ms   (634.6 ms .. 636.4 ms)
std dev              1.326 ms   (0.0 s .. 1.431 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking embarrassment/show
time                 36.02 ms   (35.68 ms .. 36.35 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 35.93 ms   (35.69 ms .. 36.15 ms)
std dev              469.7 μs   (360.3 μs .. 632.8 μs)

Benchmark generics-bench: FINISH
Benchmark get: RUNNING...
benchmarking brackets/Binary 100kb, one chunk
time                 6.381 ms   (6.379 ms .. 6.383 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.394 ms   (6.390 ms .. 6.399 ms)
std dev              13.59 μs   (9.500 μs .. 18.67 μs)

benchmarking brackets/Binary 100kb, 100 byte chunks
time                 6.752 ms   (6.748 ms .. 6.756 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.746 ms   (6.741 ms .. 6.750 ms)
std dev              12.08 μs   (9.144 μs .. 16.33 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, one chunk
time                 2.786 ms   (2.785 ms .. 2.787 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.785 ms   (2.784 ms .. 2.787 ms)
std dev              4.284 μs   (3.335 μs .. 5.719 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, 100 byte chunks
time                 2.839 ms   (2.838 ms .. 2.841 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.842 ms   (2.840 ms .. 2.844 ms)
std dev              5.618 μs   (4.127 μs .. 8.642 μs)

benchmarking brackets/Attoparsec strict-bs 100kb
time                 2.774 ms   (2.772 ms .. 2.775 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.769 ms   (2.767 ms .. 2.771 ms)
std dev              6.851 μs   (5.258 μs .. 8.736 μs)

benchmarking brackets/Cereal strict-bs 100kb
time                 7.382 ms   (7.375 ms .. 7.393 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.382 ms   (7.377 ms .. 7.388 ms)
std dev              16.33 μs   (12.91 μs .. 23.13 μs)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Attoparsec
time                 26.78 ms   (26.34 ms .. 27.20 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.75 ms   (26.39 ms .. 27.56 ms)
std dev              1.178 ms   (481.9 μs .. 2.349 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Binary
time                 23.21 ms   (22.58 ms .. 23.85 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 23.54 ms   (23.09 ms .. 24.10 ms)
std dev              1.095 ms   (754.0 μs .. 1.653 ms)
variance introduced by outliers: 14% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Cereal
time                 36.50 ms   (35.64 ms .. 37.75 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 36.87 ms   (36.11 ms .. 37.65 ms)
std dev              1.475 ms   (977.4 μs .. 2.203 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking comparison getWord8, 1MB/Attoparsec
time                 106.9 ms   (96.85 ms .. 113.4 ms)
                     0.987 R²   (0.953 R² .. 0.999 R²)
mean                 110.8 ms   (105.7 ms .. 115.7 ms)
std dev              7.783 ms   (5.132 ms .. 12.52 ms)
variance introduced by outliers: 20% (moderately inflated)

benchmarking comparison getWord8, 1MB/Binary
time                 65.86 ms   (62.74 ms .. 68.31 ms)
                     0.995 R²   (0.984 R² .. 0.999 R²)
mean                 67.53 ms   (66.05 ms .. 70.13 ms)
std dev              3.339 ms   (1.506 ms .. 5.526 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking comparison getWord8, 1MB/Cereal
time                 118.7 ms   (111.5 ms .. 124.8 ms)
                     0.993 R²   (0.968 R² .. 1.000 R²)
mean                 122.3 ms   (116.1 ms .. 125.2 ms)
std dev              5.832 ms   (2.697 ms .. 8.807 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 2 bytes
time                 34.27 ms   (33.85 ms .. 34.88 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.73 ms   (34.29 ms .. 35.71 ms)
std dev              1.264 ms   (587.5 μs .. 2.153 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 4 bytes
time                 25.83 ms   (25.30 ms .. 26.33 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 26.01 ms   (25.76 ms .. 26.27 ms)
std dev              568.8 μs   (422.4 μs .. 783.5 μs)

benchmarking getWord8 1MB/chunk size 8 bytes
time                 16.97 ms   (16.94 ms .. 16.98 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 16.98 ms   (16.97 ms .. 17.00 ms)
std dev              26.74 μs   (9.509 μs .. 50.19 μs)

benchmarking getWord8 1MB/chunk size 16 bytes
time                 17.46 ms   (17.30 ms .. 17.62 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 17.43 ms   (17.31 ms .. 17.79 ms)
std dev              517.7 μs   (139.9 μs .. 969.1 μs)

benchmarking getWord8 1MB Applicative/chunk size 2 bytes
time                 34.10 ms   (33.65 ms .. 34.68 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.16 ms   (33.49 ms .. 34.50 ms)
std dev              1.007 ms   (438.9 μs .. 1.787 ms)

benchmarking getWord8 1MB Applicative/chunk size 4 bytes
time                 18.50 ms   (18.21 ms .. 18.84 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 18.53 ms   (18.42 ms .. 18.70 ms)
std dev              319.7 μs   (218.4 μs .. 484.0 μs)

benchmarking getWord8 1MB Applicative/chunk size 8 bytes
time                 11.87 ms   (11.73 ms .. 12.01 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 11.81 ms   (11.73 ms .. 11.90 ms)
std dev              235.5 μs   (182.4 μs .. 332.1 μs)

benchmarking getWord8 1MB Applicative/chunk size 16 bytes
time                 7.496 ms   (7.449 ms .. 7.552 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 7.483 ms   (7.407 ms .. 7.546 ms)
std dev              210.3 μs   (140.7 μs .. 330.2 μs)
variance introduced by outliers: 11% (moderately inflated)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7776.5MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.9MB/s
1000MB of bytes read    in 0.413s, at: 2422.8MB/s
1000MB of words written in 0.114s, at: 8797.6MB/s
1000MB of words read    in 0.068s, at: 14712.4MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.4MB/s
1000MB of bytes read    in 0.820s, at: 1220.2MB/s
1000MB of words written in 0.113s, at: 8833.0MB/s
1000MB of words read    in 0.107s, at: 9341.0MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.0 MB/s write,   87.5 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  467.4 MB/s write,  153.4 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  844.9 MB/s write,  326.7 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1405.8 MB/s write,  840.9 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv f9ff5c36f46f4f6d12baf5ab2fce7d553dba712f.log.tmp f9ff5c36f46f4f6d12baf5ab2fce7d553dba712f.log
