
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 6c9c47f8db5d23360d1147288086e33f9d93350e
Note: checking out '6c9c47f8db5d23360d1147288086e33f9d93350e'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 6c9c47f... Simplify the skip, get*LazyByteString* functions.

Identifying

git log -n 1
commit 6c9c47f8db5d23360d1147288086e33f9d93350e
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sat May 30 11:14:27 2015 +0200

    Simplify the skip, get*LazyByteString* functions.
    
    Affects;
     - skip
     - getLazyByteString
     - getLazyByteStringNul
     - getRemainingLazyByteString
    
    These functions all read input chunks until some condition,
    reading enough bytes, reaching a NUL character, or it has consumed all
    bytes. They're now implemented by withInputChunks.
    This fixes a bug where the position in the input previously wasn't
    correctly reported if you ran out of input bytes.
    
    Tests have been added for getLazyByteString and skip to Action.hs.
    Tests for getLazyByteStringNul and getRemainingLazyByteString already
    exist in QC.hs.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1026      44.0%        418       2751
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1026      44.0%        418       2751

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:235:44:
    Not in scope: `mempty'
    Perhaps you meant one of these:
      `B.empty' (imported from Data.ByteString),
      `empty' (imported from Control.Applicative),
      `B.memcpy' (imported from Data.ByteString.Internal)

Failure...

mv 6c9c47f8db5d23360d1147288086e33f9d93350e.log.tmp 6c9c47f8db5d23360d1147288086e33f9d93350e.log.broken
rm -rf binary-tmp-REV
