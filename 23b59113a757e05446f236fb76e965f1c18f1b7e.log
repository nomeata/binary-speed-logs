
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 23b59113a757e05446f236fb76e965f1c18f1b7e
Note: checking out '23b59113a757e05446f236fb76e965f1c18f1b7e'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 23b5911... Bump version to 0.7.6.0.

Identifying

git log -n 1
commit 23b59113a757e05446f236fb76e965f1c18f1b7e
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Mon Jul 27 13:59:19 2015 +0200

    Bump version to 0.7.6.0.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1328       1028      43.6%        421       2777
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1328       1028      43.6%        421       2777

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.0...
cabal build
Building binary-0.7.6.0...
Preprocessing library binary-0.7.6.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.0...
Preprocessing benchmark 'builder' for binary-0.7.6.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.0...
Preprocessing library binary-0.7.6.0...
In-place registering binary-0.7.6.0...
Preprocessing benchmark 'builder' for binary-0.7.6.0...
Preprocessing benchmark 'get' for binary-0.7.6.0...
Preprocessing benchmark 'bench' for binary-0.7.6.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.08 μs   (35.07 μs .. 35.09 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.09 μs   (35.08 μs .. 35.09 μs)
std dev              14.39 ns   (11.16 ns .. 17.68 ns)

benchmarking bounds/[Word8]
time                 42.76 μs   (42.75 μs .. 42.77 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.72 μs   (42.70 μs .. 42.73 μs)
std dev              47.95 ns   (42.04 ns .. 54.39 ns)

benchmarking small ByteString
time                 324.6 ns   (324.5 ns .. 324.8 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.2 ns   (325.0 ns .. 325.4 ns)
std dev              624.4 ps   (535.3 ps .. 741.4 ps)

benchmarking large ByteString
time                 324.4 ns   (324.3 ns .. 324.6 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.0 ns   (324.8 ns .. 325.2 ns)
std dev              678.3 ps   (620.6 ps .. 755.9 ps)

benchmarking length-prefixed ByteString
time                 6.706 μs   (6.706 μs .. 6.707 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.706 μs   (6.705 μs .. 6.707 μs)
std dev              2.074 ns   (1.622 ns .. 2.879 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 364.5 μs   (364.4 μs .. 364.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 364.5 μs   (364.4 μs .. 364.5 μs)
std dev              154.0 ns   (119.2 ns .. 218.9 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 225.1 μs   (224.5 μs .. 225.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.3 μs   (224.1 μs .. 224.6 μs)
std dev              787.7 ns   (515.4 ns .. 1.337 μs)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.2 μs   (154.8 μs .. 155.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.0 μs   (154.5 μs .. 155.8 μs)
std dev              1.910 μs   (1.155 μs .. 2.727 μs)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.10 μs   (97.08 μs .. 97.13 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.13 μs   (97.12 μs .. 97.14 μs)
std dev              44.08 ns   (37.26 ns .. 53.96 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.801 ms   (5.799 ms .. 5.802 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.807 ms   (5.805 ms .. 5.810 ms)
std dev              8.367 μs   (5.054 μs .. 13.13 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.174 ms   (6.170 ms .. 6.178 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.168 ms   (6.163 ms .. 6.171 ms)
std dev              11.83 μs   (9.042 μs .. 15.87 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.901 ms   (2.894 ms .. 2.906 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.901 ms   (2.896 ms .. 2.906 ms)
std dev              14.63 μs   (11.35 μs .. 18.99 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.877 ms   (2.868 ms .. 2.885 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.882 ms   (2.874 ms .. 2.890 ms)
std dev              26.71 μs   (20.50 μs .. 38.82 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.721 ms   (2.719 ms .. 2.723 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.721 ms   (2.719 ms .. 2.723 ms)
std dev              6.296 μs   (4.673 μs .. 9.950 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.511 ms   (7.506 ms .. 7.515 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.514 ms   (7.509 ms .. 7.518 ms)
std dev              12.80 μs   (8.311 μs .. 19.79 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.16 ms   (22.68 ms .. 23.71 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.64 ms   (23.27 ms .. 23.97 ms)
std dev              849.0 μs   (576.3 μs .. 1.293 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.52 ms   (35.86 ms .. 37.29 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 37.04 ms   (36.53 ms .. 37.83 ms)
std dev              1.241 ms   (714.0 μs .. 2.233 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.43 ms   (25.86 ms .. 27.06 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.54 ms   (26.18 ms .. 27.51 ms)
std dev              1.208 ms   (513.5 μs .. 2.105 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.959 ms   (1.959 ms .. 1.959 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.959 ms   (1.959 ms .. 1.959 ms)
std dev              888.5 ns   (703.4 ns .. 1.327 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.17 ms   (14.16 ms .. 14.17 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.16 ms   (14.15 ms .. 14.16 ms)
std dev              5.711 μs   (5.032 μs .. 6.621 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.333 ms   (2.328 ms .. 2.337 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.328 ms   (2.323 ms .. 2.332 ms)
std dev              15.15 μs   (11.28 μs .. 21.76 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.005 ms   (2.004 ms .. 2.006 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.004 ms   (2.004 ms .. 2.005 ms)
std dev              1.916 μs   (1.582 μs .. 2.443 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.958 ms   (5.955 ms .. 5.960 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.959 ms   (5.957 ms .. 5.960 ms)
std dev              4.523 μs   (3.628 μs .. 5.785 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.613 ms   (7.603 ms .. 7.623 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.619 ms   (7.614 ms .. 7.623 ms)
std dev              11.79 μs   (10.17 μs .. 15.49 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.90 ms   (12.90 ms .. 12.91 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.91 ms   (12.90 ms .. 12.93 ms)
std dev              24.18 μs   (6.394 μs .. 51.21 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 976.8 μs   (975.9 μs .. 978.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 977.3 μs   (976.6 μs .. 978.1 μs)
std dev              2.371 μs   (1.821 μs .. 3.534 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 598.1 μs   (597.0 μs .. 599.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 600.1 μs   (599.5 μs .. 600.5 μs)
std dev              1.719 μs   (1.293 μs .. 2.231 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 503.6 μs   (503.4 μs .. 503.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 503.5 μs   (503.3 μs .. 503.6 μs)
std dev              495.7 ns   (405.2 ns .. 651.0 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.1 μs   (554.1 μs .. 554.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.2 μs   (554.1 μs .. 554.2 μs)
std dev              168.3 ns   (126.7 ns .. 229.5 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7769.3MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.7MB/s
1000MB of bytes read    in 0.413s, at: 2423.3MB/s
1000MB of words written in 0.114s, at: 8800.0MB/s
1000MB of words read    in 0.068s, at: 14700.0MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.7MB/s
1000MB of bytes read    in 0.820s, at: 1220.2MB/s
1000MB of words written in 0.113s, at: 8833.1MB/s
1000MB of words read    in 0.107s, at: 9341.3MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.6 MB/s write,   88.1 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  464.4 MB/s write,  152.7 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  847.0 MB/s write,  327.2 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1407.7 MB/s write,  844.8 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 23b59113a757e05446f236fb76e965f1c18f1b7e.log.tmp 23b59113a757e05446f236fb76e965f1c18f1b7e.log
