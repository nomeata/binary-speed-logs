
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout e46b7b61111579befcc99954be8a0f48738f8ef7
Note: checking out 'e46b7b61111579befcc99954be8a0f48738f8ef7'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at e46b7b6... Remove quadratic behaviour in `ensureN`.

Identifying

git log -n 1
commit e46b7b61111579befcc99954be8a0f48738f8ef7
Author: Francesco Mazzoli <f@mazzo.li>
Date:   Thu May 28 00:16:53 2015 +0200

    Remove quadratic behaviour in `ensureN`.
    
    Chains of `B.append`s were being created by repeated calls to
    `demandInput`.
    
    Try the following program, which writes and read 100MB, to appreciate
    the difference:
    
    ```
    import qualified Data.ByteString as BS
    import qualified Data.ByteString.Lazy as BSL
    import Data.Binary (encode, decode)
    import Data.Char (ord)
    
    main :: IO ()
    main = do
    
      let inBs = BS.replicate 100000000 (fromIntegral $ ord 'a')
      BSL.writeFile "bs.bin" (encode inBs)
      putStrLn "writing done"
    
      bin <- BSL.readFile "bs.bin"
      -- This takes around 30 seconds and causes more than 10GB to be
      -- allocated.
      let outBs = decode bin
      print $ inBs == outBs
    ```

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1313       1029      43.9%        410       2752
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1313       1029      43.9%        410       2752

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:387:11: Warning:
    This binding for `remaining' shadows the existing binding
      defined at src/Data/Binary/Get/Internal.hs:334:1

src/Data/Binary/Get/Internal.hs:406:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:406:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:406:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.06 μs   (35.05 μs .. 35.07 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.07 μs   (35.07 μs .. 35.08 μs)
std dev              14.53 ns   (10.24 ns .. 23.92 ns)

benchmarking bounds/[Word8]
time                 42.68 μs   (42.66 μs .. 42.72 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.66 μs   (42.65 μs .. 42.69 μs)
std dev              56.44 ns   (16.11 ns .. 115.6 ns)

benchmarking small ByteString
time                 325.6 ns   (325.1 ns .. 326.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.5 ns   (325.3 ns .. 325.8 ns)
std dev              845.2 ps   (574.0 ps .. 1.388 ns)

benchmarking large ByteString
time                 321.8 ns   (321.7 ns .. 322.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 322.3 ns   (322.1 ns .. 322.4 ns)
std dev              571.6 ps   (500.2 ps .. 665.2 ps)

benchmarking length-prefixed ByteString
time                 6.724 μs   (6.722 μs .. 6.725 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.721 μs   (6.720 μs .. 6.723 μs)
std dev              3.987 ns   (2.932 ns .. 6.068 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.4 μs   (366.4 μs .. 366.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.4 μs   (366.4 μs .. 366.5 μs)
std dev              164.7 ns   (123.1 ns .. 210.1 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.5 μs   (224.3 μs .. 224.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.1 μs   (224.0 μs .. 224.3 μs)
std dev              460.3 ns   (369.4 ns .. 616.0 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.5 μs   (154.4 μs .. 154.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.7 μs   (154.6 μs .. 154.8 μs)
std dev              270.3 ns   (217.4 ns .. 345.2 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.47 μs   (97.26 μs .. 97.64 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.01 μs   (96.88 μs .. 97.14 μs)
std dev              439.0 ns   (338.5 ns .. 590.6 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 9.609 ms   (9.604 ms .. 9.614 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 9.625 ms   (9.619 ms .. 9.633 ms)
std dev              18.50 μs   (12.53 μs .. 24.16 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 9.993 ms   (9.987 ms .. 10.000 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 9.984 ms   (9.979 ms .. 9.989 ms)
std dev              12.63 μs   (10.09 μs .. 16.21 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.684 ms   (2.680 ms .. 2.686 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.685 ms   (2.684 ms .. 2.687 ms)
std dev              4.409 μs   (3.521 μs .. 6.102 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.757 ms   (2.755 ms .. 2.759 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.760 ms   (2.758 ms .. 2.762 ms)
std dev              6.957 μs   (5.434 μs .. 9.254 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.670 ms   (2.668 ms .. 2.672 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.669 ms   (2.667 ms .. 2.670 ms)
std dev              4.152 μs   (3.380 μs .. 5.156 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.532 ms   (7.528 ms .. 7.535 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.530 ms   (7.524 ms .. 7.533 ms)
std dev              11.66 μs   (6.810 μs .. 19.96 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 46.29 ms   (45.41 ms .. 47.26 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 46.13 ms   (45.68 ms .. 46.52 ms)
std dev              823.8 μs   (649.4 μs .. 1.070 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.67 ms   (35.91 ms .. 37.63 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 37.20 ms   (36.67 ms .. 37.88 ms)
std dev              1.248 ms   (713.3 μs .. 2.083 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.56 ms   (26.05 ms .. 27.14 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.70 ms   (26.31 ms .. 27.56 ms)
std dev              1.209 ms   (533.5 μs .. 2.208 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 20.95 ms   (20.94 ms .. 20.97 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 21.00 ms   (20.98 ms .. 21.04 ms)
std dev              61.09 μs   (34.78 μs .. 82.83 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.17 ms   (14.17 ms .. 14.17 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.17 ms   (14.17 ms .. 14.17 ms)
std dev              3.925 μs   (2.882 μs .. 5.246 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.224 ms   (2.222 ms .. 2.226 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.220 ms   (2.217 ms .. 2.222 ms)
std dev              9.585 μs   (7.008 μs .. 13.93 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 21.21 ms   (21.20 ms .. 21.22 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 21.22 ms   (21.22 ms .. 21.24 ms)
std dev              29.74 μs   (11.51 μs .. 50.55 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 20.78 ms   (20.77 ms .. 20.78 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 20.80 ms   (20.79 ms .. 20.82 ms)
std dev              29.66 μs   (13.84 μs .. 50.79 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 23.96 ms   (23.95 ms .. 23.97 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 23.98 ms   (23.97 ms .. 24.00 ms)
std dev              28.93 μs   (14.23 μs .. 43.45 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 30.27 ms   (30.25 ms .. 30.29 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 30.29 ms   (30.28 ms .. 30.32 ms)
std dev              42.90 μs   (20.01 μs .. 61.10 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 11.08 ms   (11.07 ms .. 11.09 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 11.08 ms   (11.08 ms .. 11.10 ms)
std dev              21.14 μs   (7.671 μs .. 43.97 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 5.677 ms   (5.675 ms .. 5.680 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.680 ms   (5.678 ms .. 5.681 ms)
std dev              4.515 μs   (3.648 μs .. 5.979 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 3.043 ms   (3.042 ms .. 3.044 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 3.043 ms   (3.042 ms .. 3.044 ms)
std dev              2.832 μs   (2.328 μs .. 3.575 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 1.898 ms   (1.897 ms .. 1.898 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.897 ms   (1.897 ms .. 1.898 ms)
std dev              2.432 μs   (1.895 μs .. 3.265 μs)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7776.3MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.5MB/s
1000MB of bytes read    in 0.413s, at: 2423.4MB/s
1000MB of words written in 0.114s, at: 8794.0MB/s
1000MB of words read    in 0.068s, at: 14681.7MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.820s, at: 1220.2MB/s
1000MB of words written in 0.113s, at: 8836.4MB/s
1000MB of words read    in 0.107s, at: 9341.0MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  261.1 MB/s write,   32.5 MB/s read,   0.1 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  466.7 MB/s write,   60.8 MB/s read,   0.1 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  843.7 MB/s write,  129.9 MB/s read,   0.2 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1402.3 MB/s write,  245.3 MB/s read,   0.2 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv e46b7b61111579befcc99954be8a0f48738f8ef7.log.tmp e46b7b61111579befcc99954be8a0f48738f8ef7.log
