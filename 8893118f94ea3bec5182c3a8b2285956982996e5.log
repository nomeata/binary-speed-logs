
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 8893118f94ea3bec5182c3a8b2285956982996e5
Note: checking out '8893118f94ea3bec5182c3a8b2285956982996e5'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 8893118... Silence warning.

Identifying

git log -n 1
commit 8893118f94ea3bec5182c3a8b2285956982996e5
Author: Lennart Kolmodin <kolmodin@gmail.com>
Date:   Sat Jan 10 12:51:38 2015 +0300

    Silence warning.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1027      44.0%        410       2744
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1027      44.0%        410       2744

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.2.3...
cabal build
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.2.3...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
Preprocessing benchmark 'get' for binary-0.7.2.3...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.11 μs   (35.04 μs .. 35.23 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.13 μs   (35.06 μs .. 35.36 μs)
std dev              343.6 ns   (30.84 ns .. 744.0 ns)

benchmarking bounds/[Word8]
time                 42.78 μs   (42.75 μs .. 42.80 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.74 μs   (42.73 μs .. 42.76 μs)
std dev              53.14 ns   (43.16 ns .. 64.13 ns)

benchmarking small ByteString
time                 325.5 ns   (325.3 ns .. 325.8 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.8 ns   (324.6 ns .. 325.1 ns)
std dev              809.0 ps   (719.0 ps .. 923.8 ps)

benchmarking large ByteString
time                 321.7 ns   (321.6 ns .. 321.9 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 321.5 ns   (321.3 ns .. 321.6 ns)
std dev              492.1 ps   (417.3 ps .. 619.8 ps)

benchmarking length-prefixed ByteString
time                 6.705 μs   (6.703 μs .. 6.706 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.707 μs   (6.706 μs .. 6.709 μs)
std dev              4.715 ns   (2.532 ns .. 7.563 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.0 μs   (365.9 μs .. 366.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.0 μs   (365.9 μs .. 366.1 μs)
std dev              279.6 ns   (204.7 ns .. 436.6 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.9 μs   (224.6 μs .. 225.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.4 μs   (224.3 μs .. 224.6 μs)
std dev              461.4 ns   (386.3 ns .. 609.3 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.7 μs   (154.5 μs .. 155.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.6 μs   (154.5 μs .. 154.6 μs)
std dev              265.7 ns   (176.2 ns .. 410.4 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.45 μs   (97.17 μs .. 97.83 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.91 μs   (97.69 μs .. 98.09 μs)
std dev              653.5 ns   (601.5 ns .. 693.1 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.945 ms   (5.942 ms .. 5.948 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.956 ms   (5.953 ms .. 5.961 ms)
std dev              11.54 μs   (8.977 μs .. 16.07 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.156 ms   (6.153 ms .. 6.159 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.155 ms   (6.152 ms .. 6.159 ms)
std dev              9.904 μs   (7.599 μs .. 13.58 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.684 ms   (2.682 ms .. 2.687 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.686 ms   (2.684 ms .. 2.688 ms)
std dev              6.541 μs   (5.719 μs .. 7.873 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.761 ms   (2.759 ms .. 2.763 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.757 ms   (2.756 ms .. 2.759 ms)
std dev              5.830 μs   (4.688 μs .. 7.917 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.683 ms   (2.680 ms .. 2.686 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.686 ms   (2.685 ms .. 2.688 ms)
std dev              4.209 μs   (3.588 μs .. 5.138 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.417 ms   (7.411 ms .. 7.422 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.415 ms   (7.411 ms .. 7.419 ms)
std dev              11.48 μs   (8.225 μs .. 18.25 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 24.06 ms   (23.44 ms .. 24.75 ms)
                     0.996 R²   (0.993 R² .. 0.998 R²)
mean                 24.14 ms   (23.74 ms .. 24.52 ms)
std dev              866.3 μs   (729.2 μs .. 1.093 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 37.28 ms   (35.91 ms .. 38.52 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 36.82 ms   (36.32 ms .. 37.27 ms)
std dev              932.7 μs   (661.8 μs .. 1.294 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.67 ms   (26.19 ms .. 27.20 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 26.62 ms   (26.25 ms .. 27.47 ms)
std dev              1.184 ms   (555.8 μs .. 2.072 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.894 ms   (1.893 ms .. 1.894 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.893 ms   (1.893 ms .. 1.893 ms)
std dev              856.5 ns   (671.6 ns .. 1.215 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.05 ms   (14.05 ms .. 14.06 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.06 ms   (14.05 ms .. 14.06 ms)
std dev              6.619 μs   (4.062 μs .. 11.48 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.220 ms   (2.216 ms .. 2.223 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.219 ms   (2.216 ms .. 2.222 ms)
std dev              10.17 μs   (8.696 μs .. 12.28 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.875 ms   (1.874 ms .. 1.876 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.874 ms   (1.874 ms .. 1.875 ms)
std dev              977.2 ns   (752.5 ns .. 1.583 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.794 ms   (5.793 ms .. 5.796 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.793 ms   (5.792 ms .. 5.794 ms)
std dev              3.365 μs   (2.491 μs .. 4.589 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.494 ms   (7.491 ms .. 7.498 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.497 ms   (7.496 ms .. 7.501 ms)
std dev              7.285 μs   (4.541 μs .. 11.68 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 10.62 ms   (10.62 ms .. 10.62 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 10.62 ms   (10.62 ms .. 10.62 ms)
std dev              5.092 μs   (3.876 μs .. 6.730 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 954.5 μs   (953.9 μs .. 955.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 955.5 μs   (955.1 μs .. 956.1 μs)
std dev              1.650 μs   (1.232 μs .. 2.313 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 547.2 μs   (546.1 μs .. 548.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 547.2 μs   (546.4 μs .. 548.0 μs)
std dev              2.854 μs   (2.388 μs .. 3.636 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 441.1 μs   (440.9 μs .. 441.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 441.0 μs   (440.9 μs .. 441.1 μs)
std dev              373.7 ns   (300.3 ns .. 462.6 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 491.3 μs   (491.2 μs .. 491.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 491.3 μs   (491.2 μs .. 491.3 μs)
std dev              103.2 ns   (87.38 ns .. 123.0 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7776.7MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.3MB/s
1000MB of bytes read    in 0.413s, at: 2422.9MB/s
1000MB of words written in 0.114s, at: 8789.1MB/s
1000MB of words read    in 0.068s, at: 14701.8MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.810s, at: 1234.7MB/s
1000MB of bytes read    in 0.830s, at: 1204.5MB/s
1000MB of words written in 0.113s, at: 8813.0MB/s
1000MB of words read    in 0.117s, at: 8557.8MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  261.5 MB/s write,   92.3 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  524.1 MB/s write,  160.4 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  937.4 MB/s write,  345.4 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1627.6 MB/s write,  861.1 MB/s read,   0.5 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 8893118f94ea3bec5182c3a8b2285956982996e5.log.tmp 8893118f94ea3bec5182c3a8b2285956982996e5.log
