
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout fb98a5b15880aca220caeca3f5c404adb6a35eaf
Note: checking out 'fb98a5b15880aca220caeca3f5c404adb6a35eaf'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at fb98a5b... Add changelog.md to 'cabal sdist'

Identifying

git log -n 1
commit fb98a5b15880aca220caeca3f5c404adb6a35eaf
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Wed Jul 8 16:10:13 2015 +0200

    Add changelog.md to 'cabal sdist'
    
    Should fix issue #80.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1328       1028      43.6%        421       2777
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1328       1028      43.6%        421       2777

Building

cabal configure --enable-benchmarks
Warning: The package list for 'hackage.haskell.org' is 38 days old.
Run 'cabal update' to get the latest list of available packages.
Resolving dependencies...
Configuring binary-0.7.5.0...
cabal build
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.5.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
Preprocessing benchmark 'get' for binary-0.7.5.0...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.74 μs   (34.73 μs .. 34.75 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.76 μs   (34.76 μs .. 34.77 μs)
std dev              28.47 ns   (20.70 ns .. 45.04 ns)

benchmarking bounds/[Word8]
time                 42.51 μs   (42.50 μs .. 42.52 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.52 μs   (42.50 μs .. 42.56 μs)
std dev              79.09 ns   (20.00 ns .. 162.6 ns)

benchmarking small ByteString
time                 237.7 ns   (237.6 ns .. 237.9 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 238.0 ns   (237.9 ns .. 238.1 ns)
std dev              484.8 ps   (379.7 ps .. 756.4 ps)

benchmarking large ByteString
time                 238.3 ns   (238.2 ns .. 238.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 238.5 ns   (238.4 ns .. 238.7 ns)
std dev              492.8 ps   (422.0 ps .. 590.2 ps)

benchmarking length-prefixed ByteString
time                 6.783 μs   (6.782 μs .. 6.784 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.785 μs   (6.784 μs .. 6.786 μs)
std dev              3.504 ns   (2.941 ns .. 4.306 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 363.4 μs   (362.9 μs .. 363.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 362.9 μs   (362.7 μs .. 363.1 μs)
std dev              639.7 ns   (470.4 ns .. 863.5 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 221.3 μs   (221.1 μs .. 221.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 221.7 μs   (221.6 μs .. 221.8 μs)
std dev              447.4 ns   (350.7 ns .. 574.9 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 151.8 μs   (151.6 μs .. 151.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 151.8 μs   (151.6 μs .. 151.9 μs)
std dev              367.6 ns   (106.0 ns .. 674.8 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 94.71 μs   (94.37 μs .. 94.91 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 94.28 μs   (94.13 μs .. 94.46 μs)
std dev              534.8 ns   (446.5 ns .. 630.4 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.838 ms   (5.836 ms .. 5.840 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.843 ms   (5.840 ms .. 5.846 ms)
std dev              8.029 μs   (4.741 μs .. 11.94 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.186 ms   (6.183 ms .. 6.190 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.181 ms   (6.177 ms .. 6.184 ms)
std dev              11.28 μs   (8.897 μs .. 14.26 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.654 ms   (2.653 ms .. 2.656 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.653 ms   (2.651 ms .. 2.656 ms)
std dev              6.944 μs   (4.881 μs .. 10.27 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.721 ms   (2.719 ms .. 2.724 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.722 ms   (2.721 ms .. 2.724 ms)
std dev              5.985 μs   (4.388 μs .. 8.223 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.651 ms   (2.649 ms .. 2.653 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.651 ms   (2.650 ms .. 2.653 ms)
std dev              5.076 μs   (4.108 μs .. 7.841 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.211 ms   (7.207 ms .. 7.216 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.208 ms   (7.203 ms .. 7.213 ms)
std dev              15.01 μs   (11.41 μs .. 21.93 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.16 ms   (22.53 ms .. 23.81 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 23.73 ms   (23.26 ms .. 24.35 ms)
std dev              1.224 ms   (858.3 μs .. 1.896 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.52 ms   (35.67 ms .. 37.47 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 36.57 ms   (36.10 ms .. 37.37 ms)
std dev              1.216 ms   (695.4 μs .. 1.945 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.35 ms   (25.91 ms .. 26.79 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.55 ms   (26.17 ms .. 27.42 ms)
std dev              1.238 ms   (430.1 μs .. 2.275 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.949 ms   (1.949 ms .. 1.950 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.950 ms   (1.949 ms .. 1.950 ms)
std dev              697.2 ns   (526.2 ns .. 951.9 ns)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 13.74 ms   (13.74 ms .. 13.74 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.74 ms   (13.73 ms .. 13.74 ms)
std dev              6.560 μs   (4.193 μs .. 11.36 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.220 ms   (2.217 ms .. 2.224 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.217 ms   (2.214 ms .. 2.221 ms)
std dev              11.91 μs   (9.937 μs .. 15.18 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.966 ms   (1.965 ms .. 1.967 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.966 ms   (1.965 ms .. 1.966 ms)
std dev              1.993 μs   (1.678 μs .. 2.553 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.758 ms   (5.755 ms .. 5.760 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.761 ms   (5.759 ms .. 5.762 ms)
std dev              4.486 μs   (3.327 μs .. 6.458 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.373 ms   (7.366 ms .. 7.380 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.379 ms   (7.375 ms .. 7.382 ms)
std dev              10.36 μs   (8.899 μs .. 12.31 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.62 ms   (12.61 ms .. 12.63 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.62 ms   (12.62 ms .. 12.64 ms)
std dev              24.22 μs   (8.288 μs .. 46.34 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.022 ms   (1.020 ms .. 1.023 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.021 ms   (1.020 ms .. 1.022 ms)
std dev              3.311 μs   (2.582 μs .. 4.286 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 611.7 μs   (609.6 μs .. 613.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 610.5 μs   (609.0 μs .. 612.8 μs)
std dev              6.369 μs   (4.488 μs .. 10.87 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 507.4 μs   (506.8 μs .. 508.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 507.1 μs   (506.6 μs .. 507.7 μs)
std dev              1.939 μs   (1.558 μs .. 2.394 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 553.3 μs   (552.2 μs .. 555.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 552.4 μs   (552.1 μs .. 553.2 μs)
std dev              1.232 μs   (246.3 ns .. 2.801 μs)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.284s, at: 3520.9MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.300s, at: 3333.1MB/s
1000MB of bytes read    in 0.412s, at: 2427.0MB/s
1000MB of words written in 0.116s, at: 8620.1MB/s
1000MB of words read    in 0.072s, at: 13888.1MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.808s, at: 1237.5MB/s
1000MB of bytes read    in 0.820s, at: 1219.4MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.108s, at: 9258.7MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  242.7 MB/s write,   90.2 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  462.9 MB/s write,  156.2 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  862.0 MB/s write,  328.9 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1470.5 MB/s write,  862.0 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv fb98a5b15880aca220caeca3f5c404adb6a35eaf.log.tmp fb98a5b15880aca220caeca3f5c404adb6a35eaf.log
