
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout fb98a5b15880aca220caeca3f5c404adb6a35eaf
Note: checking out 'fb98a5b15880aca220caeca3f5c404adb6a35eaf'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at fb98a5b... Add changelog.md to 'cabal sdist'

Identifying

git log -n 1
commit fb98a5b15880aca220caeca3f5c404adb6a35eaf
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Wed Jul 8 16:10:13 2015 +0200

    Add changelog.md to 'cabal sdist'
    
    Should fix issue #80.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1328       1028      43.6%        421       2777
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1328       1028      43.6%        421       2777

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.5.0...
cabal build
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.5.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
Preprocessing benchmark 'get' for binary-0.7.5.0...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.06 μs   (35.05 μs .. 35.07 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.07 μs   (35.06 μs .. 35.07 μs)
std dev              13.81 ns   (7.702 ns .. 20.94 ns)

benchmarking bounds/[Word8]
time                 42.64 μs   (42.63 μs .. 42.65 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.67 μs   (42.66 μs .. 42.67 μs)
std dev              29.40 ns   (26.21 ns .. 32.92 ns)

benchmarking small ByteString
time                 325.1 ns   (324.8 ns .. 325.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.4 ns   (324.0 ns .. 324.7 ns)
std dev              1.135 ns   (988.6 ps .. 1.341 ns)

benchmarking large ByteString
time                 324.4 ns   (324.3 ns .. 324.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.3 ns   (324.2 ns .. 324.4 ns)
std dev              268.8 ps   (216.7 ps .. 327.8 ps)

benchmarking length-prefixed ByteString
time                 6.708 μs   (6.707 μs .. 6.708 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.711 μs   (6.710 μs .. 6.711 μs)
std dev              2.017 ns   (1.735 ns .. 2.455 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.7 μs   (366.2 μs .. 367.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.0 μs   (365.8 μs .. 366.2 μs)
std dev              541.7 ns   (384.6 ns .. 712.1 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.2 μs   (224.2 μs .. 224.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.2 μs   (224.2 μs .. 224.3 μs)
std dev              94.72 ns   (79.78 ns .. 115.9 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.0 μs   (154.9 μs .. 155.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.6 μs   (154.5 μs .. 154.7 μs)
std dev              386.4 ns   (332.9 ns .. 422.9 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 96.91 μs   (96.87 μs .. 96.95 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 96.87 μs   (96.86 μs .. 96.90 μs)
std dev              73.83 ns   (48.88 ns .. 112.0 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.813 ms   (5.810 ms .. 5.816 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.821 ms   (5.818 ms .. 5.825 ms)
std dev              11.35 μs   (6.448 μs .. 16.79 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.181 ms   (6.177 ms .. 6.184 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.175 ms   (6.170 ms .. 6.178 ms)
std dev              10.89 μs   (8.210 μs .. 14.64 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.929 ms   (2.921 ms .. 2.937 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.935 ms   (2.931 ms .. 2.940 ms)
std dev              13.32 μs   (10.93 μs .. 18.90 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.872 ms   (2.862 ms .. 2.884 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.885 ms   (2.878 ms .. 2.898 ms)
std dev              30.84 μs   (20.22 μs .. 53.14 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.735 ms   (2.731 ms .. 2.739 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.740 ms   (2.737 ms .. 2.743 ms)
std dev              9.410 μs   (7.497 μs .. 11.44 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.523 ms   (7.518 ms .. 7.528 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.523 ms   (7.519 ms .. 7.528 ms)
std dev              13.30 μs   (9.878 μs .. 19.47 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.16 ms   (22.55 ms .. 23.88 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 23.70 ms   (23.29 ms .. 24.16 ms)
std dev              948.0 μs   (652.6 μs .. 1.336 ms)
variance introduced by outliers: 14% (moderately inflated)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.43 ms   (35.56 ms .. 37.34 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 37.06 ms   (36.45 ms .. 37.88 ms)
std dev              1.316 ms   (835.7 μs .. 2.216 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.83 ms   (26.19 ms .. 27.42 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.67 ms   (26.21 ms .. 27.42 ms)
std dev              1.260 ms   (599.6 μs .. 2.316 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.957 ms   (1.957 ms .. 1.958 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.957 ms   (1.957 ms .. 1.957 ms)
std dev              866.0 ns   (702.2 ns .. 1.220 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.21 ms   (14.20 ms .. 14.21 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.20 ms   (14.20 ms .. 14.20 ms)
std dev              6.498 μs   (3.776 μs .. 11.19 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.330 ms   (2.325 ms .. 2.335 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.324 ms   (2.319 ms .. 2.328 ms)
std dev              17.05 μs   (12.29 μs .. 23.47 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.009 ms   (2.008 ms .. 2.009 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.009 ms   (2.009 ms .. 2.010 ms)
std dev              2.107 μs   (1.729 μs .. 2.796 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.981 ms   (5.977 ms .. 5.984 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.981 ms   (5.980 ms .. 5.983 ms)
std dev              5.533 μs   (4.140 μs .. 8.495 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.677 ms   (7.665 ms .. 7.690 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.677 ms   (7.671 ms .. 7.681 ms)
std dev              14.32 μs   (12.81 μs .. 16.54 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.97 ms   (12.97 ms .. 12.98 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.98 ms   (12.98 ms .. 13.00 ms)
std dev              21.14 μs   (5.468 μs .. 44.86 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 976.1 μs   (975.6 μs .. 976.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 976.9 μs   (976.6 μs .. 977.3 μs)
std dev              1.282 μs   (997.5 ns .. 1.751 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 602.3 μs   (602.1 μs .. 602.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 602.2 μs   (602.1 μs .. 602.3 μs)
std dev              428.0 ns   (296.1 ns .. 589.3 ns)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 504.5 μs   (504.4 μs .. 504.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 504.5 μs   (504.4 μs .. 504.7 μs)
std dev              448.7 ns   (291.2 ns .. 746.9 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.9 μs   (554.9 μs .. 555.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 555.0 μs   (554.9 μs .. 555.0 μs)
std dev              168.5 ns   (117.6 ns .. 261.1 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7772.0MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.6MB/s
1000MB of bytes read    in 0.413s, at: 2423.7MB/s
1000MB of words written in 0.114s, at: 8784.0MB/s
1000MB of words read    in 0.068s, at: 14698.7MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.820s, at: 1220.2MB/s
1000MB of words written in 0.113s, at: 8827.4MB/s
1000MB of words read    in 0.107s, at: 9345.5MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.1 MB/s write,   87.7 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  463.7 MB/s write,  152.0 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  842.6 MB/s write,  325.5 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1405.7 MB/s write,  839.5 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv fb98a5b15880aca220caeca3f5c404adb6a35eaf.log.tmp fb98a5b15880aca220caeca3f5c404adb6a35eaf.log
