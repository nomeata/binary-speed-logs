
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout fb98a5b15880aca220caeca3f5c404adb6a35eaf
Note: checking out 'fb98a5b15880aca220caeca3f5c404adb6a35eaf'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at fb98a5b... Add changelog.md to 'cabal sdist'

Identifying

git log -n 1
commit fb98a5b15880aca220caeca3f5c404adb6a35eaf
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Wed Jul 8 16:10:13 2015 +0200

    Add changelog.md to 'cabal sdist'
    
    Should fix issue #80.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1328       1028      43.6%        421       2777
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1328       1028      43.6%        421       2777

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.5.0...
cabal build
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.5.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
Preprocessing benchmark 'get' for binary-0.7.5.0...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.02 μs   (35.01 μs .. 35.02 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.03 μs   (35.02 μs .. 35.04 μs)
std dev              17.35 ns   (13.18 ns .. 23.75 ns)

benchmarking bounds/[Word8]
time                 42.62 μs   (42.61 μs .. 42.62 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.62 μs   (42.61 μs .. 42.64 μs)
std dev              31.96 ns   (8.648 ns .. 71.34 ns)

benchmarking small ByteString
time                 324.0 ns   (323.7 ns .. 324.2 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.7 ns   (324.4 ns .. 325.0 ns)
std dev              1.159 ns   (1.021 ns .. 1.350 ns)

benchmarking large ByteString
time                 323.0 ns   (322.7 ns .. 323.2 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.3 ns   (323.1 ns .. 323.6 ns)
std dev              784.2 ps   (649.2 ps .. 992.2 ps)

benchmarking length-prefixed ByteString
time                 6.725 μs   (6.724 μs .. 6.727 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.726 μs   (6.725 μs .. 6.727 μs)
std dev              3.137 ns   (2.238 ns .. 4.809 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.5 μs   (366.4 μs .. 366.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.5 μs   (366.4 μs .. 366.6 μs)
std dev              204.6 ns   (146.9 ns .. 323.9 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.4 μs   (224.2 μs .. 224.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.8 μs   (224.7 μs .. 224.9 μs)
std dev              396.1 ns   (274.3 ns .. 528.6 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.3 μs   (153.9 μs .. 154.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.3 μs   (154.2 μs .. 154.5 μs)
std dev              420.0 ns   (292.4 ns .. 736.6 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.13 μs   (96.79 μs .. 97.45 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.40 μs   (97.20 μs .. 97.58 μs)
std dev              607.9 ns   (553.2 ns .. 657.9 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.815 ms   (5.804 ms .. 5.826 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.812 ms   (5.809 ms .. 5.817 ms)
std dev              11.73 μs   (7.788 μs .. 16.29 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.179 ms   (6.176 ms .. 6.183 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.172 ms   (6.168 ms .. 6.176 ms)
std dev              12.25 μs   (9.360 μs .. 15.86 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.921 ms   (2.913 ms .. 2.930 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.925 ms   (2.920 ms .. 2.930 ms)
std dev              16.71 μs   (13.72 μs .. 21.16 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.862 ms   (2.851 ms .. 2.874 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.880 ms   (2.872 ms .. 2.892 ms)
std dev              33.07 μs   (24.27 μs .. 55.05 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.729 ms   (2.726 ms .. 2.733 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.737 ms   (2.732 ms .. 2.743 ms)
std dev              16.87 μs   (14.07 μs .. 20.75 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.502 ms   (7.496 ms .. 7.508 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.503 ms   (7.499 ms .. 7.507 ms)
std dev              12.20 μs   (9.411 μs .. 18.19 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.08 ms   (22.58 ms .. 23.61 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.56 ms   (23.23 ms .. 23.94 ms)
std dev              836.5 μs   (577.7 μs .. 1.235 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.51 ms   (35.82 ms .. 37.37 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 37.01 ms   (36.57 ms .. 37.80 ms)
std dev              1.235 ms   (724.2 μs .. 2.032 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.36 ms   (25.85 ms .. 26.90 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.47 ms   (26.10 ms .. 27.44 ms)
std dev              1.194 ms   (536.9 μs .. 2.225 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.958 ms   (1.958 ms .. 1.958 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.958 ms   (1.957 ms .. 1.958 ms)
std dev              911.0 ns   (699.4 ns .. 1.495 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.14 ms   (14.14 ms .. 14.14 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.13 ms   (14.13 ms .. 14.14 ms)
std dev              5.988 μs   (4.397 μs .. 7.806 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.324 ms   (2.321 ms .. 2.329 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.317 ms   (2.313 ms .. 2.320 ms)
std dev              13.05 μs   (10.89 μs .. 16.17 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.003 ms   (2.002 ms .. 2.004 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.003 ms   (2.002 ms .. 2.003 ms)
std dev              1.910 μs   (1.535 μs .. 2.360 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.949 ms   (5.947 ms .. 5.951 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.949 ms   (5.948 ms .. 5.951 ms)
std dev              3.937 μs   (2.958 μs .. 5.353 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.628 ms   (7.620 ms .. 7.637 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.628 ms   (7.624 ms .. 7.633 ms)
std dev              11.82 μs   (10.49 μs .. 13.65 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.91 ms   (12.91 ms .. 12.92 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.91 ms   (12.91 ms .. 12.93 ms)
std dev              17.51 μs   (5.257 μs .. 33.85 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 974.6 μs   (974.2 μs .. 975.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 974.9 μs   (974.4 μs .. 975.4 μs)
std dev              1.593 μs   (1.252 μs .. 2.032 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 593.2 μs   (592.5 μs .. 593.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 592.9 μs   (592.6 μs .. 593.3 μs)
std dev              1.283 μs   (1.043 μs .. 1.586 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 502.8 μs   (502.7 μs .. 503.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 502.9 μs   (502.8 μs .. 503.1 μs)
std dev              378.5 ns   (286.9 ns .. 510.6 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 553.6 μs   (553.6 μs .. 553.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 553.6 μs   (553.6 μs .. 553.7 μs)
std dev              207.3 ns   (134.6 ns .. 287.6 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.130s, at: 7720.0MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3354.6MB/s
1000MB of bytes read    in 0.413s, at: 2423.0MB/s
1000MB of words written in 0.114s, at: 8802.8MB/s
1000MB of words read    in 0.068s, at: 14750.6MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.6MB/s
1000MB of bytes read    in 0.820s, at: 1220.0MB/s
1000MB of words written in 0.113s, at: 8838.6MB/s
1000MB of words read    in 0.107s, at: 9345.4MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.2 MB/s write,   88.0 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  464.4 MB/s write,  152.4 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  847.4 MB/s write,  327.6 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1408.0 MB/s write,  843.6 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv fb98a5b15880aca220caeca3f5c404adb6a35eaf.log.tmp fb98a5b15880aca220caeca3f5c404adb6a35eaf.log
