
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 0b7abd9f8e168382babc43e57621ea25daaa8c4e
Note: checking out '0b7abd9f8e168382babc43e57621ea25daaa8c4e'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 0b7abd9... Attempt to reduce compile time on Travis CI.

Identifying

git log -n 1
commit 0b7abd9f8e168382babc43e57621ea25daaa8c4e
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Thu Oct 29 18:14:00 2015 +0100

    Attempt to reduce compile time on Travis CI.
    
    As suggested at https://github.com/hvr/multi-ghc-travis, reduce the
    effect of bug https://ghc.haskell.org/trac/ghc/ticket/9221.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Warning: The package list for 'hackage.haskell.org' is 67 days old.
Run 'cabal update' to get the latest list of available packages.
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
[ 1 of 11] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 2 of 11] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder.o )
[ 3 of 11] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 4 of 11] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Put.o )
[ 5 of 11] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get.o )
[ 6 of 11] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Class.o )
[ 7 of 11] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Generic.o )
[ 8 of 11] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary.o )
[ 9 of 11] Compiling GenericsBenchTypes ( benchmarks/GenericsBenchTypes.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchTypes.o )
[10 of 11] Compiling GenericsBenchCache ( benchmarks/GenericsBenchCache.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchCache.o )
[11 of 11] Compiling Main             ( benchmarks/GenericsBench.hs, dist/build/generics-bench/generics-bench-tmp/Main.o )
Linking dist/build/generics-bench/generics-bench ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 4 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.12 μs   (34.83 μs .. 35.84 μs)
                     0.996 R²   (0.987 R² .. 1.000 R²)
mean                 35.15 μs   (34.83 μs .. 37.05 μs)
std dev              2.058 μs   (18.25 ns .. 5.033 μs)
variance introduced by outliers: 64% (severely inflated)

benchmarking bounds/[Word8]
time                 42.81 μs   (42.33 μs .. 43.73 μs)
                     0.998 R²   (0.995 R² .. 1.000 R²)
mean                 42.87 μs   (42.70 μs .. 43.67 μs)
std dev              1.015 μs   (41.54 ns .. 2.317 μs)
variance introduced by outliers: 21% (moderately inflated)

benchmarking small ByteString
time                 324.8 ns   (324.7 ns .. 325.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.8 ns   (324.7 ns .. 324.9 ns)
std dev              320.8 ps   (268.2 ps .. 389.8 ps)

benchmarking large ByteString
time                 326.6 ns   (326.5 ns .. 326.7 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 326.6 ns   (326.5 ns .. 326.6 ns)
std dev              268.8 ps   (218.6 ps .. 337.9 ps)

benchmarking length-prefixed ByteString
time                 6.103 μs   (6.102 μs .. 6.104 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.106 μs   (6.105 μs .. 6.106 μs)
std dev              1.885 ns   (1.628 ns .. 2.242 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 368.3 μs   (368.2 μs .. 368.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 368.3 μs   (368.2 μs .. 368.6 μs)
std dev              577.7 ns   (348.1 ns .. 985.9 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 225.0 μs   (224.8 μs .. 225.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.7 μs   (224.6 μs .. 224.9 μs)
std dev              414.1 ns   (267.8 ns .. 618.7 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.7 μs   (155.6 μs .. 155.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.3 μs   (155.1 μs .. 155.4 μs)
std dev              529.5 ns   (418.4 ns .. 668.7 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.32 μs   (97.29 μs .. 97.34 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.28 μs   (97.26 μs .. 97.30 μs)
std dev              62.15 ns   (51.82 ns .. 79.38 ns)

Benchmark builder: FINISH
Benchmark generics-bench: RUNNING...
creating cabal cache file... done
benchmarking encode
time                 45.27 ms   (44.48 ms .. 46.00 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 45.15 ms   (44.70 ms .. 46.11 ms)
std dev              1.246 ms   (503.3 μs .. 2.122 ms)

benchmarking decode
time                 17.69 ms   (17.34 ms .. 18.04 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 17.54 ms   (17.06 ms .. 17.98 ms)
std dev              1.101 ms   (736.7 μs .. 1.636 ms)
variance introduced by outliers: 25% (moderately inflated)

benchmarking decode null
time                 11.11 ms   (10.91 ms .. 11.34 ms)
                     0.996 R²   (0.993 R² .. 0.998 R²)
mean                 11.03 ms   (10.86 ms .. 11.25 ms)
std dev              518.6 μs   (406.3 μs .. 748.0 μs)
variance introduced by outliers: 20% (moderately inflated)

benchmarking embarrassment/read
time                 638.8 ms   (632.7 ms .. 644.2 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 635.5 ms   (634.4 ms .. 636.3 ms)
std dev              1.251 ms   (0.0 s .. 1.419 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking embarrassment/show
time                 35.99 ms   (35.62 ms .. 36.33 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 35.89 ms   (35.68 ms .. 36.13 ms)
std dev              473.6 μs   (358.6 μs .. 622.3 μs)

Benchmark generics-bench: FINISH
Benchmark get: RUNNING...
benchmarking brackets/Binary 100kb, one chunk
time                 6.368 ms   (6.356 ms .. 6.380 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.369 ms   (6.359 ms .. 6.387 ms)
std dev              41.39 μs   (27.08 μs .. 69.78 μs)

benchmarking brackets/Binary 100kb, 100 byte chunks
time                 6.744 ms   (6.734 ms .. 6.755 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.726 ms   (6.713 ms .. 6.737 ms)
std dev              38.36 μs   (32.70 μs .. 48.28 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, one chunk
time                 2.759 ms   (2.754 ms .. 2.764 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.760 ms   (2.755 ms .. 2.767 ms)
std dev              18.96 μs   (12.95 μs .. 29.11 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, 100 byte chunks
time                 2.877 ms   (2.872 ms .. 2.882 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.881 ms   (2.876 ms .. 2.886 ms)
std dev              15.33 μs   (12.53 μs .. 20.16 μs)

benchmarking brackets/Attoparsec strict-bs 100kb
time                 2.744 ms   (2.739 ms .. 2.748 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.744 ms   (2.740 ms .. 2.752 ms)
std dev              19.01 μs   (13.07 μs .. 30.08 μs)

benchmarking brackets/Cereal strict-bs 100kb
time                 7.360 ms   (7.347 ms .. 7.374 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.361 ms   (7.347 ms .. 7.378 ms)
std dev              44.20 μs   (31.70 μs .. 71.90 μs)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Attoparsec
time                 26.87 ms   (26.51 ms .. 27.31 ms)
                     0.997 R²   (0.993 R² .. 0.999 R²)
mean                 26.60 ms   (26.15 ms .. 27.00 ms)
std dev              954.1 μs   (696.7 μs .. 1.297 ms)
variance introduced by outliers: 10% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Binary
time                 23.43 ms   (23.09 ms .. 23.80 ms)
                     0.998 R²   (0.996 R² .. 1.000 R²)
mean                 23.50 ms   (23.06 ms .. 23.87 ms)
std dev              915.6 μs   (571.4 μs .. 1.456 ms)
variance introduced by outliers: 14% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Cereal
time                 37.20 ms   (36.54 ms .. 37.76 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 37.16 ms   (36.65 ms .. 37.68 ms)
std dev              999.5 μs   (772.5 μs .. 1.380 ms)

benchmarking comparison getWord8, 1MB/Attoparsec
time                 103.1 ms   (95.27 ms .. 113.2 ms)
                     0.985 R²   (0.962 R² .. 0.996 R²)
mean                 104.8 ms   (98.94 ms .. 109.5 ms)
std dev              7.981 ms   (5.056 ms .. 12.18 ms)
variance introduced by outliers: 21% (moderately inflated)

benchmarking comparison getWord8, 1MB/Binary
time                 65.49 ms   (63.17 ms .. 68.31 ms)
                     0.995 R²   (0.988 R² .. 0.999 R²)
mean                 66.17 ms   (64.36 ms .. 67.59 ms)
std dev              2.740 ms   (2.069 ms .. 3.788 ms)

benchmarking comparison getWord8, 1MB/Cereal
time                 116.4 ms   (106.4 ms .. 126.6 ms)
                     0.987 R²   (0.959 R² .. 0.998 R²)
mean                 120.7 ms   (115.4 ms .. 125.3 ms)
std dev              7.005 ms   (4.572 ms .. 9.574 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking getWord8 1MB/chunk size 2 bytes
time                 33.90 ms   (32.96 ms .. 34.85 ms)
                     0.995 R²   (0.988 R² .. 0.998 R²)
mean                 34.60 ms   (33.81 ms .. 35.64 ms)
std dev              1.878 ms   (1.293 ms .. 2.602 ms)
variance introduced by outliers: 18% (moderately inflated)

benchmarking getWord8 1MB/chunk size 4 bytes
time                 25.84 ms   (25.45 ms .. 26.26 ms)
                     0.999 R²   (0.997 R² .. 0.999 R²)
mean                 25.74 ms   (25.13 ms .. 26.12 ms)
std dev              1.047 ms   (646.0 μs .. 1.657 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking getWord8 1MB/chunk size 8 bytes
time                 18.81 ms   (18.73 ms .. 18.91 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 19.01 ms   (18.93 ms .. 19.20 ms)
std dev              286.3 μs   (144.4 μs .. 480.3 μs)

benchmarking getWord8 1MB/chunk size 16 bytes
time                 18.17 ms   (17.95 ms .. 18.42 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 18.23 ms   (18.14 ms .. 18.37 ms)
std dev              277.7 μs   (173.8 μs .. 404.8 μs)

benchmarking getWord8 1MB Applicative/chunk size 2 bytes
time                 34.78 ms   (33.89 ms .. 35.49 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 34.51 ms   (34.04 ms .. 35.04 ms)
std dev              1.090 ms   (741.2 μs .. 1.530 ms)

benchmarking getWord8 1MB Applicative/chunk size 4 bytes
time                 22.12 ms   (21.46 ms .. 22.82 ms)
                     0.995 R²   (0.989 R² .. 0.998 R²)
mean                 21.78 ms   (21.26 ms .. 22.22 ms)
std dev              1.076 ms   (797.0 μs .. 1.561 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking getWord8 1MB Applicative/chunk size 8 bytes
time                 12.60 ms   (12.31 ms .. 12.90 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 12.58 ms   (12.44 ms .. 12.70 ms)
std dev              354.3 μs   (283.1 μs .. 432.1 μs)
variance introduced by outliers: 10% (moderately inflated)

benchmarking getWord8 1MB Applicative/chunk size 16 bytes
time                 8.287 ms   (8.198 ms .. 8.374 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 8.277 ms   (8.185 ms .. 8.375 ms)
std dev              264.2 μs   (129.4 μs .. 435.0 μs)
variance introduced by outliers: 11% (moderately inflated)

benchmarking roll/foldr
time                 462.8 ms   (NaN s .. 464.9 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 463.0 ms   (462.7 ms .. 463.2 ms)
std dev              304.2 μs   (0.0 s .. 319.6 μs)
variance introduced by outliers: 19% (moderately inflated)

benchmarking roll/foldl'
time                 379.2 ms   (378.2 ms .. 379.8 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 378.6 ms   (378.4 ms .. 378.7 ms)
std dev              177.7 μs   (0.0 s .. 203.6 μs)
variance introduced by outliers: 19% (moderately inflated)

benchmarking Integer/decode
time                 385.0 ms   (384.3 ms .. 385.5 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 385.5 ms   (385.3 ms .. 385.7 ms)
std dev              305.7 μs   (0.0 s .. 313.4 μs)
variance introduced by outliers: 19% (moderately inflated)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7762.7MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.4MB/s
1000MB of bytes read    in 0.413s, at: 2423.1MB/s
1000MB of words written in 0.114s, at: 8743.1MB/s
1000MB of words read    in 0.068s, at: 14671.1MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.4MB/s
1000MB of bytes read    in 0.820s, at: 1220.0MB/s
1000MB of words written in 0.114s, at: 8789.1MB/s
1000MB of words read    in 0.107s, at: 9345.4MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.6 MB/s write,   87.2 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  468.1 MB/s write,  152.4 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  849.4 MB/s write,  326.7 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1415.6 MB/s write,  774.3 MB/s read,   0.5 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 0b7abd9f8e168382babc43e57621ea25daaa8c4e.log.tmp 0b7abd9f8e168382babc43e57621ea25daaa8c4e.log
