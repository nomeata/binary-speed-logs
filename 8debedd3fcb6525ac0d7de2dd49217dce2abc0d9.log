
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 8debedd3fcb6525ac0d7de2dd49217dce2abc0d9
Note: checking out '8debedd3fcb6525ac0d7de2dd49217dce2abc0d9'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 8debedd... Add Show instance for Fingerprint on GHC < 7.8.

Identifying

git log -n 1
commit 8debedd3fcb6525ac0d7de2dd49217dce2abc0d9
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Wed Jun 3 14:46:21 2015 -0700

    Add Show instance for Fingerprint on GHC < 7.8.
    
    'forAll' needs Fingerprint to have a Show instance.
    Starting from GHC 7.8 (base-4.7) Fingerprint has a Show instance, but
    for older versions we need to provide one ourselves.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1325       1028      43.7%        422       2775
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1325       1028      43.7%        422       2775

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.5.0...
cabal build
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.5.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
Preprocessing benchmark 'get' for binary-0.7.5.0...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.08 μs   (35.07 μs .. 35.09 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.09 μs   (35.08 μs .. 35.09 μs)
std dev              19.93 ns   (16.44 ns .. 25.50 ns)

benchmarking bounds/[Word8]
time                 42.68 μs   (42.68 μs .. 42.69 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.70 μs   (42.69 μs .. 42.72 μs)
std dev              35.31 ns   (18.26 ns .. 67.07 ns)

benchmarking small ByteString
time                 323.8 ns   (323.4 ns .. 324.3 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.9 ns   (324.1 ns .. 328.0 ns)
std dev              4.811 ns   (787.6 ps .. 10.11 ns)
variance introduced by outliers: 16% (moderately inflated)

benchmarking large ByteString
time                 323.3 ns   (323.2 ns .. 323.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.8 ns   (323.6 ns .. 323.9 ns)
std dev              532.5 ps   (450.2 ps .. 640.5 ps)

benchmarking length-prefixed ByteString
time                 6.720 μs   (6.719 μs .. 6.721 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.722 μs   (6.722 μs .. 6.723 μs)
std dev              2.757 ns   (2.227 ns .. 3.505 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.0 μs   (366.0 μs .. 366.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.0 μs   (366.0 μs .. 366.1 μs)
std dev              212.2 ns   (143.8 ns .. 315.0 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 225.8 μs   (224.4 μs .. 228.2 μs)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 224.5 μs   (224.2 μs .. 225.9 μs)
std dev              1.789 μs   (560.1 ns .. 3.965 μs)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.4 μs   (155.3 μs .. 155.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.3 μs   (155.2 μs .. 155.4 μs)
std dev              375.0 ns   (276.5 ns .. 518.9 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 96.79 μs   (96.75 μs .. 96.83 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 96.82 μs   (96.80 μs .. 96.85 μs)
std dev              88.41 ns   (74.33 ns .. 110.8 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.810 ms   (5.808 ms .. 5.813 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.817 ms   (5.815 ms .. 5.823 ms)
std dev              11.02 μs   (6.337 μs .. 18.86 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.179 ms   (6.176 ms .. 6.182 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.173 ms   (6.168 ms .. 6.176 ms)
std dev              12.01 μs   (9.110 μs .. 17.31 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.933 ms   (2.927 ms .. 2.939 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.925 ms   (2.919 ms .. 2.930 ms)
std dev              19.37 μs   (15.07 μs .. 26.19 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.897 ms   (2.884 ms .. 2.908 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.909 ms   (2.898 ms .. 2.919 ms)
std dev              34.11 μs   (26.94 μs .. 43.21 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.756 ms   (2.749 ms .. 2.763 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.756 ms   (2.752 ms .. 2.763 ms)
std dev              18.45 μs   (14.15 μs .. 26.10 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.512 ms   (7.508 ms .. 7.517 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.514 ms   (7.509 ms .. 7.518 ms)
std dev              11.94 μs   (8.306 μs .. 19.27 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.00 ms   (22.50 ms .. 23.56 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.48 ms   (23.13 ms .. 23.89 ms)
std dev              858.7 μs   (600.0 μs .. 1.360 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.43 ms   (35.78 ms .. 37.39 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 36.93 ms   (36.45 ms .. 37.76 ms)
std dev              1.228 ms   (696.0 μs .. 2.167 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.31 ms   (25.78 ms .. 26.88 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.44 ms   (26.06 ms .. 27.34 ms)
std dev              1.188 ms   (521.4 μs .. 2.122 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.959 ms   (1.959 ms .. 1.959 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.959 ms   (1.959 ms .. 1.959 ms)
std dev              858.8 ns   (687.2 ns .. 1.134 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.17 ms   (14.16 ms .. 14.17 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.16 ms   (14.15 ms .. 14.16 ms)
std dev              8.111 μs   (6.616 μs .. 10.62 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.335 ms   (2.332 ms .. 2.338 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.326 ms   (2.321 ms .. 2.329 ms)
std dev              12.32 μs   (9.234 μs .. 18.32 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.007 ms   (2.006 ms .. 2.008 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.007 ms   (2.006 ms .. 2.008 ms)
std dev              2.240 μs   (1.832 μs .. 2.761 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.968 ms   (5.965 ms .. 5.970 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.968 ms   (5.967 ms .. 5.969 ms)
std dev              4.040 μs   (3.226 μs .. 5.199 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.662 ms   (7.658 ms .. 7.667 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.664 ms   (7.662 ms .. 7.666 ms)
std dev              5.568 μs   (4.411 μs .. 7.272 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.95 ms   (12.95 ms .. 12.96 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.96 ms   (12.96 ms .. 12.97 ms)
std dev              18.89 μs   (7.805 μs .. 35.43 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 975.3 μs   (974.8 μs .. 975.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 975.6 μs   (975.2 μs .. 976.0 μs)
std dev              1.380 μs   (1.125 μs .. 1.810 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 601.4 μs   (601.3 μs .. 601.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 601.5 μs   (601.4 μs .. 601.7 μs)
std dev              527.7 ns   (404.4 ns .. 694.5 ns)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 502.9 μs   (502.9 μs .. 503.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 503.0 μs   (502.9 μs .. 503.1 μs)
std dev              185.1 ns   (134.8 ns .. 269.9 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.1 μs   (554.1 μs .. 554.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.1 μs   (554.1 μs .. 554.2 μs)
std dev              174.3 ns   (119.3 ns .. 255.3 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.133s, at: 7524.7MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.0MB/s
1000MB of bytes read    in 0.413s, at: 2423.0MB/s
1000MB of words written in 0.114s, at: 8792.4MB/s
1000MB of words read    in 0.068s, at: 14662.3MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.6MB/s
1000MB of bytes read    in 0.820s, at: 1219.9MB/s
1000MB of words written in 0.113s, at: 8844.3MB/s
1000MB of words read    in 0.107s, at: 9338.2MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  258.6 MB/s write,   87.6 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  462.3 MB/s write,  151.9 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  843.1 MB/s write,  325.5 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1401.2 MB/s write,  839.8 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 8debedd3fcb6525ac0d7de2dd49217dce2abc0d9.log.tmp 8debedd3fcb6525ac0d7de2dd49217dce2abc0d9.log
