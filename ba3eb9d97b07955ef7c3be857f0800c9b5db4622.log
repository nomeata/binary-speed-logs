
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout ba3eb9d97b07955ef7c3be857f0800c9b5db4622
Note: checking out 'ba3eb9d97b07955ef7c3be857f0800c9b5db4622'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at ba3eb9d... Merge pull request #70 from ttuegel/total-char

Identifying

git log -n 1
commit ba3eb9d97b07955ef7c3be857f0800c9b5db4622
Merge: ff9a48f 62c41d7
Author: Lennart Kolmodin <kolmodin@gmail.com>
Date:   Mon Feb 23 12:31:39 2015 +0100

    Merge pull request #70 from ttuegel/total-char
    
    Make get :: Get Char total
    
    Fail within the Get monad for some UTF-8 errors

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1311       1027      43.9%        410       2748
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1311       1027      43.9%        410       2748

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.3.0...
cabal build
Building binary-0.7.3.0...
Preprocessing library binary-0.7.3.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.3.0...
Preprocessing benchmark 'builder' for binary-0.7.3.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.3.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.3.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.3.0...
Preprocessing library binary-0.7.3.0...
In-place registering binary-0.7.3.0...
Preprocessing benchmark 'builder' for binary-0.7.3.0...
Preprocessing benchmark 'get' for binary-0.7.3.0...
Preprocessing benchmark 'bench' for binary-0.7.3.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.08 μs   (35.07 μs .. 35.09 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.11 μs   (35.10 μs .. 35.13 μs)
std dev              51.35 ns   (29.93 ns .. 79.97 ns)

benchmarking bounds/[Word8]
time                 42.83 μs   (42.78 μs .. 42.86 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.78 μs   (42.75 μs .. 42.81 μs)
std dev              87.34 ns   (66.77 ns .. 116.9 ns)

benchmarking small ByteString
time                 327.5 ns   (327.3 ns .. 327.8 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 326.7 ns   (326.3 ns .. 327.1 ns)
std dev              1.269 ns   (1.119 ns .. 1.441 ns)

benchmarking large ByteString
time                 322.9 ns   (322.7 ns .. 323.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.0 ns   (322.7 ns .. 323.3 ns)
std dev              891.4 ps   (629.1 ps .. 1.297 ns)

benchmarking length-prefixed ByteString
time                 6.710 μs   (6.706 μs .. 6.713 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.707 μs   (6.706 μs .. 6.709 μs)
std dev              4.683 ns   (3.568 ns .. 6.084 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.0 μs   (365.8 μs .. 366.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.1 μs   (366.0 μs .. 366.1 μs)
std dev              166.2 ns   (132.4 ns .. 206.8 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.3 μs   (224.1 μs .. 224.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.3 μs   (224.2 μs .. 224.4 μs)
std dev              314.7 ns   (218.5 ns .. 434.0 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.1 μs   (154.9 μs .. 155.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.7 μs   (154.5 μs .. 154.8 μs)
std dev              457.8 ns   (307.7 ns .. 647.1 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 96.95 μs   (96.91 μs .. 96.98 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 96.96 μs   (96.94 μs .. 96.99 μs)
std dev              80.95 ns   (65.17 ns .. 105.3 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 6.037 ms   (6.033 ms .. 6.042 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.047 ms   (6.044 ms .. 6.051 ms)
std dev              11.29 μs   (9.052 μs .. 14.86 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.266 ms   (6.258 ms .. 6.272 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.258 ms   (6.255 ms .. 6.262 ms)
std dev              10.54 μs   (8.642 μs .. 13.54 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.668 ms   (2.666 ms .. 2.672 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.667 ms   (2.665 ms .. 2.668 ms)
std dev              4.637 μs   (3.634 μs .. 6.043 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.744 ms   (2.743 ms .. 2.746 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.746 ms   (2.745 ms .. 2.749 ms)
std dev              7.098 μs   (5.152 μs .. 10.13 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.668 ms   (2.665 ms .. 2.671 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.665 ms   (2.664 ms .. 2.667 ms)
std dev              5.340 μs   (4.391 μs .. 6.497 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.899 ms   (7.895 ms .. 7.903 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.898 ms   (7.893 ms .. 7.901 ms)
std dev              11.20 μs   (8.121 μs .. 17.46 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 24.23 ms   (23.69 ms .. 24.76 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 24.32 ms   (23.91 ms .. 24.69 ms)
std dev              839.4 μs   (618.3 μs .. 1.199 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.83 ms   (35.68 ms .. 37.81 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 37.05 ms   (36.48 ms .. 37.88 ms)
std dev              1.336 ms   (807.1 μs .. 2.241 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.79 ms   (26.27 ms .. 27.21 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 26.89 ms   (26.52 ms .. 27.72 ms)
std dev              1.161 ms   (548.0 μs .. 2.104 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.893 ms   (1.891 ms .. 1.894 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.896 ms   (1.893 ms .. 1.911 ms)
std dev              19.25 μs   (796.3 ns .. 44.20 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.08 ms   (14.07 ms .. 14.08 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.08 ms   (14.08 ms .. 14.08 ms)
std dev              5.659 μs   (3.618 μs .. 9.369 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.222 ms   (2.218 ms .. 2.226 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.216 ms   (2.212 ms .. 2.220 ms)
std dev              13.80 μs   (11.34 μs .. 16.93 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.899 ms   (1.897 ms .. 1.902 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.901 ms   (1.899 ms .. 1.902 ms)
std dev              5.943 μs   (4.383 μs .. 8.588 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.811 ms   (5.810 ms .. 5.813 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.811 ms   (5.809 ms .. 5.812 ms)
std dev              3.989 μs   (3.150 μs .. 5.188 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.524 ms   (7.521 ms .. 7.528 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.523 ms   (7.522 ms .. 7.525 ms)
std dev              3.995 μs   (3.003 μs .. 5.415 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 10.73 ms   (10.72 ms .. 10.73 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 10.74 ms   (10.74 ms .. 10.74 ms)
std dev              8.605 μs   (6.118 μs .. 12.75 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 955.3 μs   (954.7 μs .. 955.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 956.0 μs   (955.6 μs .. 956.5 μs)
std dev              1.567 μs   (1.297 μs .. 1.984 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 544.5 μs   (543.2 μs .. 545.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 544.9 μs   (544.2 μs .. 545.6 μs)
std dev              2.412 μs   (2.057 μs .. 2.845 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 441.3 μs   (441.1 μs .. 441.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 441.4 μs   (441.3 μs .. 441.5 μs)
std dev              397.0 ns   (324.7 ns .. 500.6 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 491.3 μs   (491.2 μs .. 491.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 491.2 μs   (491.2 μs .. 491.3 μs)
std dev              156.5 ns   (121.5 ns .. 204.7 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.131s, at: 7618.9MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.7MB/s
1000MB of bytes read    in 0.413s, at: 2423.6MB/s
1000MB of words written in 0.114s, at: 8777.5MB/s
1000MB of words read    in 0.069s, at: 14544.8MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.830s, at: 1204.5MB/s
1000MB of words written in 0.113s, at: 8832.1MB/s
1000MB of words read    in 0.107s, at: 9345.2MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  261.2 MB/s write,   91.7 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  519.4 MB/s write,  161.8 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  929.9 MB/s write,  339.5 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1613.7 MB/s write,  927.9 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv ba3eb9d97b07955ef7c3be857f0800c9b5db4622.log.tmp ba3eb9d97b07955ef7c3be857f0800c9b5db4622.log
