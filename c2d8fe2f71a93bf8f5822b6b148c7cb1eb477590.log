
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout c2d8fe2f71a93bf8f5822b6b148c7cb1eb477590
Note: checking out 'c2d8fe2f71a93bf8f5822b6b148c7cb1eb477590'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at c2d8fe2... Fix compilation error on GHC < 7.10.

Identifying

git log -n 1
commit c2d8fe2f71a93bf8f5822b6b148c7cb1eb477590
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sat May 30 11:58:48 2015 +0200

    Fix compilation error on GHC < 7.10.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1026      44.0%        418       2751
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1026      44.0%        418       2751

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:421:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:421:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:421:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.05 μs   (35.03 μs .. 35.06 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.05 μs   (35.04 μs .. 35.06 μs)
std dev              20.44 ns   (11.80 ns .. 32.47 ns)

benchmarking bounds/[Word8]
time                 42.68 μs   (42.68 μs .. 42.69 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.69 μs   (42.69 μs .. 42.70 μs)
std dev              16.25 ns   (11.04 ns .. 26.39 ns)

benchmarking small ByteString
time                 323.2 ns   (323.0 ns .. 323.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.6 ns   (323.3 ns .. 323.8 ns)
std dev              754.5 ps   (667.2 ps .. 849.7 ps)

benchmarking large ByteString
time                 326.6 ns   (326.4 ns .. 326.8 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 326.8 ns   (326.7 ns .. 326.9 ns)
std dev              470.1 ps   (389.0 ps .. 589.9 ps)

benchmarking length-prefixed ByteString
time                 6.712 μs   (6.705 μs .. 6.718 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.702 μs   (6.700 μs .. 6.706 μs)
std dev              9.688 ns   (6.422 ns .. 13.82 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 367.3 μs   (367.1 μs .. 367.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 367.6 μs   (367.3 μs .. 367.9 μs)
std dev              837.8 ns   (619.6 ns .. 1.344 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.8 μs   (224.4 μs .. 225.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.5 μs   (224.3 μs .. 224.7 μs)
std dev              678.2 ns   (586.2 ns .. 826.8 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 153.9 μs   (153.8 μs .. 153.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.0 μs   (153.9 μs .. 154.0 μs)
std dev              112.4 ns   (92.26 ns .. 149.1 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 98.09 μs   (97.84 μs .. 98.32 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 98.09 μs   (98.00 μs .. 98.16 μs)
std dev              275.3 ns   (203.2 ns .. 380.6 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.757 ms   (5.752 ms .. 5.760 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.779 ms   (5.773 ms .. 5.788 ms)
std dev              23.32 μs   (17.45 μs .. 29.12 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.143 ms   (6.139 ms .. 6.147 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.135 ms   (6.130 ms .. 6.138 ms)
std dev              11.48 μs   (9.419 μs .. 14.28 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.810 ms   (2.808 ms .. 2.811 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.809 ms   (2.808 ms .. 2.811 ms)
std dev              4.967 μs   (3.728 μs .. 7.169 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.864 ms   (2.862 ms .. 2.866 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.868 ms   (2.866 ms .. 2.870 ms)
std dev              6.560 μs   (4.804 μs .. 9.954 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.799 ms   (2.797 ms .. 2.800 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.798 ms   (2.797 ms .. 2.800 ms)
std dev              4.999 μs   (3.716 μs .. 7.121 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.362 ms   (7.358 ms .. 7.367 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.364 ms   (7.359 ms .. 7.367 ms)
std dev              12.09 μs   (7.878 μs .. 20.91 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.78 ms   (23.24 ms .. 24.45 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 24.09 ms   (23.73 ms .. 24.49 ms)
std dev              860.8 μs   (536.0 μs .. 1.329 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 37.28 ms   (36.27 ms .. 38.29 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 37.42 ms   (36.84 ms .. 38.17 ms)
std dev              1.322 ms   (756.4 μs .. 2.221 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.98 ms   (26.47 ms .. 27.57 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 27.08 ms   (26.72 ms .. 28.05 ms)
std dev              1.222 ms   (540.2 μs .. 2.268 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 2.004 ms   (1.998 ms .. 2.010 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.003 ms   (1.996 ms .. 2.009 ms)
std dev              22.63 μs   (17.94 μs .. 28.67 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.24 ms   (14.24 ms .. 14.25 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.23 ms   (14.23 ms .. 14.24 ms)
std dev              7.474 μs   (4.920 μs .. 11.88 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.168 ms   (2.165 ms .. 2.171 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.162 ms   (2.158 ms .. 2.164 ms)
std dev              8.932 μs   (6.243 μs .. 14.01 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.989 ms   (1.988 ms .. 1.990 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.989 ms   (1.988 ms .. 1.989 ms)
std dev              2.331 μs   (1.826 μs .. 2.916 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.916 ms   (5.912 ms .. 5.920 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.917 ms   (5.915 ms .. 5.919 ms)
std dev              5.917 μs   (4.555 μs .. 8.771 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.699 ms   (7.696 ms .. 7.703 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.698 ms   (7.695 ms .. 7.701 ms)
std dev              7.228 μs   (5.325 μs .. 10.13 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 13.81 ms   (13.80 ms .. 13.82 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.82 ms   (13.82 ms .. 13.85 ms)
std dev              33.47 μs   (7.049 μs .. 66.97 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.020 ms   (1.003 ms .. 1.043 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 1.013 ms   (1.005 ms .. 1.023 ms)
std dev              29.17 μs   (24.81 μs .. 33.12 μs)
variance introduced by outliers: 18% (moderately inflated)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 616.5 μs   (615.4 μs .. 617.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 617.2 μs   (616.1 μs .. 618.5 μs)
std dev              4.220 μs   (3.134 μs .. 5.873 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 522.8 μs   (521.1 μs .. 524.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 522.6 μs   (521.6 μs .. 523.6 μs)
std dev              3.354 μs   (2.635 μs .. 4.624 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.6 μs   (554.4 μs .. 554.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.6 μs   (554.5 μs .. 554.7 μs)
std dev              323.0 ns   (279.0 ns .. 379.3 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7769.6MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.2MB/s
1000MB of bytes read    in 0.413s, at: 2423.3MB/s
1000MB of words written in 0.114s, at: 8775.1MB/s
1000MB of words read    in 0.068s, at: 14617.7MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.830s, at: 1204.6MB/s
1000MB of words written in 0.113s, at: 8827.8MB/s
1000MB of words read    in 0.107s, at: 9334.2MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.1 MB/s write,   83.3 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  466.6 MB/s write,  159.1 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  838.5 MB/s write,  409.6 MB/s read,   0.5 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1403.6 MB/s write,  830.6 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv c2d8fe2f71a93bf8f5822b6b148c7cb1eb477590.log.tmp c2d8fe2f71a93bf8f5822b6b148c7cb1eb477590.log
