
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout c2d8fe2f71a93bf8f5822b6b148c7cb1eb477590
Note: checking out 'c2d8fe2f71a93bf8f5822b6b148c7cb1eb477590'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at c2d8fe2... Fix compilation error on GHC < 7.10.

Identifying

git log -n 1
commit c2d8fe2f71a93bf8f5822b6b148c7cb1eb477590
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sat May 30 11:58:48 2015 +0200

    Fix compilation error on GHC < 7.10.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1026      44.0%        418       2751
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1026      44.0%        418       2751

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:421:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:421:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:421:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.72 μs   (34.71 μs .. 34.73 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.75 μs   (34.74 μs .. 34.79 μs)
std dev              59.88 ns   (17.73 ns .. 121.9 ns)

benchmarking bounds/[Word8]
time                 42.54 μs   (42.52 μs .. 42.55 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.53 μs   (42.53 μs .. 42.54 μs)
std dev              26.76 ns   (21.02 ns .. 34.29 ns)

benchmarking small ByteString
time                 240.7 ns   (240.5 ns .. 241.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 240.9 ns   (240.7 ns .. 241.1 ns)
std dev              586.6 ps   (492.1 ps .. 751.7 ps)

benchmarking large ByteString
time                 238.9 ns   (238.7 ns .. 239.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 239.0 ns   (238.9 ns .. 239.1 ns)
std dev              490.4 ps   (382.8 ps .. 693.9 ps)

benchmarking length-prefixed ByteString
time                 6.797 μs   (6.794 μs .. 6.804 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.796 μs   (6.792 μs .. 6.808 μs)
std dev              19.40 ns   (3.211 ns .. 43.90 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 363.7 μs   (363.4 μs .. 364.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 364.4 μs   (363.8 μs .. 366.7 μs)
std dev              3.666 μs   (454.1 ns .. 7.743 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 221.7 μs   (220.9 μs .. 223.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 221.7 μs   (221.5 μs .. 222.4 μs)
std dev              1.111 μs   (343.6 ns .. 2.303 μs)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 151.6 μs   (151.3 μs .. 151.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 150.7 μs   (150.5 μs .. 151.1 μs)
std dev              914.7 ns   (656.5 ns .. 1.426 μs)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 93.33 μs   (93.19 μs .. 93.44 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 93.24 μs   (93.17 μs .. 93.30 μs)
std dev              221.2 ns   (187.0 ns .. 259.9 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.918 ms   (5.916 ms .. 5.920 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.925 ms   (5.923 ms .. 5.929 ms)
std dev              8.915 μs   (5.989 μs .. 12.68 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.269 ms   (6.266 ms .. 6.273 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.257 ms   (6.252 ms .. 6.261 ms)
std dev              12.95 μs   (9.826 μs .. 16.85 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.680 ms   (2.679 ms .. 2.681 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.679 ms   (2.678 ms .. 2.680 ms)
std dev              3.731 μs   (2.890 μs .. 5.082 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.749 ms   (2.747 ms .. 2.751 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.752 ms   (2.750 ms .. 2.755 ms)
std dev              8.456 μs   (5.212 μs .. 14.26 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.677 ms   (2.676 ms .. 2.678 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.678 ms   (2.677 ms .. 2.679 ms)
std dev              3.546 μs   (2.896 μs .. 4.405 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.510 ms   (7.507 ms .. 7.514 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.511 ms   (7.507 ms .. 7.515 ms)
std dev              11.85 μs   (7.575 μs .. 19.07 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.41 ms   (22.95 ms .. 23.87 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 23.85 ms   (23.46 ms .. 24.35 ms)
std dev              976.7 μs   (621.3 μs .. 1.374 ms)
variance introduced by outliers: 14% (moderately inflated)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.56 ms   (35.55 ms .. 37.58 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 36.72 ms   (36.25 ms .. 37.51 ms)
std dev              1.250 ms   (701.3 μs .. 2.006 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.51 ms   (26.05 ms .. 26.97 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.59 ms   (26.21 ms .. 27.56 ms)
std dev              1.233 ms   (440.2 μs .. 2.298 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.954 ms   (1.952 ms .. 1.957 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.955 ms   (1.953 ms .. 1.957 ms)
std dev              5.786 μs   (4.061 μs .. 7.961 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.04 ms   (14.04 ms .. 14.04 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.03 ms   (14.03 ms .. 14.04 ms)
std dev              7.513 μs   (4.303 μs .. 11.30 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.154 ms   (2.148 ms .. 2.159 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.151 ms   (2.146 ms .. 2.154 ms)
std dev              13.98 μs   (11.18 μs .. 18.75 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.049 ms   (2.047 ms .. 2.050 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.055 ms   (2.053 ms .. 2.066 ms)
std dev              14.53 μs   (2.848 μs .. 32.85 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.792 ms   (5.774 ms .. 5.829 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.779 ms   (5.774 ms .. 5.795 ms)
std dev              25.35 μs   (4.044 μs .. 52.64 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.528 ms   (7.507 ms .. 7.578 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 7.519 ms   (7.508 ms .. 7.572 ms)
std dev              57.28 μs   (6.879 μs .. 126.4 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 14.12 ms   (14.11 ms .. 14.12 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.12 ms   (14.11 ms .. 14.13 ms)
std dev              18.70 μs   (4.977 μs .. 37.47 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.118 ms   (1.118 ms .. 1.119 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.118 ms   (1.117 ms .. 1.118 ms)
std dev              1.598 μs   (1.216 μs .. 2.161 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 647.5 μs   (647.4 μs .. 647.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 647.3 μs   (647.2 μs .. 647.4 μs)
std dev              259.2 ns   (209.0 ns .. 323.3 ns)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 521.2 μs   (521.1 μs .. 521.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 521.1 μs   (521.0 μs .. 521.1 μs)
std dev              225.5 ns   (179.5 ns .. 301.7 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 557.2 μs   (557.1 μs .. 557.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 557.0 μs   (556.9 μs .. 557.2 μs)
std dev              426.9 ns   (248.0 ns .. 804.1 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.288s, at: 3472.0MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.300s, at: 3333.1MB/s
1000MB of bytes read    in 0.412s, at: 2427.0MB/s
1000MB of words written in 0.116s, at: 8620.1MB/s
1000MB of words read    in 0.072s, at: 13888.1MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.812s, at: 1231.4MB/s
1000MB of bytes read    in 0.832s, at: 1201.8MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.108s, at: 9258.7MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  242.7 MB/s write,   85.3 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  471.7 MB/s write,  162.3 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  862.0 MB/s write,  416.6 MB/s read,   0.5 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1388.8 MB/s write,  862.0 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv c2d8fe2f71a93bf8f5822b6b148c7cb1eb477590.log.tmp c2d8fe2f71a93bf8f5822b6b148c7cb1eb477590.log
