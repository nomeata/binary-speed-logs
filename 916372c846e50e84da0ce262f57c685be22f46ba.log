
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 916372c846e50e84da0ce262f57c685be22f46ba
Note: checking out '916372c846e50e84da0ce262f57c685be22f46ba'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 916372c... Increase test coverage for Binary Natural instance.

Identifying

git log -n 1
commit 916372c846e50e84da0ce262f57c685be22f46ba
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sun May 31 16:41:04 2015 +0200

    Increase test coverage for Binary Natural instance.
    
    The arbitrarySizedNatural creates too small Naturals so we didn't test
    all code paths. Use a custom generator to get bigger numbers.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1309       1026      43.9%        418       2753
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1309       1026      43.9%        418       2753

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.13 μs   (35.06 μs .. 35.27 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.12 μs   (35.10 μs .. 35.21 μs)
std dev              113.4 ns   (29.62 ns .. 250.5 ns)

benchmarking bounds/[Word8]
time                 42.73 μs   (42.71 μs .. 42.78 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.78 μs   (42.75 μs .. 42.94 μs)
std dev              218.0 ns   (68.66 ns .. 469.7 ns)

benchmarking small ByteString
time                 321.9 ns   (321.8 ns .. 322.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 322.2 ns   (322.0 ns .. 322.3 ns)
std dev              584.5 ps   (471.5 ps .. 786.1 ps)

benchmarking large ByteString
time                 325.7 ns   (325.5 ns .. 326.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.6 ns   (325.4 ns .. 325.7 ns)
std dev              553.3 ps   (467.3 ps .. 716.0 ps)

benchmarking length-prefixed ByteString
time                 6.707 μs   (6.706 μs .. 6.708 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.705 μs   (6.704 μs .. 6.706 μs)
std dev              3.371 ns   (2.781 ns .. 4.807 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.0 μs   (365.9 μs .. 366.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.0 μs   (365.9 μs .. 366.1 μs)
std dev              201.9 ns   (140.4 ns .. 361.6 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.0 μs   (224.0 μs .. 224.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.0 μs   (223.9 μs .. 224.0 μs)
std dev              162.1 ns   (104.1 ns .. 287.2 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.2 μs   (155.0 μs .. 155.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.2 μs   (155.1 μs .. 155.3 μs)
std dev              240.6 ns   (144.3 ns .. 335.0 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.21 μs   (96.89 μs .. 97.49 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 96.94 μs   (96.86 μs .. 97.07 μs)
std dev              324.8 ns   (200.9 ns .. 445.0 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.959 ms   (5.950 ms .. 5.965 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.973 ms   (5.966 ms .. 6.000 ms)
std dev              38.89 μs   (9.123 μs .. 79.53 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.332 ms   (6.327 ms .. 6.336 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.325 ms   (6.321 ms .. 6.329 ms)
std dev              12.53 μs   (9.710 μs .. 16.07 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.748 ms   (2.747 ms .. 2.749 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.748 ms   (2.746 ms .. 2.749 ms)
std dev              4.894 μs   (3.659 μs .. 7.085 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.848 ms   (2.845 ms .. 2.850 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.843 ms   (2.840 ms .. 2.845 ms)
std dev              8.521 μs   (6.415 μs .. 12.07 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.743 ms   (2.742 ms .. 2.745 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.742 ms   (2.741 ms .. 2.744 ms)
std dev              4.475 μs   (3.285 μs .. 6.629 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.491 ms   (7.484 ms .. 7.498 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.508 ms   (7.501 ms .. 7.517 ms)
std dev              22.99 μs   (16.43 μs .. 30.74 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.37 ms   (22.95 ms .. 23.81 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 23.74 ms   (23.39 ms .. 24.10 ms)
std dev              824.5 μs   (519.4 μs .. 1.237 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.74 ms   (36.02 ms .. 37.74 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 37.24 ms   (36.71 ms .. 38.03 ms)
std dev              1.237 ms   (707.7 μs .. 2.004 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.57 ms   (26.06 ms .. 27.17 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.70 ms   (26.31 ms .. 27.53 ms)
std dev              1.191 ms   (537.2 μs .. 2.134 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.961 ms   (1.960 ms .. 1.962 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.961 ms   (1.960 ms .. 1.962 ms)
std dev              2.175 μs   (1.002 μs .. 4.438 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.22 ms   (14.22 ms .. 14.22 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.21 ms   (14.21 ms .. 14.22 ms)
std dev              4.012 μs   (3.040 μs .. 5.312 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.348 ms   (2.344 ms .. 2.351 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.338 ms   (2.333 ms .. 2.342 ms)
std dev              14.62 μs   (11.09 μs .. 20.45 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.013 ms   (2.011 ms .. 2.014 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.012 ms   (2.011 ms .. 2.012 ms)
std dev              2.292 μs   (1.878 μs .. 2.847 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.980 ms   (5.977 ms .. 5.983 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.981 ms   (5.980 ms .. 5.983 ms)
std dev              4.570 μs   (3.718 μs .. 5.949 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.688 ms   (7.680 ms .. 7.695 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.689 ms   (7.686 ms .. 7.693 ms)
std dev              10.98 μs   (9.114 μs .. 13.72 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.90 ms   (12.89 ms .. 12.91 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.90 ms   (12.90 ms .. 12.92 ms)
std dev              27.70 μs   (9.173 μs .. 54.57 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 976.0 μs   (975.4 μs .. 976.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 975.9 μs   (975.6 μs .. 976.3 μs)
std dev              1.243 μs   (989.7 ns .. 1.631 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 603.4 μs   (602.0 μs .. 606.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 602.6 μs   (602.2 μs .. 604.2 μs)
std dev              2.393 μs   (555.9 ns .. 5.292 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 504.2 μs   (504.1 μs .. 504.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 504.1 μs   (504.0 μs .. 504.3 μs)
std dev              434.0 ns   (343.6 ns .. 572.5 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.6 μs   (554.5 μs .. 554.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.6 μs   (554.5 μs .. 554.6 μs)
std dev              161.3 ns   (130.7 ns .. 213.1 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7776.0MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.5MB/s
1000MB of bytes read    in 0.413s, at: 2423.1MB/s
1000MB of words written in 0.114s, at: 8773.2MB/s
1000MB of words read    in 0.068s, at: 14704.8MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.820s, at: 1220.0MB/s
1000MB of words written in 0.113s, at: 8830.8MB/s
1000MB of words read    in 0.107s, at: 9346.0MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  261.3 MB/s write,   87.6 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  466.3 MB/s write,  153.0 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  842.6 MB/s write,  305.4 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1401.8 MB/s write,  847.2 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 916372c846e50e84da0ce262f57c685be22f46ba.log.tmp 916372c846e50e84da0ce262f57c685be22f46ba.log
