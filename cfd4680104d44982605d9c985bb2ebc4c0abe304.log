
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout cfd4680104d44982605d9c985bb2ebc4c0abe304
Note: checking out 'cfd4680104d44982605d9c985bb2ebc4c0abe304'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at cfd4680... Bump version to 0.7.6.1.

Identifying

git log -n 1
commit cfd4680104d44982605d9c985bb2ebc4c0abe304
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Wed Jul 29 19:36:28 2015 +0200

    Bump version to 0.7.6.1.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1029      43.6%        421       2780
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1029      43.6%        421       2780

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.00 μs   (34.99 μs .. 35.01 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.01 μs   (35.01 μs .. 35.02 μs)
std dev              18.31 ns   (14.39 ns .. 24.36 ns)

benchmarking bounds/[Word8]
time                 42.73 μs   (42.72 μs .. 42.74 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.72 μs   (42.71 μs .. 42.72 μs)
std dev              20.64 ns   (17.24 ns .. 25.98 ns)

benchmarking small ByteString
time                 327.6 ns   (327.2 ns .. 328.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 327.6 ns   (327.4 ns .. 327.8 ns)
std dev              728.4 ps   (658.1 ps .. 828.0 ps)

benchmarking large ByteString
time                 332.2 ns   (332.1 ns .. 332.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 333.0 ns   (332.7 ns .. 333.3 ns)
std dev              921.1 ps   (839.9 ps .. 1.041 ns)

benchmarking length-prefixed ByteString
time                 6.710 μs   (6.709 μs .. 6.711 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.711 μs   (6.710 μs .. 6.712 μs)
std dev              2.895 ns   (2.445 ns .. 3.435 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.1 μs   (365.6 μs .. 366.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 365.0 μs   (364.7 μs .. 365.2 μs)
std dev              835.2 ns   (658.7 ns .. 966.4 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.2 μs   (224.1 μs .. 224.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.1 μs   (224.1 μs .. 224.1 μs)
std dev              86.88 ns   (73.74 ns .. 106.2 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.3 μs   (154.2 μs .. 154.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.4 μs   (154.4 μs .. 154.4 μs)
std dev              139.2 ns   (110.3 ns .. 172.2 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 98.45 μs   (98.31 μs .. 98.53 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 98.02 μs   (97.84 μs .. 98.17 μs)
std dev              562.9 ns   (520.0 ns .. 616.1 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.801 ms   (5.792 ms .. 5.807 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.816 ms   (5.808 ms .. 5.848 ms)
std dev              41.49 μs   (7.629 μs .. 86.26 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.167 ms   (6.164 ms .. 6.171 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.162 ms   (6.157 ms .. 6.165 ms)
std dev              11.66 μs   (8.823 μs .. 15.89 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.943 ms   (2.939 ms .. 2.948 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.945 ms   (2.940 ms .. 2.950 ms)
std dev              15.29 μs   (12.54 μs .. 18.80 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.896 ms   (2.881 ms .. 2.912 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.893 ms   (2.885 ms .. 2.903 ms)
std dev              29.85 μs   (23.78 μs .. 42.11 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.729 ms   (2.726 ms .. 2.733 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.731 ms   (2.728 ms .. 2.736 ms)
std dev              13.81 μs   (9.814 μs .. 21.48 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.514 ms   (7.510 ms .. 7.518 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.516 ms   (7.512 ms .. 7.520 ms)
std dev              11.90 μs   (8.567 μs .. 17.97 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.29 ms   (22.82 ms .. 23.73 ms)
                     0.999 R²   (0.997 R² .. 0.999 R²)
mean                 23.64 ms   (23.29 ms .. 24.01 ms)
std dev              817.3 μs   (506.5 μs .. 1.366 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.66 ms   (35.96 ms .. 37.56 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 37.10 ms   (36.58 ms .. 37.91 ms)
std dev              1.215 ms   (668.1 μs .. 1.965 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.96 ms   (26.49 ms .. 27.50 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 27.01 ms   (26.53 ms .. 28.35 ms)
std dev              1.556 ms   (525.8 μs .. 2.939 ms)
variance introduced by outliers: 21% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.958 ms   (1.958 ms .. 1.959 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.958 ms   (1.958 ms .. 1.958 ms)
std dev              604.6 ns   (505.1 ns .. 740.9 ns)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.22 ms   (14.22 ms .. 14.23 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.22 ms   (14.22 ms .. 14.23 ms)
std dev              6.067 μs   (4.147 μs .. 8.994 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.328 ms   (2.322 ms .. 2.333 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.315 ms   (2.310 ms .. 2.319 ms)
std dev              15.46 μs   (12.55 μs .. 19.26 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.008 ms   (2.008 ms .. 2.009 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.008 ms   (2.008 ms .. 2.009 ms)
std dev              2.145 μs   (1.544 μs .. 3.469 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.987 ms   (5.983 ms .. 5.990 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.987 ms   (5.985 ms .. 5.989 ms)
std dev              5.404 μs   (3.997 μs .. 7.910 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.695 ms   (7.687 ms .. 7.702 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.696 ms   (7.692 ms .. 7.700 ms)
std dev              11.72 μs   (9.117 μs .. 16.75 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.96 ms   (12.95 ms .. 12.96 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.96 ms   (12.96 ms .. 12.98 ms)
std dev              17.44 μs   (5.561 μs .. 33.28 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 976.0 μs   (975.6 μs .. 976.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 976.3 μs   (975.8 μs .. 976.8 μs)
std dev              1.558 μs   (1.301 μs .. 1.967 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 600.9 μs   (600.7 μs .. 601.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 600.7 μs   (600.6 μs .. 600.8 μs)
std dev              426.6 ns   (331.9 ns .. 609.8 ns)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 503.3 μs   (503.2 μs .. 503.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 503.2 μs   (503.2 μs .. 503.3 μs)
std dev              296.8 ns   (213.4 ns .. 507.9 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.2 μs   (554.2 μs .. 554.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.3 μs   (554.2 μs .. 554.3 μs)
std dev              135.2 ns   (106.2 ns .. 174.6 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.132s, at: 7560.5MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.300s, at: 3330.8MB/s
1000MB of bytes read    in 0.413s, at: 2423.4MB/s
1000MB of words written in 0.114s, at: 8803.9MB/s
1000MB of words read    in 0.068s, at: 14737.7MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.7MB/s
1000MB of bytes read    in 0.819s, at: 1220.3MB/s
1000MB of words written in 0.113s, at: 8839.2MB/s
1000MB of words read    in 0.107s, at: 9347.1MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.4 MB/s write,   87.9 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  464.2 MB/s write,  152.5 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  845.3 MB/s write,  326.6 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1410.6 MB/s write,  844.1 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv cfd4680104d44982605d9c985bb2ebc4c0abe304.log.tmp cfd4680104d44982605d9c985bb2ebc4c0abe304.log
