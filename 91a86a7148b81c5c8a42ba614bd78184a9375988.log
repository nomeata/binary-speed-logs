
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 91a86a7148b81c5c8a42ba614bd78184a9375988
Note: checking out '91a86a7148b81c5c8a42ba614bd78184a9375988'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 91a86a7... Merge pull request #66 from JPMoresmau/master

Identifying

git log -n 1
commit 91a86a7148b81c5c8a42ba614bd78184a9375988
Merge: 8893118 039918f
Author: Lennart Kolmodin <kolmodin@gmail.com>
Date:   Sat Jan 17 19:59:35 2015 +0300

    Merge pull request #66 from JPMoresmau/master
    
    Fix doc: Int64 are written as 8 bytes, not 4

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1027      44.0%        410       2744
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1027      44.0%        410       2744

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.2.3...
cabal build
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.2.3...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
Preprocessing benchmark 'get' for binary-0.7.2.3...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.05 μs   (35.04 μs .. 35.06 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.07 μs   (35.06 μs .. 35.08 μs)
std dev              39.88 ns   (25.68 ns .. 65.25 ns)

benchmarking bounds/[Word8]
time                 42.73 μs   (42.71 μs .. 42.74 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.72 μs   (42.71 μs .. 42.73 μs)
std dev              33.03 ns   (24.06 ns .. 54.42 ns)

benchmarking small ByteString
time                 321.5 ns   (321.3 ns .. 321.8 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 321.9 ns   (321.7 ns .. 322.2 ns)
std dev              815.5 ps   (699.7 ps .. 975.6 ps)

benchmarking large ByteString
time                 323.5 ns   (323.4 ns .. 323.6 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.3 ns   (323.1 ns .. 323.4 ns)
std dev              492.5 ps   (425.2 ps .. 583.5 ps)

benchmarking length-prefixed ByteString
time                 6.727 μs   (6.725 μs .. 6.729 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.726 μs   (6.725 μs .. 6.729 μs)
std dev              6.058 ns   (3.455 ns .. 10.81 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.1 μs   (365.9 μs .. 366.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.0 μs   (366.0 μs .. 366.2 μs)
std dev              256.7 ns   (158.6 ns .. 419.8 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 225.0 μs   (224.8 μs .. 225.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.5 μs   (224.3 μs .. 224.7 μs)
std dev              667.1 ns   (605.3 ns .. 767.0 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.7 μs   (154.7 μs .. 154.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.8 μs   (154.8 μs .. 154.9 μs)
std dev              148.1 ns   (107.2 ns .. 226.6 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 98.00 μs   (97.84 μs .. 98.11 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.57 μs   (97.38 μs .. 97.74 μs)
std dev              612.9 ns   (565.9 ns .. 668.2 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.947 ms   (5.940 ms .. 5.953 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.962 ms   (5.955 ms .. 5.985 ms)
std dev              32.62 μs   (10.45 μs .. 65.81 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.154 ms   (6.150 ms .. 6.157 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.152 ms   (6.149 ms .. 6.155 ms)
std dev              8.280 μs   (6.863 μs .. 11.70 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.686 ms   (2.684 ms .. 2.690 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.685 ms   (2.684 ms .. 2.687 ms)
std dev              6.517 μs   (5.159 μs .. 9.560 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.759 ms   (2.757 ms .. 2.761 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.756 ms   (2.754 ms .. 2.758 ms)
std dev              5.980 μs   (4.710 μs .. 8.539 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.687 ms   (2.685 ms .. 2.689 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.686 ms   (2.685 ms .. 2.687 ms)
std dev              3.960 μs   (3.378 μs .. 4.996 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.408 ms   (7.403 ms .. 7.412 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.406 ms   (7.401 ms .. 7.410 ms)
std dev              12.29 μs   (9.089 μs .. 18.47 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 24.26 ms   (23.56 ms .. 24.92 ms)
                     0.996 R²   (0.993 R² .. 0.998 R²)
mean                 24.18 ms   (23.72 ms .. 24.56 ms)
std dev              887.4 μs   (728.7 μs .. 1.108 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.56 ms   (35.66 ms .. 37.60 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 36.72 ms   (36.21 ms .. 37.10 ms)
std dev              847.3 μs   (581.9 μs .. 1.306 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.37 ms   (25.61 ms .. 26.92 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 26.79 ms   (26.43 ms .. 27.73 ms)
std dev              1.181 ms   (494.6 μs .. 2.033 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.893 ms   (1.893 ms .. 1.893 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.893 ms   (1.893 ms .. 1.894 ms)
std dev              1.374 μs   (839.2 ns .. 2.267 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.10 ms   (14.10 ms .. 14.11 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.10 ms   (14.10 ms .. 14.10 ms)
std dev              6.583 μs   (4.125 μs .. 10.67 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.219 ms   (2.214 ms .. 2.222 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.216 ms   (2.213 ms .. 2.218 ms)
std dev              9.461 μs   (8.094 μs .. 11.33 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.876 ms   (1.876 ms .. 1.877 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.876 ms   (1.875 ms .. 1.877 ms)
std dev              1.681 μs   (1.177 μs .. 2.934 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.808 ms   (5.806 ms .. 5.811 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.806 ms   (5.804 ms .. 5.807 ms)
std dev              4.458 μs   (3.466 μs .. 6.548 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.518 ms   (7.517 ms .. 7.520 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.520 ms   (7.519 ms .. 7.522 ms)
std dev              3.665 μs   (2.403 μs .. 6.245 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 10.67 ms   (10.67 ms .. 10.67 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 10.67 ms   (10.67 ms .. 10.67 ms)
std dev              5.631 μs   (2.793 μs .. 11.30 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 956.3 μs   (955.8 μs .. 956.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 955.5 μs   (954.9 μs .. 955.9 μs)
std dev              1.703 μs   (1.392 μs .. 2.240 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 545.8 μs   (545.1 μs .. 546.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 547.1 μs   (546.4 μs .. 547.9 μs)
std dev              2.518 μs   (1.989 μs .. 3.267 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 441.4 μs   (441.3 μs .. 441.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 441.6 μs   (441.4 μs .. 441.8 μs)
std dev              509.9 ns   (333.6 ns .. 862.4 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 491.4 μs   (491.2 μs .. 491.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 491.3 μs   (491.3 μs .. 491.5 μs)
std dev              265.5 ns   (169.9 ns .. 484.9 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7776.0MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.0MB/s
1000MB of bytes read    in 0.413s, at: 2423.3MB/s
1000MB of words written in 0.114s, at: 8806.1MB/s
1000MB of words read    in 0.068s, at: 14720.8MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.830s, at: 1204.5MB/s
1000MB of words written in 0.113s, at: 8833.9MB/s
1000MB of words read    in 0.107s, at: 9348.4MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.9 MB/s write,   92.2 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  521.2 MB/s write,  159.3 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  937.7 MB/s write,  344.8 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1638.4 MB/s write,  859.4 MB/s read,   0.5 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 91a86a7148b81c5c8a42ba614bd78184a9375988.log.tmp 91a86a7148b81c5c8a42ba614bd78184a9375988.log
