
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 6e636f468701ed82b3e79eda9129215fc0f4ef68
Note: checking out '6e636f468701ed82b3e79eda9129215fc0f4ef68'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 6e636f4... Merge pull request #83 from bergmark/ghc72

Identifying

git log -n 1
commit 6e636f468701ed82b3e79eda9129215fc0f4ef68
Merge: cd7030e fb381cc
Author: Lennart Kolmodin <kolmodin@gmail.com>
Date:   Wed Jul 29 19:31:45 2015 +0200

    Merge pull request #83 from bergmark/ghc72
    
    Don't mark modules using bytestring as safe on GHC 7.2 to fix compilation

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1029      43.6%        421       2780
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1029      43.6%        421       2780

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.0...
cabal build
Building binary-0.7.6.0...
Preprocessing library binary-0.7.6.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.0...
Preprocessing benchmark 'builder' for binary-0.7.6.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.0...
Preprocessing library binary-0.7.6.0...
In-place registering binary-0.7.6.0...
Preprocessing benchmark 'builder' for binary-0.7.6.0...
Preprocessing benchmark 'get' for binary-0.7.6.0...
Preprocessing benchmark 'bench' for binary-0.7.6.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.01 μs   (35.00 μs .. 35.03 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.04 μs   (35.03 μs .. 35.04 μs)
std dev              21.32 ns   (17.98 ns .. 25.17 ns)

benchmarking bounds/[Word8]
time                 42.79 μs   (42.76 μs .. 42.81 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.74 μs   (42.71 μs .. 42.76 μs)
std dev              86.64 ns   (74.88 ns .. 106.0 ns)

benchmarking small ByteString
time                 324.3 ns   (324.1 ns .. 324.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.8 ns   (323.5 ns .. 324.0 ns)
std dev              717.3 ps   (635.8 ps .. 820.7 ps)

benchmarking large ByteString
time                 320.8 ns   (320.7 ns .. 321.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 321.1 ns   (321.0 ns .. 321.3 ns)
std dev              466.3 ps   (417.6 ps .. 512.5 ps)

benchmarking length-prefixed ByteString
time                 6.710 μs   (6.709 μs .. 6.711 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.712 μs   (6.711 μs .. 6.713 μs)
std dev              2.640 ns   (2.090 ns .. 3.545 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 364.7 μs   (364.6 μs .. 364.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 364.6 μs   (364.5 μs .. 364.6 μs)
std dev              204.6 ns   (179.7 ns .. 235.5 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.2 μs   (224.1 μs .. 224.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.1 μs   (224.0 μs .. 224.2 μs)
std dev              213.5 ns   (161.6 ns .. 266.8 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.9 μs   (154.8 μs .. 155.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.9 μs   (154.7 μs .. 155.0 μs)
std dev              445.0 ns   (309.4 ns .. 608.7 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 96.66 μs   (96.54 μs .. 96.79 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.17 μs   (97.00 μs .. 97.37 μs)
std dev              618.5 ns   (578.1 ns .. 650.6 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.811 ms   (5.809 ms .. 5.813 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.816 ms   (5.814 ms .. 5.820 ms)
std dev              9.274 μs   (6.161 μs .. 12.98 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.175 ms   (6.171 ms .. 6.179 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.170 ms   (6.166 ms .. 6.174 ms)
std dev              11.45 μs   (9.196 μs .. 15.46 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.849 ms   (2.827 ms .. 2.885 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 2.828 ms   (2.823 ms .. 2.837 ms)
std dev              21.92 μs   (11.74 μs .. 43.16 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.852 ms   (2.844 ms .. 2.861 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.859 ms   (2.853 ms .. 2.869 ms)
std dev              25.59 μs   (16.40 μs .. 42.48 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.720 ms   (2.717 ms .. 2.723 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.720 ms   (2.717 ms .. 2.722 ms)
std dev              8.222 μs   (6.748 μs .. 9.764 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.471 ms   (7.465 ms .. 7.475 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.471 ms   (7.466 ms .. 7.474 ms)
std dev              10.64 μs   (7.093 μs .. 17.09 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.07 ms   (22.60 ms .. 23.62 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.57 ms   (23.19 ms .. 23.96 ms)
std dev              878.1 μs   (621.8 μs .. 1.328 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.46 ms   (35.78 ms .. 37.44 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 36.97 ms   (36.47 ms .. 37.78 ms)
std dev              1.286 ms   (737.1 μs .. 2.152 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.43 ms   (25.87 ms .. 26.99 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.57 ms   (26.17 ms .. 27.59 ms)
std dev              1.216 ms   (521.6 μs .. 2.218 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.956 ms   (1.956 ms .. 1.956 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.956 ms   (1.956 ms .. 1.957 ms)
std dev              613.7 ns   (514.1 ns .. 722.6 ns)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.10 ms   (14.10 ms .. 14.10 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.10 ms   (14.09 ms .. 14.10 ms)
std dev              4.355 μs   (3.382 μs .. 5.936 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.327 ms   (2.323 ms .. 2.330 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.309 ms   (2.303 ms .. 2.313 ms)
std dev              15.39 μs   (13.22 μs .. 18.21 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.999 ms   (1.998 ms .. 2.000 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.999 ms   (1.999 ms .. 2.000 ms)
std dev              2.077 μs   (1.534 μs .. 2.785 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.934 ms   (5.930 ms .. 5.938 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.935 ms   (5.933 ms .. 5.936 ms)
std dev              5.123 μs   (4.044 μs .. 6.596 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.605 ms   (7.593 ms .. 7.617 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.604 ms   (7.599 ms .. 7.610 ms)
std dev              15.86 μs   (13.06 μs .. 23.67 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.86 ms   (12.86 ms .. 12.87 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.87 ms   (12.86 ms .. 12.87 ms)
std dev              10.38 μs   (5.482 μs .. 19.09 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 976.2 μs   (975.7 μs .. 976.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 976.6 μs   (976.1 μs .. 977.2 μs)
std dev              1.922 μs   (1.494 μs .. 2.582 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 601.0 μs   (600.7 μs .. 601.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 601.3 μs   (601.0 μs .. 601.6 μs)
std dev              938.8 ns   (719.2 ns .. 1.183 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 502.8 μs   (502.7 μs .. 502.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 502.8 μs   (502.7 μs .. 502.9 μs)
std dev              396.8 ns   (275.3 ns .. 626.4 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 553.7 μs   (553.6 μs .. 553.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 553.7 μs   (553.6 μs .. 553.8 μs)
std dev              196.8 ns   (110.0 ns .. 355.3 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7728.1MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3354.4MB/s
1000MB of bytes read    in 0.413s, at: 2423.2MB/s
1000MB of words written in 0.114s, at: 8800.8MB/s
1000MB of words read    in 0.068s, at: 14721.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.820s, at: 1220.0MB/s
1000MB of words written in 0.113s, at: 8835.9MB/s
1000MB of words read    in 0.107s, at: 9347.5MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.9 MB/s write,   87.9 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  464.7 MB/s write,  152.5 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  841.9 MB/s write,  326.7 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1400.6 MB/s write,  843.1 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 6e636f468701ed82b3e79eda9129215fc0f4ef68.log.tmp 6e636f468701ed82b3e79eda9129215fc0f4ef68.log
