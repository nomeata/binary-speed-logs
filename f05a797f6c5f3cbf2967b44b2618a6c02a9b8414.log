
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout f05a797f6c5f3cbf2967b44b2618a6c02a9b8414
Note: checking out 'f05a797f6c5f3cbf2967b44b2618a6c02a9b8414'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at f05a797... Remove obsolete index.html, Makefiles.

Identifying

git log -n 1
commit f05a797f6c5f3cbf2967b44b2618a6c02a9b8414
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sat May 30 13:45:45 2015 +0200

    Remove obsolete index.html, Makefiles.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1026      44.0%        418       2751
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1026      44.0%        418       2751

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:421:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:421:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:421:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.05 μs   (35.04 μs .. 35.05 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.08 μs   (35.07 μs .. 35.09 μs)
std dev              38.03 ns   (33.68 ns .. 43.18 ns)

benchmarking bounds/[Word8]
time                 42.70 μs   (42.69 μs .. 42.70 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.69 μs   (42.68 μs .. 42.69 μs)
std dev              15.02 ns   (12.69 ns .. 17.70 ns)

benchmarking small ByteString
time                 322.2 ns   (321.9 ns .. 322.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 322.7 ns   (322.5 ns .. 323.0 ns)
std dev              728.4 ps   (631.2 ps .. 848.7 ps)

benchmarking large ByteString
time                 325.2 ns   (325.0 ns .. 325.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.6 ns   (325.4 ns .. 325.8 ns)
std dev              605.3 ps   (505.4 ps .. 734.4 ps)

benchmarking length-prefixed ByteString
time                 6.710 μs   (6.709 μs .. 6.711 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.711 μs   (6.710 μs .. 6.712 μs)
std dev              2.715 ns   (2.309 ns .. 3.323 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 367.7 μs   (367.6 μs .. 367.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 367.8 μs   (367.8 μs .. 367.9 μs)
std dev              160.5 ns   (125.4 ns .. 225.9 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.7 μs   (224.6 μs .. 224.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.4 μs   (224.2 μs .. 224.5 μs)
std dev              497.0 ns   (424.9 ns .. 607.6 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.7 μs   (154.6 μs .. 154.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.8 μs   (154.7 μs .. 154.8 μs)
std dev              179.5 ns   (125.3 ns .. 246.4 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.58 μs   (97.34 μs .. 97.83 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.79 μs   (97.66 μs .. 97.87 μs)
std dev              342.5 ns   (235.2 ns .. 453.4 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.753 ms   (5.751 ms .. 5.755 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.761 ms   (5.758 ms .. 5.766 ms)
std dev              10.18 μs   (6.306 μs .. 16.74 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.131 ms   (6.128 ms .. 6.133 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.123 ms   (6.119 ms .. 6.126 ms)
std dev              11.19 μs   (8.402 μs .. 13.73 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.807 ms   (2.805 ms .. 2.808 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.805 ms   (2.804 ms .. 2.807 ms)
std dev              5.430 μs   (4.252 μs .. 8.352 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.872 ms   (2.869 ms .. 2.874 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.869 ms   (2.867 ms .. 2.871 ms)
std dev              7.690 μs   (5.713 μs .. 11.02 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.798 ms   (2.797 ms .. 2.799 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.799 ms   (2.797 ms .. 2.801 ms)
std dev              5.207 μs   (3.918 μs .. 8.065 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.360 ms   (7.355 ms .. 7.365 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.357 ms   (7.352 ms .. 7.360 ms)
std dev              11.20 μs   (7.326 μs .. 19.71 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.30 ms   (22.84 ms .. 23.91 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.62 ms   (23.29 ms .. 24.01 ms)
std dev              831.3 μs   (535.6 μs .. 1.355 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.88 ms   (35.80 ms .. 37.94 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 37.04 ms   (36.51 ms .. 37.97 ms)
std dev              1.316 ms   (775.1 μs .. 2.078 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.83 ms   (26.39 ms .. 27.25 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 26.93 ms   (26.54 ms .. 27.88 ms)
std dev              1.163 ms   (502.7 μs .. 2.099 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 2.010 ms   (1.996 ms .. 2.022 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.998 ms   (1.991 ms .. 2.008 ms)
std dev              29.55 μs   (23.35 μs .. 44.00 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.26 ms   (14.26 ms .. 14.26 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.25 ms   (14.24 ms .. 14.25 ms)
std dev              10.24 μs   (6.938 μs .. 15.34 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.167 ms   (2.165 ms .. 2.170 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.167 ms   (2.164 ms .. 2.169 ms)
std dev              7.274 μs   (5.961 μs .. 10.02 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.988 ms   (1.987 ms .. 1.989 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.987 ms   (1.986 ms .. 1.988 ms)
std dev              2.676 μs   (2.065 μs .. 3.413 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.907 ms   (5.904 ms .. 5.911 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.909 ms   (5.907 ms .. 5.911 ms)
std dev              5.848 μs   (4.703 μs .. 7.826 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.679 ms   (7.675 ms .. 7.683 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.680 ms   (7.677 ms .. 7.683 ms)
std dev              7.536 μs   (5.729 μs .. 11.04 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 13.80 ms   (13.80 ms .. 13.81 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.81 ms   (13.81 ms .. 13.84 ms)
std dev              29.97 μs   (7.921 μs .. 60.06 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 986.9 μs   (985.2 μs .. 989.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 987.8 μs   (986.5 μs .. 989.2 μs)
std dev              4.497 μs   (3.539 μs .. 5.769 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 615.3 μs   (613.9 μs .. 617.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 619.3 μs   (617.9 μs .. 621.4 μs)
std dev              5.733 μs   (4.018 μs .. 9.068 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 506.1 μs   (505.6 μs .. 506.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 508.2 μs   (507.5 μs .. 509.1 μs)
std dev              2.723 μs   (2.237 μs .. 3.292 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.3 μs   (554.2 μs .. 554.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.5 μs   (554.3 μs .. 554.7 μs)
std dev              570.7 ns   (456.7 ns .. 790.5 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.130s, at: 7684.4MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.5MB/s
1000MB of bytes read    in 0.413s, at: 2423.2MB/s
1000MB of words written in 0.114s, at: 8790.6MB/s
1000MB of words read    in 0.068s, at: 14722.3MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.810s, at: 1235.3MB/s
1000MB of bytes read    in 0.830s, at: 1204.3MB/s
1000MB of words written in 0.113s, at: 8819.4MB/s
1000MB of words read    in 0.107s, at: 9345.0MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.7 MB/s write,   83.7 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  468.7 MB/s write,  159.6 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  846.5 MB/s write,  410.9 MB/s read,   0.5 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1416.7 MB/s write,  835.3 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv f05a797f6c5f3cbf2967b44b2618a6c02a9b8414.log.tmp f05a797f6c5f3cbf2967b44b2618a6c02a9b8414.log
