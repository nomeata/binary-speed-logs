
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout f05a797f6c5f3cbf2967b44b2618a6c02a9b8414
Note: checking out 'f05a797f6c5f3cbf2967b44b2618a6c02a9b8414'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at f05a797... Remove obsolete index.html, Makefiles.

Identifying

git log -n 1
commit f05a797f6c5f3cbf2967b44b2618a6c02a9b8414
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sat May 30 13:45:45 2015 +0200

    Remove obsolete index.html, Makefiles.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1026      44.0%        418       2751
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1026      44.0%        418       2751

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:421:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:421:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:421:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.65 μs   (34.62 μs .. 34.67 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.67 μs   (34.66 μs .. 34.68 μs)
std dev              31.10 ns   (25.58 ns .. 44.46 ns)

benchmarking bounds/[Word8]
time                 42.44 μs   (42.43 μs .. 42.46 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.44 μs   (42.43 μs .. 42.46 μs)
std dev              40.82 ns   (20.69 ns .. 73.97 ns)

benchmarking small ByteString
time                 238.4 ns   (238.2 ns .. 238.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 238.3 ns   (238.2 ns .. 238.5 ns)
std dev              480.5 ps   (391.8 ps .. 638.9 ps)

benchmarking large ByteString
time                 239.3 ns   (239.2 ns .. 239.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 239.1 ns   (238.9 ns .. 239.2 ns)
std dev              461.1 ps   (385.3 ps .. 556.1 ps)

benchmarking length-prefixed ByteString
time                 6.782 μs   (6.781 μs .. 6.782 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.783 μs   (6.782 μs .. 6.784 μs)
std dev              3.068 ns   (2.512 ns .. 3.831 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 364.0 μs   (363.7 μs .. 364.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 362.8 μs   (362.5 μs .. 363.1 μs)
std dev              1.112 μs   (941.7 ns .. 1.320 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 221.0 μs   (220.8 μs .. 221.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 221.5 μs   (221.3 μs .. 221.6 μs)
std dev              507.1 ns   (387.0 ns .. 685.4 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 151.3 μs   (151.1 μs .. 151.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 150.8 μs   (150.6 μs .. 151.1 μs)
std dev              838.5 ns   (705.1 ns .. 1.072 μs)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 93.89 μs   (93.77 μs .. 93.96 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 93.90 μs   (93.82 μs .. 93.96 μs)
std dev              231.3 ns   (190.3 ns .. 260.3 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.919 ms   (5.916 ms .. 5.921 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.924 ms   (5.921 ms .. 5.928 ms)
std dev              9.569 μs   (6.308 μs .. 13.90 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.265 ms   (6.250 ms .. 6.288 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.248 ms   (6.243 ms .. 6.255 ms)
std dev              18.02 μs   (11.58 μs .. 30.02 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.672 ms   (2.670 ms .. 2.674 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.673 ms   (2.671 ms .. 2.675 ms)
std dev              6.999 μs   (5.285 μs .. 9.225 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.749 ms   (2.747 ms .. 2.751 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.748 ms   (2.746 ms .. 2.751 ms)
std dev              7.855 μs   (5.902 μs .. 11.44 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.671 ms   (2.670 ms .. 2.673 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.672 ms   (2.671 ms .. 2.674 ms)
std dev              4.292 μs   (3.341 μs .. 6.499 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.503 ms   (7.499 ms .. 7.507 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.501 ms   (7.496 ms .. 7.506 ms)
std dev              13.14 μs   (9.711 μs .. 18.40 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.31 ms   (22.82 ms .. 23.85 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 23.80 ms   (23.41 ms .. 24.28 ms)
std dev              996.4 μs   (662.7 μs .. 1.432 ms)
variance introduced by outliers: 14% (moderately inflated)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.51 ms   (35.74 ms .. 37.22 ms)
                     0.999 R²   (0.997 R² .. 0.999 R²)
mean                 36.38 ms   (35.90 ms .. 36.72 ms)
std dev              818.9 μs   (573.4 μs .. 1.177 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.22 ms   (25.84 ms .. 26.64 ms)
                     0.999 R²   (0.998 R² .. 0.999 R²)
mean                 26.50 ms   (26.11 ms .. 27.49 ms)
std dev              1.199 ms   (526.3 μs .. 2.186 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.958 ms   (1.956 ms .. 1.960 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.959 ms   (1.957 ms .. 1.963 ms)
std dev              10.36 μs   (5.979 μs .. 17.17 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.01 ms   (14.01 ms .. 14.01 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.01 ms   (14.01 ms .. 14.01 ms)
std dev              2.559 μs   (1.925 μs .. 3.859 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.149 ms   (2.145 ms .. 2.154 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.149 ms   (2.144 ms .. 2.152 ms)
std dev              13.49 μs   (10.96 μs .. 19.01 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.048 ms   (2.047 ms .. 2.048 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.048 ms   (2.047 ms .. 2.048 ms)
std dev              1.787 μs   (1.431 μs .. 2.355 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.754 ms   (5.751 ms .. 5.756 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.754 ms   (5.753 ms .. 5.755 ms)
std dev              4.394 μs   (3.509 μs .. 5.506 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.482 ms   (7.477 ms .. 7.486 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.485 ms   (7.483 ms .. 7.488 ms)
std dev              6.304 μs   (5.085 μs .. 8.536 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 14.07 ms   (14.06 ms .. 14.08 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.07 ms   (14.07 ms .. 14.09 ms)
std dev              24.76 μs   (8.183 μs .. 48.66 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.117 ms   (1.117 ms .. 1.118 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.118 ms   (1.117 ms .. 1.118 ms)
std dev              1.936 μs   (1.497 μs .. 2.424 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 648.1 μs   (647.7 μs .. 648.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 648.2 μs   (647.9 μs .. 648.7 μs)
std dev              1.242 μs   (846.0 ns .. 1.797 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 520.7 μs   (520.7 μs .. 520.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 520.7 μs   (520.6 μs .. 520.7 μs)
std dev              224.3 ns   (176.3 ns .. 316.1 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 556.8 μs   (556.7 μs .. 556.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 556.9 μs   (556.8 μs .. 557.1 μs)
std dev              336.7 ns   (215.7 ns .. 536.2 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.280s, at: 3571.2MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.300s, at: 3333.1MB/s
1000MB of bytes read    in 0.416s, at: 2403.7MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.072s, at: 13887.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.808s, at: 1237.5MB/s
1000MB of bytes read    in 0.832s, at: 1201.8MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.108s, at: 9258.7MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  242.7 MB/s write,   85.3 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  471.7 MB/s write,  163.4 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  862.0 MB/s write,  416.6 MB/s read,   0.5 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1470.5 MB/s write,  862.0 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv f05a797f6c5f3cbf2967b44b2618a6c02a9b8414.log.tmp f05a797f6c5f3cbf2967b44b2618a6c02a9b8414.log
