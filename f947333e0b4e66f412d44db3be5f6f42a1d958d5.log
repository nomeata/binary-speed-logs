
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout f947333e0b4e66f412d44db3be5f6f42a1d958d5
Note: checking out 'f947333e0b4e66f412d44db3be5f6f42a1d958d5'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at f947333... Make `ensureN` more inliner-friendly...

Identifying

git log -n 1
commit f947333e0b4e66f412d44db3be5f6f42a1d958d5
Author: Francesco Mazzoli <f@mazzo.li>
Date:   Thu May 28 14:38:17 2015 +0200

    Make `ensureN` more inliner-friendly...
    
    ...by making the common case (when the input is big enough) non-recursive.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1317       1029      43.9%        410       2756
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1317       1029      43.9%        410       2756

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:391:11: Warning:
    This binding for `remaining' shadows the existing binding
      defined at src/Data/Binary/Get/Internal.hs:334:1

src/Data/Binary/Get/Internal.hs:410:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:410:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:410:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.06 μs   (35.05 μs .. 35.08 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.04 μs   (35.02 μs .. 35.05 μs)
std dev              50.66 ns   (44.33 ns .. 57.32 ns)

benchmarking bounds/[Word8]
time                 42.75 μs   (42.74 μs .. 42.75 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.73 μs   (42.73 μs .. 42.74 μs)
std dev              19.83 ns   (17.50 ns .. 23.45 ns)

benchmarking small ByteString
time                 325.2 ns   (325.0 ns .. 325.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.8 ns   (324.7 ns .. 325.0 ns)
std dev              493.6 ps   (400.9 ps .. 637.6 ps)

benchmarking large ByteString
time                 318.4 ns   (318.4 ns .. 318.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 318.8 ns   (318.7 ns .. 319.0 ns)
std dev              483.9 ps   (408.7 ps .. 579.4 ps)

benchmarking length-prefixed ByteString
time                 6.691 μs   (6.689 μs .. 6.692 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.695 μs   (6.694 μs .. 6.696 μs)
std dev              3.549 ns   (2.382 ns .. 5.307 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.4 μs   (366.4 μs .. 366.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.4 μs   (366.3 μs .. 366.4 μs)
std dev              172.1 ns   (125.6 ns .. 280.1 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.4 μs   (224.2 μs .. 224.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.2 μs   (224.1 μs .. 224.4 μs)
std dev              465.4 ns   (349.4 ns .. 608.1 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.9 μs   (154.6 μs .. 155.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.3 μs   (154.1 μs .. 154.4 μs)
std dev              563.5 ns   (441.6 ns .. 646.5 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.07 μs   (97.02 μs .. 97.12 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.05 μs   (97.03 μs .. 97.07 μs)
std dev              74.00 ns   (64.51 ns .. 90.81 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 6.060 ms   (6.057 ms .. 6.064 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.068 ms   (6.065 ms .. 6.074 ms)
std dev              12.79 μs   (8.112 μs .. 18.43 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.384 ms   (6.381 ms .. 6.387 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.378 ms   (6.374 ms .. 6.381 ms)
std dev              10.12 μs   (8.260 μs .. 12.17 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.729 ms   (2.728 ms .. 2.730 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.729 ms   (2.727 ms .. 2.730 ms)
std dev              5.462 μs   (4.130 μs .. 8.046 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.789 ms   (2.787 ms .. 2.791 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.791 ms   (2.789 ms .. 2.794 ms)
std dev              7.228 μs   (5.258 μs .. 10.90 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.714 ms   (2.713 ms .. 2.716 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.715 ms   (2.714 ms .. 2.716 ms)
std dev              4.523 μs   (3.442 μs .. 6.393 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.848 ms   (7.843 ms .. 7.853 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.848 ms   (7.843 ms .. 7.852 ms)
std dev              12.57 μs   (8.233 μs .. 18.60 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.20 ms   (22.66 ms .. 23.79 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 23.63 ms   (23.37 ms .. 24.02 ms)
std dev              737.7 μs   (495.4 μs .. 1.183 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.68 ms   (35.98 ms .. 37.67 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 37.16 ms   (36.59 ms .. 37.97 ms)
std dev              1.296 ms   (703.5 μs .. 2.134 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.62 ms   (26.03 ms .. 27.25 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 26.70 ms   (26.34 ms .. 27.57 ms)
std dev              1.213 ms   (560.9 μs .. 2.252 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.953 ms   (1.953 ms .. 1.953 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.953 ms   (1.953 ms .. 1.953 ms)
std dev              524.6 ns   (417.8 ns .. 710.8 ns)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.25 ms   (14.24 ms .. 14.29 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.25 ms   (14.24 ms .. 14.28 ms)
std dev              34.49 μs   (5.090 μs .. 67.53 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.158 ms   (2.156 ms .. 2.161 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.163 ms   (2.161 ms .. 2.165 ms)
std dev              7.176 μs   (5.887 μs .. 9.149 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.010 ms   (2.009 ms .. 2.011 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.009 ms   (2.009 ms .. 2.010 ms)
std dev              2.130 μs   (1.624 μs .. 2.945 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.950 ms   (5.946 ms .. 5.953 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.951 ms   (5.949 ms .. 5.953 ms)
std dev              5.367 μs   (4.419 μs .. 6.743 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.655 ms   (7.650 ms .. 7.658 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.659 ms   (7.657 ms .. 7.662 ms)
std dev              6.261 μs   (4.486 μs .. 8.589 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 13.14 ms   (13.14 ms .. 13.15 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.15 ms   (13.15 ms .. 13.18 ms)
std dev              29.45 μs   (5.626 μs .. 62.41 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 975.4 μs   (975.0 μs .. 975.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 975.2 μs   (975.0 μs .. 975.3 μs)
std dev              659.9 ns   (514.3 ns .. 879.6 ns)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 602.0 μs   (602.0 μs .. 602.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 602.0 μs   (602.0 μs .. 602.1 μs)
std dev              112.2 ns   (79.23 ns .. 184.3 ns)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 502.9 μs   (502.9 μs .. 503.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 502.9 μs   (502.8 μs .. 502.9 μs)
std dev              118.7 ns   (92.77 ns .. 158.9 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 553.8 μs   (553.7 μs .. 553.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 553.8 μs   (553.8 μs .. 553.9 μs)
std dev              113.1 ns   (84.30 ns .. 162.4 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7771.6MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.4MB/s
1000MB of bytes read    in 0.413s, at: 2423.3MB/s
1000MB of words written in 0.114s, at: 8770.2MB/s
1000MB of words read    in 0.068s, at: 14635.1MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.820s, at: 1220.0MB/s
1000MB of words written in 0.113s, at: 8820.8MB/s
1000MB of words read    in 0.107s, at: 9343.8MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.6 MB/s write,   88.9 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  466.7 MB/s write,  156.5 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  838.4 MB/s write,  382.5 MB/s read,   0.5 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1397.1 MB/s write,  837.6 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv f947333e0b4e66f412d44db3be5f6f42a1d958d5.log.tmp f947333e0b4e66f412d44db3be5f6f42a1d958d5.log
