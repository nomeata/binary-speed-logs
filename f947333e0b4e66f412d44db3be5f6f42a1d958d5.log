
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout f947333e0b4e66f412d44db3be5f6f42a1d958d5
Note: checking out 'f947333e0b4e66f412d44db3be5f6f42a1d958d5'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at f947333... Make `ensureN` more inliner-friendly...

Identifying

git log -n 1
commit f947333e0b4e66f412d44db3be5f6f42a1d958d5
Author: Francesco Mazzoli <f@mazzo.li>
Date:   Thu May 28 14:38:17 2015 +0200

    Make `ensureN` more inliner-friendly...
    
    ...by making the common case (when the input is big enough) non-recursive.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1317       1029      43.9%        410       2756
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1317       1029      43.9%        410       2756

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:391:11: Warning:
    This binding for `remaining' shadows the existing binding
      defined at src/Data/Binary/Get/Internal.hs:334:1

src/Data/Binary/Get/Internal.hs:410:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:410:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:410:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.74 μs   (34.72 μs .. 34.76 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.75 μs   (34.75 μs .. 34.76 μs)
std dev              24.15 ns   (18.25 ns .. 36.63 ns)

benchmarking bounds/[Word8]
time                 42.59 μs   (42.58 μs .. 42.60 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.60 μs   (42.59 μs .. 42.60 μs)
std dev              25.80 ns   (21.19 ns .. 33.14 ns)

benchmarking small ByteString
time                 239.8 ns   (239.7 ns .. 240.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 239.8 ns   (239.7 ns .. 240.0 ns)
std dev              453.3 ps   (390.8 ps .. 550.5 ps)

benchmarking large ByteString
time                 239.4 ns   (239.3 ns .. 239.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 239.7 ns   (239.6 ns .. 239.9 ns)
std dev              539.3 ps   (457.8 ps .. 671.1 ps)

benchmarking length-prefixed ByteString
time                 6.789 μs   (6.787 μs .. 6.791 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.792 μs   (6.791 μs .. 6.794 μs)
std dev              3.656 ns   (2.903 ns .. 4.883 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 364.2 μs   (363.9 μs .. 364.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 363.6 μs   (363.4 μs .. 363.8 μs)
std dev              553.7 ns   (421.9 ns .. 768.6 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 221.3 μs   (221.1 μs .. 221.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 221.7 μs   (221.6 μs .. 221.8 μs)
std dev              481.2 ns   (343.5 ns .. 613.4 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 151.2 μs   (151.1 μs .. 151.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 151.3 μs   (151.3 μs .. 151.4 μs)
std dev              175.5 ns   (145.6 ns .. 207.9 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 94.36 μs   (94.20 μs .. 94.53 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 94.46 μs   (94.37 μs .. 94.56 μs)
std dev              303.9 ns   (212.7 ns .. 441.1 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 6.298 ms   (6.295 ms .. 6.300 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.306 ms   (6.303 ms .. 6.311 ms)
std dev              11.73 μs   (7.797 μs .. 17.05 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.639 ms   (6.636 ms .. 6.644 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.637 ms   (6.634 ms .. 6.640 ms)
std dev              9.681 μs   (7.668 μs .. 11.89 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.663 ms   (2.661 ms .. 2.664 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.662 ms   (2.661 ms .. 2.664 ms)
std dev              3.915 μs   (3.074 μs .. 5.369 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.728 ms   (2.727 ms .. 2.730 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.730 ms   (2.728 ms .. 2.731 ms)
std dev              5.283 μs   (4.133 μs .. 7.309 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.661 ms   (2.660 ms .. 2.662 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.660 ms   (2.659 ms .. 2.662 ms)
std dev              3.880 μs   (3.176 μs .. 4.810 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.454 ms   (7.451 ms .. 7.458 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.455 ms   (7.450 ms .. 7.458 ms)
std dev              11.39 μs   (7.461 μs .. 17.63 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.65 ms   (23.00 ms .. 24.43 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 24.02 ms   (23.68 ms .. 24.50 ms)
std dev              867.9 μs   (607.8 μs .. 1.326 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 37.04 ms   (35.58 ms .. 38.42 ms)
                     0.996 R²   (0.993 R² .. 0.999 R²)
mean                 36.79 ms   (36.27 ms .. 37.30 ms)
std dev              1.093 ms   (846.7 μs .. 1.435 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.99 ms   (26.34 ms .. 27.51 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 27.10 ms   (26.61 ms .. 27.89 ms)
std dev              1.329 ms   (701.4 μs .. 2.284 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.951 ms   (1.951 ms .. 1.951 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.951 ms   (1.951 ms .. 1.951 ms)
std dev              434.6 ns   (328.0 ns .. 648.7 ns)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.01 ms   (14.00 ms .. 14.01 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.00 ms   (13.99 ms .. 14.00 ms)
std dev              10.13 μs   (7.338 μs .. 14.85 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.169 ms   (2.166 ms .. 2.172 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.167 ms   (2.165 ms .. 2.169 ms)
std dev              6.070 μs   (4.877 μs .. 7.666 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.027 ms   (2.026 ms .. 2.028 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.027 ms   (2.027 ms .. 2.028 ms)
std dev              1.919 μs   (1.540 μs .. 2.470 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.787 ms   (5.784 ms .. 5.790 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.790 ms   (5.788 ms .. 5.793 ms)
std dev              6.849 μs   (4.969 μs .. 9.354 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.402 ms   (7.398 ms .. 7.407 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.404 ms   (7.402 ms .. 7.406 ms)
std dev              5.747 μs   (4.576 μs .. 7.934 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.75 ms   (12.74 ms .. 12.75 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.76 ms   (12.75 ms .. 12.78 ms)
std dev              29.63 μs   (11.11 μs .. 58.35 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.114 ms   (1.114 ms .. 1.115 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.115 ms   (1.114 ms .. 1.115 ms)
std dev              1.355 μs   (1.025 μs .. 1.782 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 647.6 μs   (647.5 μs .. 647.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 647.6 μs   (647.5 μs .. 647.7 μs)
std dev              330.2 ns   (244.1 ns .. 475.8 ns)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 521.6 μs   (521.5 μs .. 521.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 521.7 μs   (521.6 μs .. 521.8 μs)
std dev              290.8 ns   (238.0 ns .. 370.6 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 556.8 μs   (556.8 μs .. 556.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 556.9 μs   (556.8 μs .. 556.9 μs)
std dev              216.8 ns   (148.4 ns .. 329.7 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.284s, at: 3520.9MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.300s, at: 3333.1MB/s
1000MB of bytes read    in 0.412s, at: 2427.0MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.072s, at: 13887.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.812s, at: 1231.5MB/s
1000MB of bytes read    in 0.820s, at: 1219.4MB/s
1000MB of words written in 0.112s, at: 8928.0MB/s
1000MB of words read    in 0.112s, at: 8928.0MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  242.7 MB/s write,   91.6 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  471.7 MB/s write,  159.2 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  833.3 MB/s write,  390.6 MB/s read,   0.5 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1470.5 MB/s write,  862.0 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv f947333e0b4e66f412d44db3be5f6f42a1d958d5.log.tmp f947333e0b4e66f412d44db3be5f6f42a1d958d5.log
