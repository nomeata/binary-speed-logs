
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 5a91e0d8b7ef5150b268b52536751f44c4a9a052
Note: checking out '5a91e0d8b7ef5150b268b52536751f44c4a9a052'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 5a91e0d... Conditionally include <$> for older GHC versions.

Identifying

git log -n 1
commit 5a91e0d8b7ef5150b268b52536751f44c4a9a052
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Fri Aug 14 12:56:59 2015 +0200

    Conditionally include <$> for older GHC versions.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
[ 1 of 11] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 2 of 11] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder.o )
[ 3 of 11] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 4 of 11] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Put.o )
[ 5 of 11] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get.o )
[ 6 of 11] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Class.o )
[ 7 of 11] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Generic.o )
[ 8 of 11] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary.o )
[ 9 of 11] Compiling GenericsBenchTypes ( benchmarks/GenericsBenchTypes.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchTypes.o )
[10 of 11] Compiling GenericsBenchCache ( benchmarks/GenericsBenchCache.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchCache.o )
[11 of 11] Compiling Main             ( benchmarks/GenericsBench.hs, dist/build/generics-bench/generics-bench-tmp/Main.o )
Linking dist/build/generics-bench/generics-bench ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[3 of 3] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 4 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.00 μs   (34.99 μs .. 35.01 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.02 μs   (35.02 μs .. 35.03 μs)
std dev              20.67 ns   (16.77 ns .. 26.96 ns)

benchmarking bounds/[Word8]
time                 42.75 μs   (42.74 μs .. 42.77 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.78 μs   (42.77 μs .. 42.79 μs)
std dev              44.51 ns   (38.55 ns .. 53.90 ns)

benchmarking small ByteString
time                 325.8 ns   (325.5 ns .. 326.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.8 ns   (325.6 ns .. 325.9 ns)
std dev              664.4 ps   (550.6 ps .. 856.7 ps)

benchmarking large ByteString
time                 331.5 ns   (331.3 ns .. 331.7 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 331.3 ns   (331.1 ns .. 331.5 ns)
std dev              709.5 ps   (631.6 ps .. 794.6 ps)

benchmarking length-prefixed ByteString
time                 7.513 μs   (7.511 μs .. 7.515 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.517 μs   (7.516 μs .. 7.519 μs)
std dev              4.487 ns   (2.272 ns .. 8.001 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 364.4 μs   (363.6 μs .. 365.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 363.9 μs   (363.8 μs .. 364.4 μs)
std dev              711.8 ns   (221.5 ns .. 1.528 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.8 μs   (224.6 μs .. 225.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.2 μs   (224.0 μs .. 224.4 μs)
std dev              668.9 ns   (562.0 ns .. 796.1 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 153.9 μs   (153.8 μs .. 154.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.5 μs   (154.3 μs .. 154.6 μs)
std dev              491.7 ns   (419.3 ns .. 551.1 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 98.13 μs   (97.78 μs .. 98.35 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.68 μs   (97.56 μs .. 97.84 μs)
std dev              461.7 ns   (357.0 ns .. 558.4 ns)

Benchmark builder: FINISH
Benchmark generics-bench: RUNNING...
creating cabal cache file... done
benchmarking encode
time                 45.32 ms   (44.57 ms .. 46.01 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 45.20 ms   (44.76 ms .. 46.18 ms)
std dev              1.219 ms   (515.8 μs .. 2.138 ms)

benchmarking decode
time                 17.75 ms   (17.38 ms .. 18.09 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 17.60 ms   (17.17 ms .. 18.01 ms)
std dev              1.097 ms   (778.5 μs .. 1.644 ms)
variance introduced by outliers: 25% (moderately inflated)

benchmarking decode null
time                 11.16 ms   (10.95 ms .. 11.37 ms)
                     0.996 R²   (0.994 R² .. 0.998 R²)
mean                 11.07 ms   (10.90 ms .. 11.29 ms)
std dev              517.0 μs   (399.4 μs .. 706.4 μs)
variance introduced by outliers: 20% (moderately inflated)

benchmarking embarrassment/read
time                 635.9 ms   (630.4 ms .. 640.6 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 632.4 ms   (631.5 ms .. 633.2 ms)
std dev              1.195 ms   (0.0 s .. 1.319 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking embarrassment/show
time                 36.03 ms   (35.70 ms .. 36.35 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 35.92 ms   (35.69 ms .. 36.16 ms)
std dev              472.1 μs   (367.3 μs .. 629.8 μs)

Benchmark generics-bench: FINISH
Benchmark get: RUNNING...
benchmarking brackets/Binary 100kb, one chunk
time                 6.386 ms   (6.383 ms .. 6.389 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.394 ms   (6.391 ms .. 6.399 ms)
std dev              12.79 μs   (8.461 μs .. 17.67 μs)

benchmarking brackets/Binary 100kb, 100 byte chunks
time                 6.759 ms   (6.755 ms .. 6.762 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.754 ms   (6.750 ms .. 6.758 ms)
std dev              11.27 μs   (8.918 μs .. 13.88 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, one chunk
time                 2.791 ms   (2.790 ms .. 2.793 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.786 ms   (2.784 ms .. 2.788 ms)
std dev              7.675 μs   (5.894 μs .. 9.209 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, 100 byte chunks
time                 2.850 ms   (2.848 ms .. 2.851 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.850 ms   (2.849 ms .. 2.852 ms)
std dev              5.878 μs   (4.770 μs .. 7.685 μs)

benchmarking brackets/Attoparsec strict-bs 100kb
time                 2.778 ms   (2.777 ms .. 2.779 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.779 ms   (2.778 ms .. 2.781 ms)
std dev              4.797 μs   (3.400 μs .. 6.925 μs)

benchmarking brackets/Cereal strict-bs 100kb
time                 7.385 ms   (7.381 ms .. 7.390 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.382 ms   (7.378 ms .. 7.387 ms)
std dev              13.80 μs   (10.71 μs .. 19.35 μs)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Attoparsec
time                 26.72 ms   (26.29 ms .. 27.15 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.70 ms   (26.35 ms .. 27.55 ms)
std dev              1.184 ms   (469.5 μs .. 2.158 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Binary
time                 23.14 ms   (22.53 ms .. 23.81 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 23.49 ms   (23.01 ms .. 23.99 ms)
std dev              1.093 ms   (765.7 μs .. 1.627 ms)
variance introduced by outliers: 14% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Cereal
time                 36.44 ms   (35.62 ms .. 37.56 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 36.81 ms   (36.03 ms .. 37.49 ms)
std dev              1.473 ms   (992.7 μs .. 2.176 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking comparison getWord8, 1MB/Attoparsec
time                 106.3 ms   (96.59 ms .. 113.0 ms)
                     0.987 R²   (0.956 R² .. 0.999 R²)
mean                 110.1 ms   (105.2 ms .. 115.2 ms)
std dev              7.593 ms   (4.886 ms .. 12.77 ms)
variance introduced by outliers: 20% (moderately inflated)

benchmarking comparison getWord8, 1MB/Binary
time                 65.40 ms   (62.60 ms .. 68.08 ms)
                     0.995 R²   (0.984 R² .. 0.999 R²)
mean                 67.00 ms   (65.59 ms .. 69.73 ms)
std dev              3.278 ms   (1.571 ms .. 5.395 ms)

benchmarking comparison getWord8, 1MB/Cereal
time                 117.9 ms   (112.0 ms .. 123.8 ms)
                     0.993 R²   (0.971 R² .. 1.000 R²)
mean                 121.6 ms   (115.8 ms .. 124.6 ms)
std dev              5.732 ms   (2.456 ms .. 8.710 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 2 bytes
time                 34.09 ms   (33.68 ms .. 34.68 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.50 ms   (34.02 ms .. 35.35 ms)
std dev              1.254 ms   (604.8 μs .. 2.163 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 4 bytes
time                 25.78 ms   (25.24 ms .. 26.28 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 25.97 ms   (25.72 ms .. 26.20 ms)
std dev              568.2 μs   (429.1 μs .. 818.7 μs)

benchmarking getWord8 1MB/chunk size 8 bytes
time                 17.02 ms   (16.99 ms .. 17.04 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 17.03 ms   (17.01 ms .. 17.04 ms)
std dev              26.76 μs   (19.51 μs .. 38.06 μs)

benchmarking getWord8 1MB/chunk size 16 bytes
time                 17.46 ms   (17.31 ms .. 17.61 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 17.46 ms   (17.34 ms .. 17.95 ms)
std dev              508.1 μs   (126.0 μs .. 1.073 ms)

benchmarking getWord8 1MB Applicative/chunk size 2 bytes
time                 33.92 ms   (33.42 ms .. 34.43 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 33.92 ms   (33.17 ms .. 34.25 ms)
std dev              982.9 μs   (433.8 μs .. 1.905 ms)

benchmarking getWord8 1MB Applicative/chunk size 4 bytes
time                 18.43 ms   (18.16 ms .. 18.75 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 18.44 ms   (18.34 ms .. 18.62 ms)
std dev              328.5 μs   (197.0 μs .. 515.4 μs)

benchmarking getWord8 1MB Applicative/chunk size 8 bytes
time                 11.80 ms   (11.66 ms .. 11.94 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 11.76 ms   (11.67 ms .. 11.85 ms)
std dev              234.4 μs   (179.3 μs .. 354.8 μs)

benchmarking getWord8 1MB Applicative/chunk size 16 bytes
time                 7.450 ms   (7.405 ms .. 7.507 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 7.423 ms   (7.348 ms .. 7.491 ms)
std dev              206.5 μs   (131.5 μs .. 318.9 μs)
variance introduced by outliers: 11% (moderately inflated)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.130s, at: 7714.8MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.4MB/s
1000MB of bytes read    in 0.413s, at: 2423.4MB/s
1000MB of words written in 0.114s, at: 8801.0MB/s
1000MB of words read    in 0.068s, at: 14695.1MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.6MB/s
1000MB of bytes read    in 0.820s, at: 1220.2MB/s
1000MB of words written in 0.113s, at: 8843.5MB/s
1000MB of words read    in 0.107s, at: 9341.8MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.7 MB/s write,   87.4 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  466.9 MB/s write,  153.2 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  844.5 MB/s write,  325.9 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1409.3 MB/s write,  838.6 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 5a91e0d8b7ef5150b268b52536751f44c4a9a052.log.tmp 5a91e0d8b7ef5150b268b52536751f44c4a9a052.log
