
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 5a91e0d8b7ef5150b268b52536751f44c4a9a052
Note: checking out '5a91e0d8b7ef5150b268b52536751f44c4a9a052'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 5a91e0d... Conditionally include <$> for older GHC versions.

Identifying

git log -n 1
commit 5a91e0d8b7ef5150b268b52536751f44c4a9a052
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Fri Aug 14 12:56:59 2015 +0200

    Conditionally include <$> for older GHC versions.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
[ 1 of 11] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 2 of 11] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder.o )
[ 3 of 11] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 4 of 11] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Put.o )
[ 5 of 11] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get.o )
[ 6 of 11] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Class.o )
[ 7 of 11] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Generic.o )
[ 8 of 11] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary.o )
[ 9 of 11] Compiling GenericsBenchTypes ( benchmarks/GenericsBenchTypes.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchTypes.o )
[10 of 11] Compiling GenericsBenchCache ( benchmarks/GenericsBenchCache.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchCache.o )
[11 of 11] Compiling Main             ( benchmarks/GenericsBench.hs, dist/build/generics-bench/generics-bench-tmp/Main.o )
Linking dist/build/generics-bench/generics-bench ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[3 of 3] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 4 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.99 μs   (34.97 μs .. 35.00 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.99 μs   (34.98 μs .. 35.01 μs)
std dev              36.56 ns   (28.48 ns .. 52.78 ns)

benchmarking bounds/[Word8]
time                 42.71 μs   (42.70 μs .. 42.72 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.74 μs   (42.73 μs .. 42.78 μs)
std dev              70.21 ns   (35.88 ns .. 126.9 ns)

benchmarking small ByteString
time                 325.1 ns   (324.6 ns .. 325.7 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 326.0 ns   (325.6 ns .. 326.3 ns)
std dev              1.168 ns   (929.4 ps .. 1.465 ns)

benchmarking large ByteString
time                 333.8 ns   (333.3 ns .. 334.7 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 333.8 ns   (333.2 ns .. 335.4 ns)
std dev              3.325 ns   (572.1 ps .. 6.364 ns)

benchmarking length-prefixed ByteString
time                 7.525 μs   (7.523 μs .. 7.527 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.526 μs   (7.526 μs .. 7.527 μs)
std dev              2.078 ns   (1.626 ns .. 2.770 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 365.3 μs   (365.1 μs .. 365.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 365.3 μs   (365.2 μs .. 365.4 μs)
std dev              257.9 ns   (203.8 ns .. 337.1 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.8 μs   (224.6 μs .. 225.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.8 μs   (224.7 μs .. 224.9 μs)
std dev              402.2 ns   (294.6 ns .. 532.1 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.0 μs   (153.9 μs .. 154.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.2 μs   (154.1 μs .. 154.3 μs)
std dev              229.5 ns   (179.4 ns .. 294.4 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.14 μs   (97.12 μs .. 97.17 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.11 μs   (97.10 μs .. 97.13 μs)
std dev              63.15 ns   (49.24 ns .. 98.10 ns)

Benchmark builder: FINISH
Benchmark generics-bench: RUNNING...
creating cabal cache file... done
benchmarking encode
time                 45.38 ms   (44.71 ms .. 46.07 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 45.25 ms   (44.79 ms .. 46.31 ms)
std dev              1.238 ms   (478.4 μs .. 2.204 ms)

benchmarking decode
time                 17.79 ms   (17.43 ms .. 18.11 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 17.63 ms   (17.13 ms .. 18.06 ms)
std dev              1.110 ms   (749.3 μs .. 1.675 ms)
variance introduced by outliers: 25% (moderately inflated)

benchmarking decode null
time                 11.17 ms   (10.93 ms .. 11.38 ms)
                     0.996 R²   (0.993 R² .. 0.998 R²)
mean                 11.08 ms   (10.91 ms .. 11.29 ms)
std dev              521.6 μs   (394.8 μs .. 728.3 μs)
variance introduced by outliers: 20% (moderately inflated)

benchmarking embarrassment/read
time                 637.1 ms   (631.3 ms .. 642.8 ms)
                     1.000 R²   (NaN R² .. 1.000 R²)
mean                 633.4 ms   (632.4 ms .. 634.3 ms)
std dev              1.362 ms   (0.0 s .. 1.496 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking embarrassment/show
time                 36.06 ms   (35.69 ms .. 36.40 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 35.98 ms   (35.75 ms .. 36.23 ms)
std dev              475.6 μs   (351.8 μs .. 632.8 μs)

Benchmark generics-bench: FINISH
Benchmark get: RUNNING...
benchmarking brackets/Binary 100kb, one chunk
time                 6.385 ms   (6.382 ms .. 6.387 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.395 ms   (6.391 ms .. 6.400 ms)
std dev              13.61 μs   (8.710 μs .. 18.78 μs)

benchmarking brackets/Binary 100kb, 100 byte chunks
time                 6.761 ms   (6.756 ms .. 6.764 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.756 ms   (6.751 ms .. 6.759 ms)
std dev              11.54 μs   (9.421 μs .. 15.41 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, one chunk
time                 2.775 ms   (2.774 ms .. 2.776 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.775 ms   (2.773 ms .. 2.777 ms)
std dev              5.081 μs   (3.917 μs .. 7.566 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, 100 byte chunks
time                 2.851 ms   (2.849 ms .. 2.852 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.852 ms   (2.850 ms .. 2.854 ms)
std dev              6.209 μs   (4.935 μs .. 8.762 μs)

benchmarking brackets/Attoparsec strict-bs 100kb
time                 2.784 ms   (2.782 ms .. 2.786 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.773 ms   (2.770 ms .. 2.775 ms)
std dev              8.555 μs   (7.747 μs .. 9.455 μs)

benchmarking brackets/Cereal strict-bs 100kb
time                 7.379 ms   (7.374 ms .. 7.386 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.377 ms   (7.373 ms .. 7.381 ms)
std dev              11.67 μs   (8.518 μs .. 17.27 μs)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Attoparsec
time                 26.50 ms   (25.91 ms .. 27.20 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.57 ms   (26.18 ms .. 27.42 ms)
std dev              1.191 ms   (495.5 μs .. 2.074 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Binary
time                 23.06 ms   (22.48 ms .. 23.72 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 23.72 ms   (23.20 ms .. 24.34 ms)
std dev              1.257 ms   (883.8 μs .. 1.734 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Cereal
time                 36.66 ms   (35.71 ms .. 37.81 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 36.89 ms   (36.12 ms .. 37.56 ms)
std dev              1.423 ms   (907.7 μs .. 2.278 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking comparison getWord8, 1MB/Attoparsec
time                 106.2 ms   (97.14 ms .. 112.4 ms)
                     0.987 R²   (0.959 R² .. 0.999 R²)
mean                 110.1 ms   (105.2 ms .. 115.1 ms)
std dev              7.603 ms   (4.988 ms .. 12.12 ms)
variance introduced by outliers: 20% (moderately inflated)

benchmarking comparison getWord8, 1MB/Binary
time                 65.31 ms   (62.88 ms .. 67.78 ms)
                     0.995 R²   (0.984 R² .. 0.999 R²)
mean                 66.77 ms   (65.17 ms .. 69.53 ms)
std dev              3.302 ms   (1.381 ms .. 5.649 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking comparison getWord8, 1MB/Cereal
time                 117.3 ms   (111.3 ms .. 123.1 ms)
                     0.993 R²   (0.966 R² .. 1.000 R²)
mean                 120.8 ms   (114.8 ms .. 123.8 ms)
std dev              6.017 ms   (2.673 ms .. 8.780 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 2 bytes
time                 34.14 ms   (33.71 ms .. 34.76 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.56 ms   (34.12 ms .. 35.36 ms)
std dev              1.276 ms   (598.4 μs .. 2.261 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 4 bytes
time                 25.63 ms   (25.02 ms .. 26.23 ms)
                     0.998 R²   (0.997 R² .. 1.000 R²)
mean                 25.83 ms   (25.65 ms .. 26.04 ms)
std dev              424.8 μs   (334.6 μs .. 602.9 μs)

benchmarking getWord8 1MB/chunk size 8 bytes
time                 16.98 ms   (16.96 ms .. 17.01 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 17.00 ms   (16.99 ms .. 17.02 ms)
std dev              24.40 μs   (9.470 μs .. 44.98 μs)

benchmarking getWord8 1MB/chunk size 16 bytes
time                 17.42 ms   (17.25 ms .. 17.57 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 17.47 ms   (17.34 ms .. 17.93 ms)
std dev              499.0 μs   (112.2 μs .. 1.066 ms)

benchmarking getWord8 1MB Applicative/chunk size 2 bytes
time                 33.91 ms   (33.42 ms .. 34.46 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.04 ms   (33.17 ms .. 34.38 ms)
std dev              1.042 ms   (494.0 μs .. 1.799 ms)

benchmarking getWord8 1MB Applicative/chunk size 4 bytes
time                 18.43 ms   (18.13 ms .. 18.79 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 18.46 ms   (18.33 ms .. 18.69 ms)
std dev              397.5 μs   (278.7 μs .. 554.9 μs)

benchmarking getWord8 1MB Applicative/chunk size 8 bytes
time                 11.86 ms   (11.74 ms .. 12.01 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 11.81 ms   (11.73 ms .. 11.89 ms)
std dev              219.3 μs   (169.8 μs .. 295.6 μs)

benchmarking getWord8 1MB Applicative/chunk size 16 bytes
time                 7.446 ms   (7.401 ms .. 7.494 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 7.476 ms   (7.420 ms .. 7.541 ms)
std dev              170.4 μs   (98.71 μs .. 276.6 μs)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7777.1MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.8MB/s
1000MB of bytes read    in 0.413s, at: 2423.4MB/s
1000MB of words written in 0.114s, at: 8787.3MB/s
1000MB of words read    in 0.068s, at: 14705.7MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.6MB/s
1000MB of bytes read    in 0.820s, at: 1220.1MB/s
1000MB of words written in 0.113s, at: 8831.9MB/s
1000MB of words read    in 0.107s, at: 9343.3MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.0 MB/s write,   87.3 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  464.3 MB/s write,  153.1 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  839.7 MB/s write,  326.4 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1399.5 MB/s write,  838.5 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 5a91e0d8b7ef5150b268b52536751f44c4a9a052.log.tmp 5a91e0d8b7ef5150b268b52536751f44c4a9a052.log
