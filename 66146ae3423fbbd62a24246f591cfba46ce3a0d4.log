
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 66146ae3423fbbd62a24246f591cfba46ce3a0d4
Note: checking out '66146ae3423fbbd62a24246f591cfba46ce3a0d4'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 66146ae... Force the Fingerprint constructor to reduce memory usage.

Identifying

git log -n 1
commit 66146ae3423fbbd62a24246f591cfba46ce3a0d4
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Wed Jun 3 11:50:56 2015 -0700

    Force the Fingerprint constructor to reduce memory usage.
    
    The two fields are unpacked, so this saves a couple of words per field
    until the Fingerprint value gets used.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1322       1028      43.7%        421       2771
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1322       1028      43.7%        421       2771

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.5.0...
cabal build
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.5.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
Preprocessing benchmark 'get' for binary-0.7.5.0...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.04 μs   (35.02 μs .. 35.05 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.04 μs   (35.03 μs .. 35.05 μs)
std dev              26.84 ns   (16.32 ns .. 39.03 ns)

benchmarking bounds/[Word8]
time                 42.73 μs   (42.73 μs .. 42.74 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.75 μs   (42.74 μs .. 42.76 μs)
std dev              25.57 ns   (17.96 ns .. 43.30 ns)

benchmarking small ByteString
time                 323.2 ns   (322.9 ns .. 323.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.0 ns   (322.7 ns .. 323.4 ns)
std dev              1.171 ns   (916.1 ps .. 1.520 ns)

benchmarking large ByteString
time                 323.8 ns   (323.6 ns .. 324.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.5 ns   (324.2 ns .. 324.8 ns)
std dev              972.8 ps   (806.9 ps .. 1.132 ns)

benchmarking length-prefixed ByteString
time                 6.701 μs   (6.700 μs .. 6.702 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.701 μs   (6.701 μs .. 6.703 μs)
std dev              3.527 ns   (2.188 ns .. 5.534 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.5 μs   (366.4 μs .. 366.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.5 μs   (366.5 μs .. 366.7 μs)
std dev              323.0 ns   (219.7 ns .. 560.3 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 225.1 μs   (224.7 μs .. 225.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.5 μs   (224.4 μs .. 224.8 μs)
std dev              572.1 ns   (441.4 ns .. 741.4 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.3 μs   (155.1 μs .. 155.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.3 μs   (155.2 μs .. 155.4 μs)
std dev              316.9 ns   (181.3 ns .. 490.3 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.81 μs   (97.67 μs .. 97.90 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.53 μs   (97.36 μs .. 97.68 μs)
std dev              506.4 ns   (437.4 ns .. 583.5 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.806 ms   (5.803 ms .. 5.808 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.810 ms   (5.807 ms .. 5.814 ms)
std dev              9.533 μs   (6.347 μs .. 14.67 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.169 ms   (6.164 ms .. 6.173 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.165 ms   (6.161 ms .. 6.168 ms)
std dev              10.43 μs   (8.305 μs .. 13.54 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.964 ms   (2.956 ms .. 2.971 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.960 ms   (2.957 ms .. 2.964 ms)
std dev              12.26 μs   (10.33 μs .. 15.08 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.870 ms   (2.860 ms .. 2.883 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.885 ms   (2.878 ms .. 2.896 ms)
std dev              28.87 μs   (19.79 μs .. 54.12 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.742 ms   (2.735 ms .. 2.749 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.746 ms   (2.742 ms .. 2.753 ms)
std dev              18.08 μs   (12.12 μs .. 30.08 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.494 ms   (7.488 ms .. 7.500 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.497 ms   (7.492 ms .. 7.500 ms)
std dev              12.23 μs   (8.378 μs .. 20.27 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.14 ms   (22.65 ms .. 23.65 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.56 ms   (23.20 ms .. 23.93 ms)
std dev              817.4 μs   (549.1 μs .. 1.286 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.49 ms   (35.81 ms .. 37.38 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 37.02 ms   (36.53 ms .. 37.80 ms)
std dev              1.251 ms   (665.6 μs .. 1.963 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.43 ms   (25.86 ms .. 27.04 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.55 ms   (26.16 ms .. 27.42 ms)
std dev              1.206 ms   (545.7 μs .. 2.221 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.960 ms   (1.960 ms .. 1.961 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.960 ms   (1.960 ms .. 1.960 ms)
std dev              1.078 μs   (761.4 ns .. 1.549 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.17 ms   (14.16 ms .. 14.17 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.16 ms   (14.16 ms .. 14.16 ms)
std dev              7.200 μs   (4.622 μs .. 11.36 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.349 ms   (2.343 ms .. 2.355 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.333 ms   (2.328 ms .. 2.337 ms)
std dev              14.28 μs   (11.59 μs .. 18.46 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.011 ms   (2.009 ms .. 2.013 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.010 ms   (2.009 ms .. 2.010 ms)
std dev              2.973 μs   (2.436 μs .. 3.706 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.965 ms   (5.961 ms .. 5.969 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.966 ms   (5.964 ms .. 5.967 ms)
std dev              4.274 μs   (3.537 μs .. 5.370 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.634 ms   (7.628 ms .. 7.639 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.639 ms   (7.636 ms .. 7.644 ms)
std dev              10.71 μs   (7.479 μs .. 16.04 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.92 ms   (12.91 ms .. 12.93 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.92 ms   (12.91 ms .. 12.94 ms)
std dev              27.91 μs   (8.875 μs .. 57.79 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 976.5 μs   (975.7 μs .. 977.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 976.9 μs   (976.2 μs .. 977.8 μs)
std dev              2.461 μs   (1.924 μs .. 3.371 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 601.1 μs   (600.9 μs .. 601.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 601.3 μs   (601.0 μs .. 601.7 μs)
std dev              1.139 μs   (865.0 ns .. 1.528 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 503.6 μs   (503.5 μs .. 503.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 503.7 μs   (503.6 μs .. 504.0 μs)
std dev              624.6 ns   (396.2 ns .. 1.036 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.3 μs   (554.2 μs .. 554.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.4 μs   (554.3 μs .. 554.6 μs)
std dev              444.3 ns   (314.5 ns .. 629.4 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.135s, at: 7421.3MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3354.6MB/s
1000MB of bytes read    in 0.413s, at: 2422.3MB/s
1000MB of words written in 0.114s, at: 8792.4MB/s
1000MB of words read    in 0.068s, at: 14717.4MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.4MB/s
1000MB of bytes read    in 0.820s, at: 1219.9MB/s
1000MB of words written in 0.113s, at: 8818.2MB/s
1000MB of words read    in 0.107s, at: 9339.4MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.3 MB/s write,   87.9 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  464.3 MB/s write,  152.4 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  844.2 MB/s write,  326.3 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1406.9 MB/s write,  842.5 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 66146ae3423fbbd62a24246f591cfba46ce3a0d4.log.tmp 66146ae3423fbbd62a24246f591cfba46ce3a0d4.log
