
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 2a84d6707a72fb21891ba842bcfff240d52e16cb
Note: checking out '2a84d6707a72fb21891ba842bcfff240d52e16cb'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 2a84d67... Add roundtrip tests for GHC.Fingerprint.

Identifying

git log -n 1
commit 2a84d6707a72fb21891ba842bcfff240d52e16cb
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Wed Jun 3 11:52:46 2015 -0700

    Add roundtrip tests for GHC.Fingerprint.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1325       1028      43.7%        422       2775
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1325       1028      43.7%        422       2775

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.5.0...
cabal build
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.5.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
Preprocessing benchmark 'get' for binary-0.7.5.0...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.13 μs   (35.11 μs .. 35.15 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.15 μs   (35.14 μs .. 35.16 μs)
std dev              34.00 ns   (28.02 ns .. 42.29 ns)

benchmarking bounds/[Word8]
time                 42.69 μs   (42.68 μs .. 42.70 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.69 μs   (42.69 μs .. 42.69 μs)
std dev              13.77 ns   (10.96 ns .. 18.76 ns)

benchmarking small ByteString
time                 322.2 ns   (321.9 ns .. 322.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 321.4 ns   (321.1 ns .. 321.7 ns)
std dev              1.037 ns   (901.6 ps .. 1.206 ns)

benchmarking large ByteString
time                 326.3 ns   (326.1 ns .. 326.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 326.3 ns   (326.1 ns .. 326.5 ns)
std dev              604.9 ps   (479.7 ps .. 874.7 ps)

benchmarking length-prefixed ByteString
time                 6.712 μs   (6.710 μs .. 6.713 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.710 μs   (6.709 μs .. 6.712 μs)
std dev              3.629 ns   (3.254 ns .. 4.152 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.1 μs   (365.9 μs .. 366.3 μs)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 367.5 μs   (366.1 μs .. 372.8 μs)
std dev              8.764 μs   (105.4 ns .. 18.65 μs)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.7 μs   (224.3 μs .. 225.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.1 μs   (224.0 μs .. 224.4 μs)
std dev              692.0 ns   (594.3 ns .. 791.3 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.9 μs   (154.6 μs .. 155.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.4 μs   (154.3 μs .. 154.6 μs)
std dev              388.6 ns   (261.4 ns .. 645.1 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.02 μs   (96.60 μs .. 97.43 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 96.76 μs   (96.66 μs .. 96.92 μs)
std dev              414.0 ns   (278.3 ns .. 570.7 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.811 ms   (5.810 ms .. 5.813 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.818 ms   (5.816 ms .. 5.822 ms)
std dev              9.788 μs   (6.296 μs .. 15.25 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.180 ms   (6.176 ms .. 6.183 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.172 ms   (6.167 ms .. 6.176 ms)
std dev              12.33 μs   (9.533 μs .. 16.09 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.951 ms   (2.943 ms .. 2.958 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.943 ms   (2.937 ms .. 2.947 ms)
std dev              16.58 μs   (13.47 μs .. 20.56 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.876 ms   (2.866 ms .. 2.886 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.889 ms   (2.881 ms .. 2.899 ms)
std dev              29.26 μs   (20.80 μs .. 40.11 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.728 ms   (2.726 ms .. 2.730 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.730 ms   (2.728 ms .. 2.733 ms)
std dev              8.251 μs   (4.877 μs .. 15.62 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.528 ms   (7.523 ms .. 7.532 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.530 ms   (7.525 ms .. 7.534 ms)
std dev              12.89 μs   (8.808 μs .. 19.43 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.20 ms   (22.70 ms .. 23.76 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.63 ms   (23.28 ms .. 24.02 ms)
std dev              818.4 μs   (563.2 μs .. 1.272 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.56 ms   (35.94 ms .. 37.37 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 37.09 ms   (36.60 ms .. 37.84 ms)
std dev              1.225 ms   (645.4 μs .. 2.092 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.47 ms   (25.96 ms .. 27.01 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.60 ms   (26.22 ms .. 27.48 ms)
std dev              1.204 ms   (530.9 μs .. 2.106 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.960 ms   (1.960 ms .. 1.960 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.960 ms   (1.959 ms .. 1.960 ms)
std dev              682.5 ns   (549.9 ns .. 897.9 ns)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.19 ms   (14.19 ms .. 14.20 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.19 ms   (14.19 ms .. 14.19 ms)
std dev              5.403 μs   (3.904 μs .. 8.349 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.338 ms   (2.333 ms .. 2.345 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.329 ms   (2.324 ms .. 2.334 ms)
std dev              15.67 μs   (12.00 μs .. 21.87 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.007 ms   (2.006 ms .. 2.008 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.007 ms   (2.006 ms .. 2.008 ms)
std dev              2.470 μs   (1.910 μs .. 3.463 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.960 ms   (5.957 ms .. 5.962 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.960 ms   (5.959 ms .. 5.962 ms)
std dev              4.403 μs   (3.512 μs .. 6.025 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.647 ms   (7.637 ms .. 7.657 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.650 ms   (7.646 ms .. 7.654 ms)
std dev              12.73 μs   (11.04 μs .. 15.21 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.92 ms   (12.92 ms .. 12.92 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.93 ms   (12.93 ms .. 12.95 ms)
std dev              21.39 μs   (5.865 μs .. 46.33 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 977.1 μs   (976.2 μs .. 978.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 976.4 μs   (976.0 μs .. 977.0 μs)
std dev              1.761 μs   (1.368 μs .. 2.632 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 602.0 μs   (601.6 μs .. 602.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 601.9 μs   (601.6 μs .. 602.3 μs)
std dev              1.126 μs   (940.0 ns .. 1.531 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 503.7 μs   (503.6 μs .. 503.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 503.7 μs   (503.6 μs .. 503.7 μs)
std dev              220.5 ns   (184.6 ns .. 321.0 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.3 μs   (554.2 μs .. 554.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.3 μs   (554.3 μs .. 554.3 μs)
std dev              124.4 ns   (101.5 ns .. 155.6 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7750.7MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3357.0MB/s
1000MB of bytes read    in 0.413s, at: 2423.6MB/s
1000MB of words written in 0.114s, at: 8784.6MB/s
1000MB of words read    in 0.068s, at: 14699.0MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.6MB/s
1000MB of bytes read    in 0.819s, at: 1220.3MB/s
1000MB of words written in 0.115s, at: 8663.6MB/s
1000MB of words read    in 0.107s, at: 9347.0MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  258.6 MB/s write,   87.7 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  460.5 MB/s write,  152.1 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  839.6 MB/s write,  325.5 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1389.5 MB/s write,  839.1 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 2a84d6707a72fb21891ba842bcfff240d52e16cb.log.tmp 2a84d6707a72fb21891ba842bcfff240d52e16cb.log
