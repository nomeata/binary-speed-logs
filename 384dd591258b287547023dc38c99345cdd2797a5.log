
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 384dd591258b287547023dc38c99345cdd2797a5
Note: checking out '384dd591258b287547023dc38c99345cdd2797a5'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 384dd59... Port ensureN to use withInputChunks.

Identifying

git log -n 1
commit 384dd591258b287547023dc38c99345cdd2797a5
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sat May 30 14:28:10 2015 +0200

    Port ensureN to use withInputChunks.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1303       1026      44.1%        418       2747
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1303       1026      44.1%        418       2747

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.01 μs   (35.00 μs .. 35.02 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.02 μs   (35.01 μs .. 35.03 μs)
std dev              18.67 ns   (13.35 ns .. 26.61 ns)

benchmarking bounds/[Word8]
time                 42.75 μs   (42.74 μs .. 42.76 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.75 μs   (42.74 μs .. 42.75 μs)
std dev              17.02 ns   (13.13 ns .. 23.06 ns)

benchmarking small ByteString
time                 333.1 ns   (332.8 ns .. 333.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 333.7 ns   (333.3 ns .. 333.9 ns)
std dev              986.4 ps   (842.5 ps .. 1.189 ns)

benchmarking large ByteString
time                 324.9 ns   (324.8 ns .. 325.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.5 ns   (324.3 ns .. 324.8 ns)
std dev              793.2 ps   (626.4 ps .. 1.181 ns)

benchmarking length-prefixed ByteString
time                 6.699 μs   (6.698 μs .. 6.700 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.698 μs   (6.698 μs .. 6.699 μs)
std dev              2.722 ns   (2.090 ns .. 3.615 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 364.5 μs   (364.5 μs .. 364.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 364.6 μs   (364.6 μs .. 364.6 μs)
std dev              147.0 ns   (102.6 ns .. 213.8 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 223.7 μs   (223.6 μs .. 223.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 223.8 μs   (223.8 μs .. 223.9 μs)
std dev              112.3 ns   (80.34 ns .. 165.8 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.7 μs   (154.7 μs .. 154.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.5 μs   (154.4 μs .. 154.6 μs)
std dev              250.9 ns   (225.8 ns .. 293.2 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.28 μs   (97.09 μs .. 97.50 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.49 μs   (97.38 μs .. 97.57 μs)
std dev              320.2 ns   (240.6 ns .. 459.7 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 6.160 ms   (6.158 ms .. 6.162 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.170 ms   (6.167 ms .. 6.175 ms)
std dev              11.62 μs   (7.228 μs .. 15.87 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.555 ms   (6.551 ms .. 6.559 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.547 ms   (6.542 ms .. 6.551 ms)
std dev              12.70 μs   (9.601 μs .. 17.49 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.682 ms   (2.681 ms .. 2.683 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.681 ms   (2.680 ms .. 2.683 ms)
std dev              4.373 μs   (3.469 μs .. 5.619 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.746 ms   (2.744 ms .. 2.748 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.748 ms   (2.746 ms .. 2.750 ms)
std dev              5.990 μs   (4.762 μs .. 7.542 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.665 ms   (2.659 ms .. 2.669 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.668 ms   (2.667 ms .. 2.672 ms)
std dev              6.080 μs   (3.295 μs .. 11.44 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 8.147 ms   (8.141 ms .. 8.155 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 8.150 ms   (8.145 ms .. 8.156 ms)
std dev              16.38 μs   (11.80 μs .. 24.56 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.17 ms   (22.71 ms .. 23.72 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.68 ms   (23.31 ms .. 24.03 ms)
std dev              853.6 μs   (581.5 μs .. 1.289 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.80 ms   (35.78 ms .. 37.78 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 36.95 ms   (36.44 ms .. 37.73 ms)
std dev              1.265 ms   (729.8 μs .. 1.935 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.52 ms   (25.98 ms .. 27.06 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.65 ms   (26.26 ms .. 27.61 ms)
std dev              1.207 ms   (543.3 μs .. 2.097 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.959 ms   (1.959 ms .. 1.960 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.959 ms   (1.959 ms .. 1.959 ms)
std dev              966.4 ns   (595.0 ns .. 1.404 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.14 ms   (14.14 ms .. 14.14 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.14 ms   (14.14 ms .. 14.14 ms)
std dev              5.591 μs   (4.146 μs .. 8.105 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.205 ms   (2.199 ms .. 2.212 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.214 ms   (2.210 ms .. 2.217 ms)
std dev              12.02 μs   (9.953 μs .. 15.17 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.992 ms   (1.988 ms .. 1.995 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.994 ms   (1.993 ms .. 1.994 ms)
std dev              2.241 μs   (1.829 μs .. 2.903 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.947 ms   (5.942 ms .. 5.951 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.951 ms   (5.948 ms .. 5.956 ms)
std dev              9.960 μs   (5.895 μs .. 15.63 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.646 ms   (7.636 ms .. 7.655 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.645 ms   (7.642 ms .. 7.649 ms)
std dev              9.931 μs   (8.246 μs .. 12.35 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.86 ms   (12.85 ms .. 12.86 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.86 ms   (12.86 ms .. 12.87 ms)
std dev              15.94 μs   (5.607 μs .. 32.43 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.017 ms   (1.016 ms .. 1.018 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.018 ms   (1.017 ms .. 1.019 ms)
std dev              2.025 μs   (1.691 μs .. 2.448 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 588.7 μs   (588.5 μs .. 588.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 588.5 μs   (588.4 μs .. 588.6 μs)
std dev              364.8 ns   (283.8 ns .. 486.9 ns)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 502.8 μs   (502.7 μs .. 503.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 503.0 μs   (502.9 μs .. 503.2 μs)
std dev              506.1 ns   (425.4 ns .. 605.5 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 553.6 μs   (553.5 μs .. 553.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 553.6 μs   (553.5 μs .. 553.7 μs)
std dev              254.8 ns   (175.2 ns .. 361.9 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7764.0MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.2MB/s
1000MB of bytes read    in 0.413s, at: 2422.5MB/s
1000MB of words written in 0.114s, at: 8801.8MB/s
1000MB of words read    in 0.068s, at: 14726.7MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.820s, at: 1219.9MB/s
1000MB of words written in 0.113s, at: 8828.4MB/s
1000MB of words read    in 0.107s, at: 9345.4MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  261.8 MB/s write,   87.4 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  466.4 MB/s write,  152.6 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  846.6 MB/s write,  325.0 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1406.3 MB/s write,  836.7 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 384dd591258b287547023dc38c99345cdd2797a5.log.tmp 384dd591258b287547023dc38c99345cdd2797a5.log
