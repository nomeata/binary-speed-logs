
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 384dd591258b287547023dc38c99345cdd2797a5
Note: checking out '384dd591258b287547023dc38c99345cdd2797a5'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 384dd59... Port ensureN to use withInputChunks.

Identifying

git log -n 1
commit 384dd591258b287547023dc38c99345cdd2797a5
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sat May 30 14:28:10 2015 +0200

    Port ensureN to use withInputChunks.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1303       1026      44.1%        418       2747
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1303       1026      44.1%        418       2747

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.82 μs   (34.81 μs .. 34.84 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.85 μs   (34.84 μs .. 34.86 μs)
std dev              27.73 ns   (19.46 ns .. 40.85 ns)

benchmarking bounds/[Word8]
time                 42.69 μs   (42.68 μs .. 42.70 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.70 μs   (42.69 μs .. 42.73 μs)
std dev              59.02 ns   (26.72 ns .. 98.95 ns)

benchmarking small ByteString
time                 238.9 ns   (238.6 ns .. 239.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 238.0 ns   (237.7 ns .. 238.3 ns)
std dev              994.5 ps   (895.3 ps .. 1.151 ns)

benchmarking large ByteString
time                 238.3 ns   (238.1 ns .. 238.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 238.4 ns   (238.3 ns .. 238.6 ns)
std dev              491.4 ps   (386.4 ps .. 657.8 ps)

benchmarking length-prefixed ByteString
time                 6.811 μs   (6.809 μs .. 6.813 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.815 μs   (6.814 μs .. 6.816 μs)
std dev              3.186 ns   (2.551 ns .. 4.197 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 364.2 μs   (363.5 μs .. 364.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 363.4 μs   (363.2 μs .. 363.6 μs)
std dev              702.6 ns   (498.4 ns .. 926.1 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 221.6 μs   (221.4 μs .. 221.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 221.8 μs   (221.7 μs .. 221.9 μs)
std dev              272.4 ns   (200.1 ns .. 372.0 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 151.5 μs   (151.0 μs .. 152.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 152.1 μs   (151.8 μs .. 152.2 μs)
std dev              739.5 ns   (579.7 ns .. 898.3 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 93.83 μs   (93.62 μs .. 94.13 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 93.71 μs   (93.66 μs .. 93.81 μs)
std dev              238.2 ns   (142.6 ns .. 424.2 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 6.738 ms   (6.735 ms .. 6.740 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.744 ms   (6.741 ms .. 6.748 ms)
std dev              11.20 μs   (7.563 μs .. 15.63 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 7.082 ms   (7.079 ms .. 7.086 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.079 ms   (7.074 ms .. 7.083 ms)
std dev              12.07 μs   (9.472 μs .. 15.83 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.658 ms   (2.657 ms .. 2.659 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.659 ms   (2.657 ms .. 2.660 ms)
std dev              4.575 μs   (3.688 μs .. 5.790 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.747 ms   (2.744 ms .. 2.749 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.745 ms   (2.743 ms .. 2.747 ms)
std dev              7.018 μs   (5.989 μs .. 8.433 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.655 ms   (2.654 ms .. 2.657 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.656 ms   (2.655 ms .. 2.657 ms)
std dev              4.184 μs   (3.475 μs .. 5.270 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.134 ms   (7.130 ms .. 7.138 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.132 ms   (7.127 ms .. 7.137 ms)
std dev              14.24 μs   (10.87 μs .. 19.83 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.29 ms   (22.71 ms .. 23.97 ms)
                     0.997 R²   (0.996 R² .. 0.999 R²)
mean                 23.86 ms   (23.40 ms .. 24.47 ms)
std dev              1.209 ms   (859.8 μs .. 1.774 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.58 ms   (35.59 ms .. 37.59 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 36.77 ms   (36.28 ms .. 37.63 ms)
std dev              1.271 ms   (683.0 μs .. 2.126 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.43 ms   (25.93 ms .. 26.83 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.55 ms   (26.19 ms .. 27.49 ms)
std dev              1.199 ms   (426.3 μs .. 2.168 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.951 ms   (1.951 ms .. 1.952 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.951 ms   (1.951 ms .. 1.951 ms)
std dev              746.2 ns   (561.6 ns .. 1.125 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 13.84 ms   (13.83 ms .. 13.84 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.84 ms   (13.84 ms .. 13.84 ms)
std dev              5.402 μs   (4.072 μs .. 7.398 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.320 ms   (2.314 ms .. 2.327 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.319 ms   (2.315 ms .. 2.323 ms)
std dev              12.62 μs   (10.08 μs .. 17.78 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.966 ms   (1.965 ms .. 1.966 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.965 ms   (1.964 ms .. 1.965 ms)
std dev              2.044 μs   (1.626 μs .. 2.661 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.807 ms   (5.804 ms .. 5.810 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.806 ms   (5.804 ms .. 5.807 ms)
std dev              4.744 μs   (3.786 μs .. 5.968 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.452 ms   (7.444 ms .. 7.461 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.453 ms   (7.449 ms .. 7.456 ms)
std dev              8.937 μs   (7.274 μs .. 11.80 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.71 ms   (12.71 ms .. 12.72 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.72 ms   (12.72 ms .. 12.74 ms)
std dev              22.26 μs   (5.902 μs .. 43.29 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.011 ms   (1.010 ms .. 1.012 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.011 ms   (1.010 ms .. 1.012 ms)
std dev              3.011 μs   (2.391 μs .. 4.114 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 603.6 μs   (602.8 μs .. 604.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 603.5 μs   (602.9 μs .. 604.2 μs)
std dev              2.027 μs   (1.638 μs .. 2.729 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 503.0 μs   (502.8 μs .. 503.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 503.2 μs   (503.0 μs .. 503.4 μs)
std dev              628.6 ns   (501.9 ns .. 819.4 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 553.0 μs   (553.0 μs .. 553.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 553.0 μs   (553.0 μs .. 553.1 μs)
std dev              168.0 ns   (131.5 ns .. 227.1 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.284s, at: 3520.9MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.300s, at: 3333.1MB/s
1000MB of bytes read    in 0.412s, at: 2427.0MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.072s, at: 13888.1MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.812s, at: 1231.4MB/s
1000MB of bytes read    in 0.820s, at: 1219.4MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.108s, at: 9258.7MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  245.1 MB/s write,   89.0 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  471.7 MB/s write,  155.3 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  862.0 MB/s write,  328.9 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1470.5 MB/s write,  833.3 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 384dd591258b287547023dc38c99345cdd2797a5.log.tmp 384dd591258b287547023dc38c99345cdd2797a5.log
