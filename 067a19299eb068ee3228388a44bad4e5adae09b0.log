
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 067a19299eb068ee3228388a44bad4e5adae09b0
Note: checking out '067a19299eb068ee3228388a44bad4e5adae09b0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 067a192... Fix compilation error.

Identifying

git log -n 1
commit 067a19299eb068ee3228388a44bad4e5adae09b0
Author: Lennart Kolmodin <kolmodin@gmail.com>
Date:   Fri Jan 2 01:33:47 2015 +0300

    Fix compilation error.
    
    arbitrarySizedNatural is only defined when base >= 4.8.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1027      44.0%        410       2744
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1027      44.0%        410       2744

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.2.3...
cabal build
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.2.3...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
Preprocessing benchmark 'get' for binary-0.7.2.3...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.07 μs   (35.02 μs .. 35.14 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.06 μs   (35.02 μs .. 35.21 μs)
std dev              221.1 ns   (32.48 ns .. 465.3 ns)

benchmarking bounds/[Word8]
time                 42.68 μs   (42.67 μs .. 42.69 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.69 μs   (42.68 μs .. 42.70 μs)
std dev              29.05 ns   (23.23 ns .. 37.52 ns)

benchmarking small ByteString
time                 324.4 ns   (324.1 ns .. 324.8 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.0 ns   (324.7 ns .. 325.3 ns)
std dev              939.7 ps   (740.4 ps .. 1.231 ns)

benchmarking large ByteString
time                 321.5 ns   (321.2 ns .. 321.9 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 321.7 ns   (321.5 ns .. 321.9 ns)
std dev              572.2 ps   (467.4 ps .. 753.8 ps)

benchmarking length-prefixed ByteString
time                 6.707 μs   (6.706 μs .. 6.708 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.705 μs   (6.704 μs .. 6.706 μs)
std dev              3.877 ns   (3.151 ns .. 5.561 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 367.6 μs   (367.4 μs .. 367.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 367.2 μs   (366.9 μs .. 367.5 μs)
std dev              918.5 ns   (681.6 ns .. 1.209 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.0 μs   (223.8 μs .. 224.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.0 μs   (223.9 μs .. 224.2 μs)
std dev              566.8 ns   (378.8 ns .. 818.8 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.5 μs   (154.5 μs .. 154.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.3 μs   (154.2 μs .. 154.4 μs)
std dev              261.7 ns   (222.0 ns .. 315.9 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.28 μs   (96.93 μs .. 97.59 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.55 μs   (97.37 μs .. 97.71 μs)
std dev              581.7 ns   (529.8 ns .. 636.8 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.960 ms   (5.950 ms .. 5.972 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.964 ms   (5.959 ms .. 5.976 ms)
std dev              22.15 μs   (12.35 μs .. 40.37 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.161 ms   (6.157 ms .. 6.164 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.162 ms   (6.159 ms .. 6.165 ms)
std dev              8.983 μs   (6.840 μs .. 14.07 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.689 ms   (2.686 ms .. 2.691 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.689 ms   (2.687 ms .. 2.692 ms)
std dev              8.902 μs   (6.294 μs .. 13.28 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.762 ms   (2.760 ms .. 2.764 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.760 ms   (2.758 ms .. 2.762 ms)
std dev              6.972 μs   (4.906 μs .. 10.28 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.687 ms   (2.685 ms .. 2.690 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.691 ms   (2.688 ms .. 2.694 ms)
std dev              8.424 μs   (5.713 μs .. 13.94 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.428 ms   (7.423 ms .. 7.432 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.432 ms   (7.427 ms .. 7.436 ms)
std dev              13.05 μs   (9.449 μs .. 21.39 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 24.03 ms   (23.39 ms .. 24.69 ms)
                     0.996 R²   (0.993 R² .. 0.998 R²)
mean                 24.11 ms   (23.75 ms .. 24.50 ms)
std dev              863.4 μs   (710.8 μs .. 1.065 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 37.31 ms   (35.92 ms .. 38.67 ms)
                     0.997 R²   (0.996 R² .. 0.999 R²)
mean                 36.81 ms   (36.34 ms .. 37.28 ms)
std dev              935.3 μs   (640.9 μs .. 1.414 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.62 ms   (26.11 ms .. 27.12 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.59 ms   (26.22 ms .. 27.45 ms)
std dev              1.167 ms   (542.1 μs .. 2.094 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.893 ms   (1.892 ms .. 1.894 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.893 ms   (1.893 ms .. 1.894 ms)
std dev              1.927 μs   (1.038 μs .. 3.794 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.09 ms   (14.09 ms .. 14.10 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.09 ms   (14.09 ms .. 14.10 ms)
std dev              6.545 μs   (5.156 μs .. 8.375 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.223 ms   (2.221 ms .. 2.225 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.219 ms   (2.216 ms .. 2.223 ms)
std dev              10.76 μs   (7.236 μs .. 18.15 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.875 ms   (1.874 ms .. 1.878 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.877 ms   (1.875 ms .. 1.890 ms)
std dev              13.87 μs   (718.2 ns .. 33.89 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.807 ms   (5.805 ms .. 5.810 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.806 ms   (5.805 ms .. 5.808 ms)
std dev              5.043 μs   (3.861 μs .. 7.653 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.511 ms   (7.508 ms .. 7.516 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.509 ms   (7.508 ms .. 7.512 ms)
std dev              4.522 μs   (2.477 μs .. 8.765 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 10.67 ms   (10.67 ms .. 10.67 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 10.67 ms   (10.67 ms .. 10.67 ms)
std dev              4.096 μs   (3.306 μs .. 5.461 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 955.4 μs   (954.6 μs .. 956.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 955.6 μs   (954.8 μs .. 956.2 μs)
std dev              2.372 μs   (1.897 μs .. 3.246 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 547.2 μs   (545.6 μs .. 549.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 548.9 μs   (547.9 μs .. 550.4 μs)
std dev              4.162 μs   (3.127 μs .. 6.976 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 440.7 μs   (440.7 μs .. 440.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 440.9 μs   (440.8 μs .. 441.1 μs)
std dev              397.4 ns   (302.9 ns .. 531.1 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 491.4 μs   (491.3 μs .. 491.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 491.3 μs   (491.3 μs .. 491.5 μs)
std dev              386.4 ns   (228.4 ns .. 613.1 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7735.3MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.7MB/s
1000MB of bytes read    in 0.413s, at: 2423.6MB/s
1000MB of words written in 0.114s, at: 8777.4MB/s
1000MB of words read    in 0.068s, at: 14684.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.830s, at: 1204.8MB/s
1000MB of words written in 0.113s, at: 8844.1MB/s
1000MB of words read    in 0.107s, at: 9358.6MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.5 MB/s write,   92.1 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  519.1 MB/s write,  159.9 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  931.5 MB/s write,  344.2 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1631.4 MB/s write,  856.0 MB/s read,   0.5 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 067a19299eb068ee3228388a44bad4e5adae09b0.log.tmp 067a19299eb068ee3228388a44bad4e5adae09b0.log
