
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 067a19299eb068ee3228388a44bad4e5adae09b0
Note: checking out '067a19299eb068ee3228388a44bad4e5adae09b0'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 067a192... Fix compilation error.

Identifying

git log -n 1
commit 067a19299eb068ee3228388a44bad4e5adae09b0
Author: Lennart Kolmodin <kolmodin@gmail.com>
Date:   Fri Jan 2 01:33:47 2015 +0300

    Fix compilation error.
    
    arbitrarySizedNatural is only defined when base >= 4.8.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1027      44.0%        410       2744
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1027      44.0%        410       2744

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.2.3...
cabal build
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.2.3...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
Preprocessing benchmark 'get' for binary-0.7.2.3...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.71 μs   (34.67 μs .. 34.74 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.78 μs   (34.71 μs .. 34.95 μs)
std dev              325.7 ns   (81.39 ns .. 605.5 ns)

benchmarking bounds/[Word8]
time                 42.55 μs   (42.54 μs .. 42.56 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.56 μs   (42.55 μs .. 42.59 μs)
std dev              48.44 ns   (19.78 ns .. 91.24 ns)

benchmarking small ByteString
time                 239.1 ns   (239.0 ns .. 239.3 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 239.1 ns   (238.9 ns .. 239.2 ns)
std dev              443.5 ps   (380.5 ps .. 523.8 ps)

benchmarking large ByteString
time                 243.0 ns   (242.8 ns .. 243.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 242.9 ns   (242.8 ns .. 243.1 ns)
std dev              501.7 ps   (435.4 ps .. 596.5 ps)

benchmarking length-prefixed ByteString
time                 6.787 μs   (6.787 μs .. 6.788 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.790 μs   (6.789 μs .. 6.791 μs)
std dev              3.677 ns   (2.336 ns .. 7.127 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 363.3 μs   (363.1 μs .. 363.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 363.7 μs   (363.5 μs .. 363.9 μs)
std dev              586.7 ns   (479.2 ns .. 733.5 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 221.7 μs   (221.4 μs .. 221.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 221.8 μs   (221.7 μs .. 221.8 μs)
std dev              264.4 ns   (156.6 ns .. 387.5 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 151.5 μs   (151.2 μs .. 151.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 150.7 μs   (150.5 μs .. 151.0 μs)
std dev              831.1 ns   (731.8 ns .. 993.7 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 94.75 μs   (94.39 μs .. 95.04 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 94.30 μs   (94.09 μs .. 94.50 μs)
std dev              672.5 ns   (586.0 ns .. 725.3 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.748 ms   (5.744 ms .. 5.751 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.759 ms   (5.755 ms .. 5.764 ms)
std dev              13.90 μs   (9.639 μs .. 20.59 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 5.951 ms   (5.944 ms .. 5.956 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.960 ms   (5.954 ms .. 5.972 ms)
std dev              24.87 μs   (13.60 μs .. 42.40 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.718 ms   (2.714 ms .. 2.724 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.714 ms   (2.712 ms .. 2.716 ms)
std dev              7.406 μs   (5.921 μs .. 9.280 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.780 ms   (2.779 ms .. 2.782 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.780 ms   (2.777 ms .. 2.782 ms)
std dev              9.221 μs   (5.903 μs .. 14.10 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.711 ms   (2.710 ms .. 2.712 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.711 ms   (2.710 ms .. 2.712 ms)
std dev              3.703 μs   (3.002 μs .. 4.721 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.689 ms   (7.686 ms .. 7.693 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.695 ms   (7.691 ms .. 7.700 ms)
std dev              11.86 μs   (8.781 μs .. 17.13 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 24.26 ms   (23.54 ms .. 25.03 ms)
                     0.996 R²   (0.991 R² .. 0.998 R²)
mean                 24.26 ms   (23.75 ms .. 24.67 ms)
std dev              969.5 μs   (760.9 μs .. 1.321 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.91 ms   (36.22 ms .. 37.71 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 36.57 ms   (36.06 ms .. 36.91 ms)
std dev              832.5 μs   (515.9 μs .. 1.241 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.59 ms   (25.98 ms .. 27.18 ms)
                     0.997 R²   (0.993 R² .. 0.999 R²)
mean                 26.73 ms   (26.32 ms .. 27.67 ms)
std dev              1.305 ms   (708.2 μs .. 2.184 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.893 ms   (1.893 ms .. 1.893 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.894 ms   (1.893 ms .. 1.894 ms)
std dev              915.9 ns   (713.7 ns .. 1.207 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 13.80 ms   (13.80 ms .. 13.80 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.79 ms   (13.79 ms .. 13.80 ms)
std dev              6.137 μs   (3.573 μs .. 10.43 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.213 ms   (2.208 ms .. 2.219 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.216 ms   (2.213 ms .. 2.221 ms)
std dev              12.84 μs   (10.03 μs .. 17.68 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.829 ms   (1.829 ms .. 1.830 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.829 ms   (1.829 ms .. 1.829 ms)
std dev              774.8 ns   (626.2 ns .. 977.1 ns)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.621 ms   (5.620 ms .. 5.623 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.619 ms   (5.618 ms .. 5.620 ms)
std dev              3.811 μs   (3.114 μs .. 4.697 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.275 ms   (7.269 ms .. 7.286 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.272 ms   (7.271 ms .. 7.275 ms)
std dev              5.222 μs   (1.999 μs .. 10.35 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 10.45 ms   (10.44 ms .. 10.46 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 10.44 ms   (10.44 ms .. 10.45 ms)
std dev              11.42 μs   (7.187 μs .. 15.60 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 953.5 μs   (952.6 μs .. 954.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 953.8 μs   (953.2 μs .. 954.2 μs)
std dev              1.770 μs   (1.339 μs .. 2.444 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 551.8 μs   (551.1 μs .. 552.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 552.5 μs   (551.8 μs .. 553.1 μs)
std dev              2.163 μs   (1.744 μs .. 2.627 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 441.7 μs   (441.6 μs .. 441.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 441.7 μs   (441.7 μs .. 441.7 μs)
std dev              129.8 ns   (102.0 ns .. 171.6 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 491.2 μs   (491.2 μs .. 491.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 491.2 μs   (491.2 μs .. 491.3 μs)
std dev              147.3 ns   (111.8 ns .. 231.1 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.284s, at: 3520.9MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.300s, at: 3333.1MB/s
1000MB of bytes read    in 0.412s, at: 2427.0MB/s
1000MB of words written in 0.116s, at: 8620.1MB/s
1000MB of words read    in 0.072s, at: 13888.1MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.808s, at: 1237.5MB/s
1000MB of bytes read    in 0.832s, at: 1201.8MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.108s, at: 9258.7MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  240.4 MB/s write,   94.7 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  531.9 MB/s write,  163.4 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  961.5 MB/s write,  352.1 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1666.6 MB/s write,  862.0 MB/s read,   0.5 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 067a19299eb068ee3228388a44bad4e5adae09b0.log.tmp 067a19299eb068ee3228388a44bad4e5adae09b0.log
