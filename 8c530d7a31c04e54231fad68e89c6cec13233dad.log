
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 8c530d7a31c04e54231fad68e89c6cec13233dad
Note: checking out '8c530d7a31c04e54231fad68e89c6cec13233dad'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 8c530d7... Structure the  benchmarks in the the "get" bench in groups.

Identifying

git log -n 1
commit 8c530d7a31c04e54231fad68e89c6cec13233dad
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sun Aug 9 18:14:28 2015 +0200

    Structure the  benchmarks in the the "get" bench in groups.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[3 of 3] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.87 μs   (34.86 μs .. 34.88 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.89 μs   (34.88 μs .. 34.90 μs)
std dev              31.78 ns   (19.23 ns .. 53.10 ns)

benchmarking bounds/[Word8]
time                 42.84 μs   (42.79 μs .. 42.91 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.79 μs   (42.77 μs .. 42.83 μs)
std dev              80.06 ns   (36.61 ns .. 157.2 ns)

benchmarking small ByteString
time                 327.7 ns   (327.3 ns .. 328.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 327.3 ns   (327.0 ns .. 327.6 ns)
std dev              1.029 ns   (838.7 ps .. 1.283 ns)

benchmarking large ByteString
time                 325.9 ns   (325.7 ns .. 326.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 326.6 ns   (326.3 ns .. 327.0 ns)
std dev              1.172 ns   (995.3 ps .. 1.454 ns)

benchmarking length-prefixed ByteString
time                 7.505 μs   (7.503 μs .. 7.507 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.506 μs   (7.505 μs .. 7.508 μs)
std dev              4.947 ns   (2.502 ns .. 8.642 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 364.5 μs   (364.3 μs .. 364.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 365.1 μs   (364.9 μs .. 365.4 μs)
std dev              742.7 ns   (637.3 ns .. 906.5 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.0 μs   (223.9 μs .. 224.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.0 μs   (223.9 μs .. 224.1 μs)
std dev              296.3 ns   (198.3 ns .. 487.0 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.7 μs   (155.4 μs .. 155.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.1 μs   (154.8 μs .. 155.3 μs)
std dev              770.9 ns   (712.3 ns .. 840.9 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.59 μs   (97.08 μs .. 98.32 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.37 μs   (97.14 μs .. 97.75 μs)
std dev              969.6 ns   (665.6 ns .. 1.624 μs)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets/Binary 100kb, one chunk
time                 6.525 ms   (6.378 ms .. 6.812 ms)
                     0.990 R²   (0.977 R² .. 1.000 R²)
mean                 6.462 ms   (6.391 ms .. 6.621 ms)
std dev              285.5 μs   (14.95 μs .. 482.2 μs)
variance introduced by outliers: 21% (moderately inflated)

benchmarking brackets/Binary 100kb, 100 byte chunks
time                 6.758 ms   (6.754 ms .. 6.762 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.749 ms   (6.744 ms .. 6.753 ms)
std dev              12.85 μs   (10.25 μs .. 15.57 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, one chunk
time                 2.790 ms   (2.783 ms .. 2.794 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.779 ms   (2.777 ms .. 2.782 ms)
std dev              7.940 μs   (6.472 μs .. 9.489 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, 100 byte chunks
time                 2.851 ms   (2.843 ms .. 2.871 ms)
                     0.999 R²   (0.996 R² .. 1.000 R²)
mean                 2.855 ms   (2.843 ms .. 2.899 ms)
std dev              69.65 μs   (7.626 μs .. 147.3 μs)
variance introduced by outliers: 11% (moderately inflated)

benchmarking brackets/Attoparsec strict-bs 100kb
time                 2.777 ms   (2.774 ms .. 2.780 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.775 ms   (2.772 ms .. 2.778 ms)
std dev              9.511 μs   (7.932 μs .. 11.87 μs)

benchmarking brackets/Cereal strict-bs 100kb
time                 7.416 ms   (7.401 ms .. 7.426 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.407 ms   (7.400 ms .. 7.414 ms)
std dev              19.66 μs   (14.57 μs .. 27.45 μs)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Attoparsec
time                 26.68 ms   (26.08 ms .. 27.22 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 26.82 ms   (26.46 ms .. 27.67 ms)
std dev              1.188 ms   (525.3 μs .. 2.095 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Binary
time                 23.18 ms   (22.54 ms .. 23.85 ms)
                     0.997 R²   (0.996 R² .. 0.999 R²)
mean                 23.48 ms   (23.02 ms .. 24.00 ms)
std dev              1.051 ms   (721.3 μs .. 1.540 ms)
variance introduced by outliers: 14% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Cereal
time                 36.52 ms   (35.69 ms .. 37.62 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 36.81 ms   (36.04 ms .. 37.50 ms)
std dev              1.475 ms   (996.2 μs .. 2.292 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking comparison getWord8, 1MB/Attoparsec
time                 106.1 ms   (96.19 ms .. 112.3 ms)
                     0.987 R²   (0.952 R² .. 0.999 R²)
mean                 110.1 ms   (105.0 ms .. 114.8 ms)
std dev              7.649 ms   (4.635 ms .. 12.00 ms)
variance introduced by outliers: 20% (moderately inflated)

benchmarking comparison getWord8, 1MB/Binary
time                 65.67 ms   (63.39 ms .. 68.00 ms)
                     0.996 R²   (0.988 R² .. 0.999 R²)
mean                 66.68 ms   (65.45 ms .. 68.69 ms)
std dev              2.650 ms   (1.428 ms .. 4.078 ms)

benchmarking comparison getWord8, 1MB/Cereal
time                 117.9 ms   (112.1 ms .. 123.9 ms)
                     0.993 R²   (0.971 R² .. 1.000 R²)
mean                 122.0 ms   (116.4 ms .. 125.0 ms)
std dev              5.931 ms   (2.844 ms .. 8.999 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 2 bytes
time                 34.04 ms   (33.63 ms .. 34.62 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.50 ms   (34.08 ms .. 35.25 ms)
std dev              1.255 ms   (594.5 μs .. 2.210 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 4 bytes
time                 25.88 ms   (25.23 ms .. 26.45 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 25.96 ms   (25.69 ms .. 26.20 ms)
std dev              571.1 μs   (433.0 μs .. 786.6 μs)

benchmarking getWord8 1MB/chunk size 8 bytes
time                 17.05 ms   (17.03 ms .. 17.08 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 17.06 ms   (17.06 ms .. 17.07 ms)
std dev              19.40 μs   (14.25 μs .. 26.25 μs)

benchmarking getWord8 1MB/chunk size 16 bytes
time                 17.36 ms   (17.22 ms .. 17.54 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 17.41 ms   (17.29 ms .. 18.06 ms)
std dev              493.4 μs   (117.9 μs .. 1.044 ms)

benchmarking getWord8 1MB Applicative/chunk size 2 bytes
time                 33.85 ms   (33.40 ms .. 34.42 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 33.91 ms   (33.02 ms .. 34.24 ms)
std dev              971.3 μs   (401.1 μs .. 1.847 ms)

benchmarking getWord8 1MB Applicative/chunk size 4 bytes
time                 18.44 ms   (18.18 ms .. 18.73 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 18.44 ms   (18.35 ms .. 18.66 ms)
std dev              312.0 μs   (179.6 μs .. 512.6 μs)

benchmarking getWord8 1MB Applicative/chunk size 8 bytes
time                 11.86 ms   (11.73 ms .. 12.00 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 11.82 ms   (11.74 ms .. 11.91 ms)
std dev              222.5 μs   (175.8 μs .. 312.0 μs)

benchmarking getWord8 1MB Applicative/chunk size 16 bytes
time                 7.424 ms   (7.380 ms .. 7.483 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 7.414 ms   (7.331 ms .. 7.478 ms)
std dev              206.3 μs   (134.0 μs .. 306.4 μs)
variance introduced by outliers: 11% (moderately inflated)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7778.9MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.6MB/s
1000MB of bytes read    in 0.413s, at: 2422.4MB/s
1000MB of words written in 0.114s, at: 8797.2MB/s
1000MB of words read    in 0.068s, at: 14742.1MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.7MB/s
1000MB of bytes read    in 0.819s, at: 1220.3MB/s
1000MB of words written in 0.113s, at: 8836.5MB/s
1000MB of words read    in 0.107s, at: 9337.5MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  261.1 MB/s write,   87.5 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  467.0 MB/s write,  153.6 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  846.0 MB/s write,  327.0 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1410.6 MB/s write,  841.7 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 8c530d7a31c04e54231fad68e89c6cec13233dad.log.tmp 8c530d7a31c04e54231fad68e89c6cec13233dad.log
