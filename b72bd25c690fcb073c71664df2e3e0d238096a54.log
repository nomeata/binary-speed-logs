
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout b72bd25c690fcb073c71664df2e3e0d238096a54
Note: checking out 'b72bd25c690fcb073c71664df2e3e0d238096a54'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at b72bd25... Compile benchmark get with -Wall.

Identifying

git log -n 1
commit b72bd25c690fcb073c71664df2e3e0d238096a54
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Thu Aug 13 22:12:11 2015 +0200

    Compile benchmark get with -Wall.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[3 of 3] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.95 μs   (34.94 μs .. 34.97 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.01 μs   (34.98 μs .. 35.07 μs)
std dev              131.7 ns   (81.21 ns .. 190.4 ns)

benchmarking bounds/[Word8]
time                 43.06 μs   (43.03 μs .. 43.10 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 43.06 μs   (43.04 μs .. 43.08 μs)
std dev              75.84 ns   (55.13 ns .. 103.4 ns)

benchmarking small ByteString
time                 328.1 ns   (327.7 ns .. 328.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 327.8 ns   (327.7 ns .. 328.0 ns)
std dev              632.1 ps   (521.1 ps .. 836.1 ps)

benchmarking large ByteString
time                 329.8 ns   (329.5 ns .. 330.3 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 329.7 ns   (329.5 ns .. 330.0 ns)
std dev              819.3 ps   (660.9 ps .. 1.101 ns)

benchmarking length-prefixed ByteString
time                 7.513 μs   (7.510 μs .. 7.519 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.516 μs   (7.512 μs .. 7.521 μs)
std dev              15.37 ns   (9.256 ns .. 20.82 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 365.5 μs   (364.4 μs .. 367.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 364.8 μs   (364.6 μs .. 365.4 μs)
std dev              1.018 μs   (269.6 ns .. 2.116 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 225.0 μs   (224.6 μs .. 225.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.4 μs   (224.3 μs .. 224.7 μs)
std dev              643.2 ns   (537.2 ns .. 838.9 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.9 μs   (154.8 μs .. 155.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.9 μs   (154.9 μs .. 155.0 μs)
std dev              176.2 ns   (128.0 ns .. 260.2 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.03 μs   (96.94 μs .. 97.14 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.15 μs   (97.11 μs .. 97.19 μs)
std dev              144.2 ns   (108.6 ns .. 190.8 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets/Binary 100kb, one chunk
time                 6.388 ms   (6.385 ms .. 6.390 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.398 ms   (6.394 ms .. 6.404 ms)
std dev              13.34 μs   (8.879 μs .. 19.21 μs)

benchmarking brackets/Binary 100kb, 100 byte chunks
time                 6.821 ms   (6.760 ms .. 7.014 ms)
                     0.993 R²   (0.976 R² .. 1.000 R²)
mean                 6.807 ms   (6.756 ms .. 7.004 ms)
std dev              278.2 μs   (12.57 μs .. 581.1 μs)
variance introduced by outliers: 18% (moderately inflated)

benchmarking brackets/Attoparsec lazy-bs 100kb, one chunk
time                 2.779 ms   (2.778 ms .. 2.781 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.780 ms   (2.779 ms .. 2.782 ms)
std dev              5.652 μs   (4.495 μs .. 7.181 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, 100 byte chunks
time                 2.851 ms   (2.848 ms .. 2.854 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.845 ms   (2.842 ms .. 2.848 ms)
std dev              9.050 μs   (7.609 μs .. 11.94 μs)

benchmarking brackets/Attoparsec strict-bs 100kb
time                 2.767 ms   (2.764 ms .. 2.772 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.775 ms   (2.772 ms .. 2.778 ms)
std dev              8.935 μs   (7.505 μs .. 11.66 μs)

benchmarking brackets/Cereal strict-bs 100kb
time                 7.432 ms   (7.394 ms .. 7.560 ms)
                     0.993 R²   (0.978 R² .. 1.000 R²)
mean                 7.471 ms   (7.407 ms .. 7.715 ms)
std dev              342.1 μs   (19.31 μs .. 714.4 μs)
variance introduced by outliers: 22% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Attoparsec
time                 26.40 ms   (25.98 ms .. 26.79 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.73 ms   (26.39 ms .. 27.66 ms)
std dev              1.179 ms   (363.1 μs .. 2.170 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Binary
time                 23.18 ms   (22.66 ms .. 23.81 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 23.89 ms   (23.43 ms .. 24.56 ms)
std dev              1.247 ms   (893.2 μs .. 1.681 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Cereal
time                 36.72 ms   (35.79 ms .. 37.80 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 36.95 ms   (36.09 ms .. 37.60 ms)
std dev              1.401 ms   (924.1 μs .. 2.172 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking comparison getWord8, 1MB/Attoparsec
time                 106.6 ms   (97.99 ms .. 113.0 ms)
                     0.988 R²   (0.960 R² .. 0.999 R²)
mean                 110.1 ms   (105.7 ms .. 115.3 ms)
std dev              7.471 ms   (4.457 ms .. 11.87 ms)
variance introduced by outliers: 20% (moderately inflated)

benchmarking comparison getWord8, 1MB/Binary
time                 65.46 ms   (62.52 ms .. 68.51 ms)
                     0.995 R²   (0.984 R² .. 0.999 R²)
mean                 67.19 ms   (65.65 ms .. 70.20 ms)
std dev              3.352 ms   (1.530 ms .. 5.759 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking comparison getWord8, 1MB/Cereal
time                 118.2 ms   (111.0 ms .. 123.9 ms)
                     0.993 R²   (0.970 R² .. 1.000 R²)
mean                 121.5 ms   (115.5 ms .. 124.5 ms)
std dev              6.074 ms   (2.632 ms .. 8.770 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 2 bytes
time                 34.25 ms   (33.83 ms .. 34.82 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.65 ms   (34.22 ms .. 35.68 ms)
std dev              1.229 ms   (588.5 μs .. 2.104 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 4 bytes
time                 25.84 ms   (25.26 ms .. 26.48 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 26.04 ms   (25.87 ms .. 26.24 ms)
std dev              408.5 μs   (299.3 μs .. 538.9 μs)

benchmarking getWord8 1MB/chunk size 8 bytes
time                 17.55 ms   (17.52 ms .. 17.57 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 17.57 ms   (17.56 ms .. 17.60 ms)
std dev              38.08 μs   (10.45 μs .. 74.91 μs)

benchmarking getWord8 1MB/chunk size 16 bytes
time                 17.50 ms   (17.34 ms .. 17.66 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 17.54 ms   (17.42 ms .. 17.95 ms)
std dev              492.6 μs   (116.4 μs .. 1.014 ms)

benchmarking getWord8 1MB Applicative/chunk size 2 bytes
time                 34.09 ms   (33.55 ms .. 34.69 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.08 ms   (33.34 ms .. 34.47 ms)
std dev              1.035 ms   (511.3 μs .. 1.752 ms)

benchmarking getWord8 1MB Applicative/chunk size 4 bytes
time                 18.58 ms   (18.26 ms .. 18.98 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 18.61 ms   (18.47 ms .. 18.81 ms)
std dev              392.9 μs   (260.1 μs .. 557.0 μs)

benchmarking getWord8 1MB Applicative/chunk size 8 bytes
time                 12.44 ms   (12.28 ms .. 12.61 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 12.38 ms   (12.30 ms .. 12.48 ms)
std dev              240.4 μs   (190.4 μs .. 344.8 μs)

benchmarking getWord8 1MB Applicative/chunk size 16 bytes
time                 7.530 ms   (7.482 ms .. 7.580 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 7.544 ms   (7.483 ms .. 7.610 ms)
std dev              171.9 μs   (95.41 μs .. 270.1 μs)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.131s, at: 7654.9MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.3MB/s
1000MB of bytes read    in 0.420s, at: 2381.8MB/s
1000MB of words written in 0.114s, at: 8782.4MB/s
1000MB of words read    in 0.068s, at: 14689.5MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.819s, at: 1220.3MB/s
1000MB of words written in 0.113s, at: 8829.9MB/s
1000MB of words read    in 0.107s, at: 9342.0MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.0 MB/s write,   87.2 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  464.1 MB/s write,  153.0 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  841.6 MB/s write,  326.0 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1402.9 MB/s write,  836.1 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv b72bd25c690fcb073c71664df2e3e0d238096a54.log.tmp b72bd25c690fcb073c71664df2e3e0d238096a54.log
