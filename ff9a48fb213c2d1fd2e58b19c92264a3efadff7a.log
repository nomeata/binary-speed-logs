
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout ff9a48fb213c2d1fd2e58b19c92264a3efadff7a
Note: checking out 'ff9a48fb213c2d1fd2e58b19c92264a3efadff7a'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at ff9a48f... Bump version to 0.7.3.0

Identifying

git log -n 1
commit ff9a48fb213c2d1fd2e58b19c92264a3efadff7a
Author: Lennart Kolmodin <kolmodin@gmail.com>
Date:   Thu Jan 22 18:14:21 2015 +0100

    Bump version to 0.7.3.0

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1027      44.0%        410       2744
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1027      44.0%        410       2744

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.3.0...
cabal build
Building binary-0.7.3.0...
Preprocessing library binary-0.7.3.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.3.0...
Preprocessing benchmark 'builder' for binary-0.7.3.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.3.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.3.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.3.0...
Preprocessing library binary-0.7.3.0...
In-place registering binary-0.7.3.0...
Preprocessing benchmark 'builder' for binary-0.7.3.0...
Preprocessing benchmark 'get' for binary-0.7.3.0...
Preprocessing benchmark 'bench' for binary-0.7.3.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.11 μs   (35.09 μs .. 35.13 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.14 μs   (35.12 μs .. 35.17 μs)
std dev              73.96 ns   (48.65 ns .. 101.9 ns)

benchmarking bounds/[Word8]
time                 42.73 μs   (42.70 μs .. 42.76 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.72 μs   (42.71 μs .. 42.74 μs)
std dev              42.82 ns   (34.17 ns .. 53.69 ns)

benchmarking small ByteString
time                 331.6 ns   (331.3 ns .. 331.8 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 331.7 ns   (331.5 ns .. 331.9 ns)
std dev              700.0 ps   (607.5 ps .. 808.7 ps)

benchmarking large ByteString
time                 330.1 ns   (329.9 ns .. 330.3 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 330.6 ns   (330.3 ns .. 331.1 ns)
std dev              1.178 ns   (642.0 ps .. 1.843 ns)

benchmarking length-prefixed ByteString
time                 6.727 μs   (6.722 μs .. 6.734 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.726 μs   (6.724 μs .. 6.730 μs)
std dev              9.493 ns   (6.123 ns .. 13.24 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 367.1 μs   (366.7 μs .. 367.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.7 μs   (366.7 μs .. 366.9 μs)
std dev              363.8 ns   (250.4 ns .. 520.0 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.7 μs   (224.5 μs .. 224.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.1 μs   (224.0 μs .. 224.3 μs)
std dev              579.3 ns   (450.0 ns .. 740.3 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.3 μs   (154.1 μs .. 154.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.3 μs   (154.3 μs .. 154.5 μs)
std dev              341.8 ns   (215.7 ns .. 496.9 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.87 μs   (97.75 μs .. 97.95 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.48 μs   (97.30 μs .. 97.62 μs)
std dev              526.4 ns   (481.1 ns .. 574.1 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.957 ms   (5.946 ms .. 5.976 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.964 ms   (5.957 ms .. 5.982 ms)
std dev              27.98 μs   (14.50 μs .. 56.06 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.155 ms   (6.152 ms .. 6.157 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.156 ms   (6.154 ms .. 6.159 ms)
std dev              8.318 μs   (5.431 μs .. 13.88 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.683 ms   (2.680 ms .. 2.685 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.686 ms   (2.684 ms .. 2.688 ms)
std dev              6.665 μs   (5.566 μs .. 8.151 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.757 ms   (2.755 ms .. 2.759 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.753 ms   (2.750 ms .. 2.755 ms)
std dev              7.629 μs   (5.854 μs .. 10.76 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.684 ms   (2.682 ms .. 2.686 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.681 ms   (2.679 ms .. 2.682 ms)
std dev              4.787 μs   (4.096 μs .. 5.699 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.408 ms   (7.403 ms .. 7.415 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.410 ms   (7.406 ms .. 7.413 ms)
std dev              11.42 μs   (8.676 μs .. 16.65 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 24.19 ms   (23.40 ms .. 24.92 ms)
                     0.997 R²   (0.993 R² .. 0.999 R²)
mean                 24.17 ms   (23.74 ms .. 24.51 ms)
std dev              856.3 μs   (637.7 μs .. 1.142 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.46 ms   (35.79 ms .. 37.38 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 36.97 ms   (36.48 ms .. 37.82 ms)
std dev              1.242 ms   (749.7 μs .. 2.066 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.34 ms   (25.83 ms .. 26.93 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.49 ms   (26.10 ms .. 27.43 ms)
std dev              1.215 ms   (536.7 μs .. 2.215 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.893 ms   (1.892 ms .. 1.893 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.893 ms   (1.892 ms .. 1.893 ms)
std dev              791.6 ns   (654.0 ns .. 1.003 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.03 ms   (14.03 ms .. 14.03 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.03 ms   (14.03 ms .. 14.04 ms)
std dev              9.105 μs   (3.734 μs .. 17.53 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.212 ms   (2.207 ms .. 2.216 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.215 ms   (2.212 ms .. 2.219 ms)
std dev              13.39 μs   (10.71 μs .. 18.46 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.876 ms   (1.875 ms .. 1.876 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.875 ms   (1.875 ms .. 1.876 ms)
std dev              1.362 μs   (946.6 ns .. 2.143 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.773 ms   (5.771 ms .. 5.774 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.773 ms   (5.772 ms .. 5.776 ms)
std dev              6.566 μs   (3.993 μs .. 10.79 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.456 ms   (7.454 ms .. 7.459 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.457 ms   (7.456 ms .. 7.458 ms)
std dev              3.711 μs   (2.444 μs .. 5.819 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 10.60 ms   (10.59 ms .. 10.60 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 10.60 ms   (10.60 ms .. 10.60 ms)
std dev              5.122 μs   (3.380 μs .. 7.983 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 953.8 μs   (953.1 μs .. 954.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 954.5 μs   (954.0 μs .. 955.1 μs)
std dev              1.828 μs   (1.507 μs .. 2.255 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 545.7 μs   (545.0 μs .. 546.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 545.7 μs   (545.2 μs .. 546.6 μs)
std dev              2.410 μs   (1.764 μs .. 3.578 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 441.3 μs   (441.1 μs .. 441.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 441.2 μs   (441.1 μs .. 441.4 μs)
std dev              436.8 ns   (319.3 ns .. 612.0 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 491.5 μs   (491.4 μs .. 491.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 491.7 μs   (491.6 μs .. 492.1 μs)
std dev              729.4 ns   (330.9 ns .. 1.378 μs)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.130s, at: 7677.6MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.2MB/s
1000MB of bytes read    in 0.413s, at: 2423.7MB/s
1000MB of words written in 0.114s, at: 8794.8MB/s
1000MB of words read    in 0.068s, at: 14709.8MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.813s, at: 1229.6MB/s
1000MB of bytes read    in 0.830s, at: 1204.9MB/s
1000MB of words written in 0.113s, at: 8838.8MB/s
1000MB of words read    in 0.107s, at: 9348.4MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.9 MB/s write,   91.9 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  518.7 MB/s write,  159.8 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  932.3 MB/s write,  344.2 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1629.6 MB/s write,  855.6 MB/s read,   0.5 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv ff9a48fb213c2d1fd2e58b19c92264a3efadff7a.log.tmp ff9a48fb213c2d1fd2e58b19c92264a3efadff7a.log
