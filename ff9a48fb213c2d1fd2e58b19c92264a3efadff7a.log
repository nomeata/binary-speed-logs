
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout ff9a48fb213c2d1fd2e58b19c92264a3efadff7a
Note: checking out 'ff9a48fb213c2d1fd2e58b19c92264a3efadff7a'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at ff9a48f... Bump version to 0.7.3.0

Identifying

git log -n 1
commit ff9a48fb213c2d1fd2e58b19c92264a3efadff7a
Author: Lennart Kolmodin <kolmodin@gmail.com>
Date:   Thu Jan 22 18:14:21 2015 +0100

    Bump version to 0.7.3.0

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1027      44.0%        410       2744
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1027      44.0%        410       2744

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.3.0...
cabal build
Building binary-0.7.3.0...
Preprocessing library binary-0.7.3.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.3.0...
Preprocessing benchmark 'builder' for binary-0.7.3.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.3.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.3.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.3.0...
Preprocessing library binary-0.7.3.0...
In-place registering binary-0.7.3.0...
Preprocessing benchmark 'builder' for binary-0.7.3.0...
Preprocessing benchmark 'get' for binary-0.7.3.0...
Preprocessing benchmark 'bench' for binary-0.7.3.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.77 μs   (34.75 μs .. 34.79 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.81 μs   (34.79 μs .. 34.86 μs)
std dev              102.7 ns   (38.04 ns .. 189.6 ns)

benchmarking bounds/[Word8]
time                 42.57 μs   (42.54 μs .. 42.62 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.55 μs   (42.54 μs .. 42.57 μs)
std dev              40.46 ns   (18.16 ns .. 83.23 ns)

benchmarking small ByteString
time                 237.6 ns   (237.5 ns .. 237.7 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 237.9 ns   (237.7 ns .. 238.0 ns)
std dev              474.7 ps   (402.9 ps .. 549.1 ps)

benchmarking large ByteString
time                 237.9 ns   (237.8 ns .. 238.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 238.1 ns   (238.0 ns .. 238.3 ns)
std dev              509.3 ps   (379.2 ps .. 803.2 ps)

benchmarking length-prefixed ByteString
time                 6.776 μs   (6.773 μs .. 6.781 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.786 μs   (6.781 μs .. 6.793 μs)
std dev              19.12 ns   (13.34 ns .. 26.26 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 363.1 μs   (362.9 μs .. 363.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 362.8 μs   (362.7 μs .. 363.0 μs)
std dev              557.0 ns   (424.5 ns .. 776.6 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 221.1 μs   (221.0 μs .. 221.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 221.0 μs   (220.9 μs .. 221.1 μs)
std dev              284.4 ns   (227.5 ns .. 368.9 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 151.6 μs   (151.3 μs .. 151.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 151.2 μs   (151.1 μs .. 151.3 μs)
std dev              358.0 ns   (254.4 ns .. 525.2 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 94.06 μs   (93.91 μs .. 94.18 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 94.01 μs   (93.89 μs .. 94.10 μs)
std dev              340.9 ns   (267.2 ns .. 414.4 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.743 ms   (5.740 ms .. 5.746 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.753 ms   (5.750 ms .. 5.759 ms)
std dev              12.53 μs   (9.208 μs .. 17.08 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 5.945 ms   (5.943 ms .. 5.948 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.947 ms   (5.944 ms .. 5.950 ms)
std dev              8.600 μs   (6.131 μs .. 13.28 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.706 ms   (2.705 ms .. 2.707 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.708 ms   (2.706 ms .. 2.710 ms)
std dev              5.976 μs   (4.139 μs .. 9.686 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.777 ms   (2.768 ms .. 2.782 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.778 ms   (2.776 ms .. 2.780 ms)
std dev              7.178 μs   (5.183 μs .. 12.19 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.701 ms   (2.696 ms .. 2.704 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.704 ms   (2.703 ms .. 2.705 ms)
std dev              4.072 μs   (3.106 μs .. 5.758 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.686 ms   (7.682 ms .. 7.690 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.688 ms   (7.683 ms .. 7.694 ms)
std dev              14.32 μs   (10.08 μs .. 22.37 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 24.77 ms   (24.21 ms .. 25.42 ms)
                     0.996 R²   (0.992 R² .. 0.999 R²)
mean                 24.42 ms   (23.97 ms .. 24.79 ms)
std dev              967.5 μs   (735.4 μs .. 1.259 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.74 ms   (35.90 ms .. 37.69 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 36.67 ms   (36.05 ms .. 37.02 ms)
std dev              923.3 μs   (605.1 μs .. 1.396 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.66 ms   (26.02 ms .. 27.34 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 26.72 ms   (26.34 ms .. 27.67 ms)
std dev              1.243 ms   (603.4 μs .. 2.249 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.892 ms   (1.891 ms .. 1.892 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.892 ms   (1.892 ms .. 1.893 ms)
std dev              963.5 ns   (756.9 ns .. 1.201 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 13.74 ms   (13.73 ms .. 13.74 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.75 ms   (13.74 ms .. 13.75 ms)
std dev              6.327 μs   (4.797 μs .. 8.629 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.218 ms   (2.206 ms .. 2.228 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 2.212 ms   (2.208 ms .. 2.216 ms)
std dev              13.85 μs   (11.92 μs .. 16.51 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.823 ms   (1.818 ms .. 1.826 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.825 ms   (1.825 ms .. 1.826 ms)
std dev              739.9 ns   (617.1 ns .. 917.8 ns)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.599 ms   (5.598 ms .. 5.601 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.597 ms   (5.595 ms .. 5.598 ms)
std dev              3.581 μs   (2.879 μs .. 4.768 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.248 ms   (7.246 ms .. 7.250 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.255 ms   (7.253 ms .. 7.258 ms)
std dev              6.846 μs   (4.707 μs .. 10.02 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 10.42 ms   (10.41 ms .. 10.42 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 10.42 ms   (10.42 ms .. 10.42 ms)
std dev              6.623 μs   (4.354 μs .. 11.16 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 952.3 μs   (950.9 μs .. 953.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 954.7 μs   (954.1 μs .. 955.4 μs)
std dev              2.039 μs   (1.604 μs .. 2.598 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 549.2 μs   (548.7 μs .. 549.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 549.9 μs   (549.2 μs .. 550.6 μs)
std dev              2.405 μs   (1.950 μs .. 3.154 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 440.7 μs   (440.3 μs .. 441.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 441.1 μs   (441.1 μs .. 441.2 μs)
std dev              196.4 ns   (106.9 ns .. 351.4 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 490.7 μs   (490.2 μs .. 491.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 491.0 μs   (491.0 μs .. 491.1 μs)
std dev              117.6 ns   (94.52 ns .. 154.5 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.284s, at: 3520.9MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.300s, at: 3333.1MB/s
1000MB of bytes read    in 0.412s, at: 2427.0MB/s
1000MB of words written in 0.116s, at: 8620.1MB/s
1000MB of words read    in 0.072s, at: 13888.1MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.808s, at: 1237.5MB/s
1000MB of bytes read    in 0.832s, at: 1201.8MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.108s, at: 9258.7MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  247.5 MB/s write,   94.3 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  531.9 MB/s write,  163.4 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  961.5 MB/s write,  352.1 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1666.6 MB/s write,  862.0 MB/s read,   0.5 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv ff9a48fb213c2d1fd2e58b19c92264a3efadff7a.log.tmp ff9a48fb213c2d1fd2e58b19c92264a3efadff7a.log
