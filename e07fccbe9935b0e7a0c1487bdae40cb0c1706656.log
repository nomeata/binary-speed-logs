
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout e07fccbe9935b0e7a0c1487bdae40cb0c1706656
Note: checking out 'e07fccbe9935b0e7a0c1487bdae40cb0c1706656'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at e07fccb... Conditionally include Control.Applicative for older GHC versions.

Identifying

git log -n 1
commit e07fccbe9935b0e7a0c1487bdae40cb0c1706656
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Fri Aug 14 22:22:42 2015 +0200

    Conditionally include Control.Applicative for older GHC versions.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
[ 1 of 11] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 2 of 11] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder.o )
[ 3 of 11] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 4 of 11] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Put.o )
[ 5 of 11] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get.o )
[ 6 of 11] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Class.o )
[ 7 of 11] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Generic.o )
[ 8 of 11] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary.o )
[ 9 of 11] Compiling GenericsBenchTypes ( benchmarks/GenericsBenchTypes.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchTypes.o )
[10 of 11] Compiling GenericsBenchCache ( benchmarks/GenericsBenchCache.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchCache.o )
[11 of 11] Compiling Main             ( benchmarks/GenericsBench.hs, dist/build/generics-bench/generics-bench-tmp/Main.o )
Linking dist/build/generics-bench/generics-bench ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[3 of 3] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 4 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.90 μs   (34.89 μs .. 34.92 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.98 μs   (34.91 μs .. 35.34 μs)
std dev              465.1 ns   (29.93 ns .. 1.064 μs)

benchmarking bounds/[Word8]
time                 42.93 μs   (42.90 μs .. 42.95 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.92 μs   (42.90 μs .. 42.98 μs)
std dev              108.3 ns   (40.45 ns .. 217.1 ns)

benchmarking small ByteString
time                 327.1 ns   (326.8 ns .. 327.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 326.7 ns   (326.4 ns .. 327.0 ns)
std dev              975.0 ps   (826.8 ps .. 1.150 ns)

benchmarking large ByteString
time                 325.9 ns   (325.7 ns .. 326.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 326.3 ns   (326.1 ns .. 326.5 ns)
std dev              770.2 ps   (666.3 ps .. 882.0 ps)

benchmarking length-prefixed ByteString
time                 7.488 μs   (7.487 μs .. 7.490 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.489 μs   (7.489 μs .. 7.491 μs)
std dev              3.130 ns   (2.181 ns .. 4.674 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.0 μs   (365.7 μs .. 366.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.5 μs   (366.3 μs .. 366.8 μs)
std dev              835.8 ns   (642.2 ns .. 1.083 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.3 μs   (224.1 μs .. 224.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.3 μs   (224.2 μs .. 224.5 μs)
std dev              494.7 ns   (384.4 ns .. 649.3 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.0 μs   (154.0 μs .. 154.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.1 μs   (154.1 μs .. 154.1 μs)
std dev              149.4 ns   (119.0 ns .. 204.3 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.34 μs   (97.31 μs .. 97.37 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.40 μs   (97.38 μs .. 97.42 μs)
std dev              65.99 ns   (52.86 ns .. 92.71 ns)

Benchmark builder: FINISH
Benchmark generics-bench: RUNNING...
creating cabal cache file... done
benchmarking encode
time                 45.26 ms   (44.53 ms .. 45.95 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 45.13 ms   (44.69 ms .. 46.00 ms)
std dev              1.227 ms   (507.3 μs .. 2.063 ms)

benchmarking decode
time                 17.72 ms   (17.37 ms .. 18.09 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 17.57 ms   (17.10 ms .. 17.99 ms)
std dev              1.095 ms   (743.2 μs .. 1.635 ms)
variance introduced by outliers: 25% (moderately inflated)

benchmarking decode null
time                 11.14 ms   (10.92 ms .. 11.38 ms)
                     0.996 R²   (0.993 R² .. 0.998 R²)
mean                 11.06 ms   (10.90 ms .. 11.29 ms)
std dev              515.8 μs   (402.5 μs .. 732.0 μs)
variance introduced by outliers: 20% (moderately inflated)

benchmarking embarrassment/read
time                 641.3 ms   (635.7 ms .. 646.1 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 637.7 ms   (636.8 ms .. 638.5 ms)
std dev              1.214 ms   (0.0 s .. 1.338 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking embarrassment/show
time                 36.02 ms   (35.67 ms .. 36.37 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 35.91 ms   (35.66 ms .. 36.14 ms)
std dev              476.2 μs   (360.8 μs .. 618.9 μs)

Benchmark generics-bench: FINISH
Benchmark get: RUNNING...
benchmarking brackets/Binary 100kb, one chunk
time                 6.393 ms   (6.390 ms .. 6.395 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.401 ms   (6.398 ms .. 6.406 ms)
std dev              12.33 μs   (8.181 μs .. 17.54 μs)

benchmarking brackets/Binary 100kb, 100 byte chunks
time                 6.762 ms   (6.759 ms .. 6.765 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.757 ms   (6.753 ms .. 6.761 ms)
std dev              10.56 μs   (8.204 μs .. 13.79 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, one chunk
time                 2.786 ms   (2.783 ms .. 2.789 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.775 ms   (2.772 ms .. 2.778 ms)
std dev              8.454 μs   (7.552 μs .. 9.552 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, 100 byte chunks
time                 2.847 ms   (2.846 ms .. 2.849 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.851 ms   (2.850 ms .. 2.853 ms)
std dev              6.052 μs   (4.685 μs .. 8.596 μs)

benchmarking brackets/Attoparsec strict-bs 100kb
time                 2.769 ms   (2.765 ms .. 2.774 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.766 ms   (2.765 ms .. 2.768 ms)
std dev              5.331 μs   (3.925 μs .. 7.574 μs)

benchmarking brackets/Cereal strict-bs 100kb
time                 7.411 ms   (7.400 ms .. 7.420 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.404 ms   (7.398 ms .. 7.412 ms)
std dev              20.44 μs   (15.26 μs .. 28.10 μs)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Attoparsec
time                 26.74 ms   (26.32 ms .. 27.17 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.75 ms   (26.37 ms .. 27.65 ms)
std dev              1.199 ms   (480.7 μs .. 2.242 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Binary
time                 23.14 ms   (22.53 ms .. 23.73 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 23.50 ms   (23.03 ms .. 24.00 ms)
std dev              1.108 ms   (744.2 μs .. 1.656 ms)
variance introduced by outliers: 14% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Cereal
time                 36.50 ms   (35.73 ms .. 37.64 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 36.84 ms   (35.95 ms .. 37.55 ms)
std dev              1.464 ms   (1.005 ms .. 2.285 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking comparison getWord8, 1MB/Attoparsec
time                 106.4 ms   (95.61 ms .. 112.7 ms)
                     0.987 R²   (0.951 R² .. 0.999 R²)
mean                 110.2 ms   (105.6 ms .. 114.6 ms)
std dev              7.615 ms   (4.691 ms .. 12.04 ms)
variance introduced by outliers: 20% (moderately inflated)

benchmarking comparison getWord8, 1MB/Binary
time                 65.77 ms   (62.94 ms .. 67.95 ms)
                     0.995 R²   (0.985 R² .. 0.999 R²)
mean                 67.41 ms   (65.92 ms .. 70.31 ms)
std dev              3.294 ms   (1.513 ms .. 5.247 ms)

benchmarking comparison getWord8, 1MB/Cereal
time                 117.7 ms   (111.6 ms .. 123.4 ms)
                     0.993 R²   (0.970 R² .. 1.000 R²)
mean                 121.7 ms   (117.0 ms .. 124.9 ms)
std dev              5.830 ms   (2.567 ms .. 8.325 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 2 bytes
time                 34.21 ms   (33.78 ms .. 34.74 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.63 ms   (34.21 ms .. 35.54 ms)
std dev              1.242 ms   (618.5 μs .. 2.089 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 4 bytes
time                 25.78 ms   (25.29 ms .. 26.27 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 25.97 ms   (25.68 ms .. 26.22 ms)
std dev              579.2 μs   (438.2 μs .. 798.5 μs)

benchmarking getWord8 1MB/chunk size 8 bytes
time                 16.91 ms   (16.89 ms .. 16.93 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 16.93 ms   (16.92 ms .. 16.94 ms)
std dev              21.12 μs   (8.485 μs .. 40.04 μs)

benchmarking getWord8 1MB/chunk size 16 bytes
time                 17.46 ms   (17.30 ms .. 17.61 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 17.45 ms   (17.32 ms .. 17.85 ms)
std dev              499.5 μs   (130.0 μs .. 973.9 μs)

benchmarking getWord8 1MB Applicative/chunk size 2 bytes
time                 33.95 ms   (33.49 ms .. 34.52 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.01 ms   (33.37 ms .. 34.35 ms)
std dev              972.8 μs   (442.6 μs .. 1.641 ms)

benchmarking getWord8 1MB Applicative/chunk size 4 bytes
time                 18.40 ms   (18.11 ms .. 18.76 ms)
                     0.998 R²   (0.997 R² .. 1.000 R²)
mean                 18.42 ms   (18.31 ms .. 18.60 ms)
std dev              329.4 μs   (209.2 μs .. 491.9 μs)

benchmarking getWord8 1MB Applicative/chunk size 8 bytes
time                 11.81 ms   (11.68 ms .. 11.97 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 11.76 ms   (11.67 ms .. 11.85 ms)
std dev              232.1 μs   (182.9 μs .. 334.3 μs)

benchmarking getWord8 1MB Applicative/chunk size 16 bytes
time                 7.483 ms   (7.437 ms .. 7.547 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 7.474 ms   (7.400 ms .. 7.543 ms)
std dev              217.3 μs   (138.0 μs .. 326.6 μs)
variance introduced by outliers: 11% (moderately inflated)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7751.1MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.9MB/s
1000MB of bytes read    in 0.413s, at: 2423.3MB/s
1000MB of words written in 0.114s, at: 8793.6MB/s
1000MB of words read    in 0.068s, at: 14683.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.6MB/s
1000MB of bytes read    in 0.820s, at: 1220.1MB/s
1000MB of words written in 0.113s, at: 8838.6MB/s
1000MB of words read    in 0.107s, at: 9342.7MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.8 MB/s write,   87.3 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  465.0 MB/s write,  152.9 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  844.9 MB/s write,  326.1 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1400.4 MB/s write,  837.0 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv e07fccbe9935b0e7a0c1487bdae40cb0c1706656.log.tmp e07fccbe9935b0e7a0c1487bdae40cb0c1706656.log
