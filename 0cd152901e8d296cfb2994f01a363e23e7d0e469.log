
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 0cd152901e8d296cfb2994f01a363e23e7d0e469
Note: checking out '0cd152901e8d296cfb2994f01a363e23e7d0e469'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 0cd1529... Merge branch 'instance-fingerprint' of https://github.com/mboes/binary

Identifying

git log -n 1
commit 0cd152901e8d296cfb2994f01a363e23e7d0e469
Merge: 86e4c9a 551515e
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Wed Jun 3 11:37:38 2015 -0700

    Merge branch 'instance-fingerprint' of https://github.com/mboes/binary

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1322       1028      43.7%        421       2771
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1322       1028      43.7%        421       2771

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.5.0...
cabal build
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.5.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
Preprocessing benchmark 'get' for binary-0.7.5.0...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.06 μs   (35.04 μs .. 35.07 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.08 μs   (35.07 μs .. 35.09 μs)
std dev              24.00 ns   (14.91 ns .. 39.45 ns)

benchmarking bounds/[Word8]
time                 42.85 μs   (42.79 μs .. 42.97 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.83 μs   (42.78 μs .. 43.01 μs)
std dev              278.0 ns   (70.62 ns .. 567.7 ns)

benchmarking small ByteString
time                 327.8 ns   (327.7 ns .. 328.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 327.4 ns   (327.2 ns .. 327.5 ns)
std dev              588.9 ps   (504.7 ps .. 702.8 ps)

benchmarking large ByteString
time                 324.7 ns   (324.6 ns .. 324.8 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.5 ns   (324.4 ns .. 324.6 ns)
std dev              367.4 ps   (278.2 ps .. 496.2 ps)

benchmarking length-prefixed ByteString
time                 6.712 μs   (6.711 μs .. 6.713 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.713 μs   (6.711 μs .. 6.719 μs)
std dev              9.594 ns   (3.700 ns .. 18.64 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 367.1 μs   (366.6 μs .. 368.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 367.1 μs   (366.5 μs .. 369.7 μs)
std dev              3.454 μs   (178.0 ns .. 7.932 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.7 μs   (224.4 μs .. 225.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.5 μs   (224.4 μs .. 224.6 μs)
std dev              490.0 ns   (405.0 ns .. 640.0 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.7 μs   (154.6 μs .. 154.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.7 μs   (154.6 μs .. 154.7 μs)
std dev              209.6 ns   (133.4 ns .. 334.4 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.71 μs   (97.42 μs .. 97.90 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.18 μs   (97.06 μs .. 97.36 μs)
std dev              484.0 ns   (384.0 ns .. 571.7 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.815 ms   (5.812 ms .. 5.817 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.819 ms   (5.816 ms .. 5.826 ms)
std dev              12.97 μs   (7.662 μs .. 22.51 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.176 ms   (6.173 ms .. 6.180 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.174 ms   (6.171 ms .. 6.178 ms)
std dev              10.54 μs   (8.815 μs .. 13.25 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.894 ms   (2.889 ms .. 2.899 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.897 ms   (2.892 ms .. 2.901 ms)
std dev              15.77 μs   (11.79 μs .. 22.26 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.893 ms   (2.879 ms .. 2.909 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.899 ms   (2.890 ms .. 2.910 ms)
std dev              33.55 μs   (27.92 μs .. 41.94 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.747 ms   (2.740 ms .. 2.756 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.747 ms   (2.742 ms .. 2.752 ms)
std dev              16.57 μs   (13.50 μs .. 20.80 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.512 ms   (7.506 ms .. 7.518 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.516 ms   (7.511 ms .. 7.521 ms)
std dev              13.51 μs   (9.799 μs .. 19.40 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.17 ms   (22.66 ms .. 23.68 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.65 ms   (23.28 ms .. 24.03 ms)
std dev              859.8 μs   (598.8 μs .. 1.344 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.61 ms   (35.93 ms .. 37.57 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 37.11 ms   (36.59 ms .. 37.90 ms)
std dev              1.241 ms   (689.2 μs .. 1.952 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.44 ms   (25.92 ms .. 26.98 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.58 ms   (26.19 ms .. 27.56 ms)
std dev              1.195 ms   (542.4 μs .. 2.147 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.953 ms   (1.952 ms .. 1.954 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.953 ms   (1.953 ms .. 1.953 ms)
std dev              1.272 μs   (986.7 ns .. 1.685 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.17 ms   (14.17 ms .. 14.17 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.17 ms   (14.17 ms .. 14.18 ms)
std dev              5.313 μs   (2.826 μs .. 8.746 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.344 ms   (2.339 ms .. 2.348 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.334 ms   (2.327 ms .. 2.337 ms)
std dev              15.15 μs   (10.22 μs .. 25.54 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.007 ms   (2.003 ms .. 2.010 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.009 ms   (2.008 ms .. 2.011 ms)
std dev              4.725 μs   (3.691 μs .. 6.262 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.976 ms   (5.968 ms .. 5.985 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.971 ms   (5.969 ms .. 5.974 ms)
std dev              6.807 μs   (4.989 μs .. 10.71 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.650 ms   (7.642 ms .. 7.657 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.661 ms   (7.655 ms .. 7.678 ms)
std dev              25.07 μs   (8.803 μs .. 49.68 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.96 ms   (12.95 ms .. 12.97 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.98 ms   (12.97 ms .. 13.00 ms)
std dev              30.98 μs   (18.97 μs .. 51.78 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 977.0 μs   (976.2 μs .. 978.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 977.0 μs   (976.4 μs .. 977.8 μs)
std dev              2.364 μs   (1.730 μs .. 3.882 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 601.4 μs   (600.9 μs .. 601.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 600.3 μs   (599.8 μs .. 600.8 μs)
std dev              1.906 μs   (1.525 μs .. 2.448 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 503.6 μs   (503.4 μs .. 503.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 503.9 μs   (503.6 μs .. 505.1 μs)
std dev              1.443 μs   (332.3 ns .. 3.468 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.6 μs   (554.2 μs .. 555.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.4 μs   (554.2 μs .. 554.7 μs)
std dev              678.0 ns   (419.4 ns .. 951.7 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7775.3MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.6MB/s
1000MB of bytes read    in 0.413s, at: 2423.2MB/s
1000MB of words written in 0.115s, at: 8684.0MB/s
1000MB of words read    in 0.068s, at: 14703.7MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.7MB/s
1000MB of bytes read    in 0.820s, at: 1220.1MB/s
1000MB of words written in 0.113s, at: 8837.8MB/s
1000MB of words read    in 0.107s, at: 9344.8MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  257.3 MB/s write,   87.6 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  462.1 MB/s write,  151.7 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  842.8 MB/s write,  324.9 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1395.9 MB/s write,  837.8 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 0cd152901e8d296cfb2994f01a363e23e7d0e469.log.tmp 0cd152901e8d296cfb2994f01a363e23e7d0e469.log
