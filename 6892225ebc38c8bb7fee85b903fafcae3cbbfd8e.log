
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 6892225ebc38c8bb7fee85b903fafcae3cbbfd8e
Note: checking out '6892225ebc38c8bb7fee85b903fafcae3cbbfd8e'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 6892225... Merge pull request #77 from mboes/ghc710-warnings

Identifying

git log -n 1
commit 6892225ebc38c8bb7fee85b903fafcae3cbbfd8e
Merge: 8debedd 5714385
Author: Lennart Kolmodin <kolmodin@gmail.com>
Date:   Sun Jun 7 20:17:31 2015 -0700

    Merge pull request #77 from mboes/ghc710-warnings
    
    Fix AMP and Safe Haskell related warnings in GHC 7.10.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1328       1028      43.6%        421       2777
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1328       1028      43.6%        421       2777

Building

cabal configure --enable-benchmarks
Warning: The package list for 'hackage.haskell.org' is 22 days old.
Run 'cabal update' to get the latest list of available packages.
Resolving dependencies...
Configuring binary-0.7.5.0...
cabal build
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.5.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
Preprocessing benchmark 'get' for binary-0.7.5.0...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.73 μs   (34.71 μs .. 34.74 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.76 μs   (34.75 μs .. 34.78 μs)
std dev              52.06 ns   (26.86 ns .. 99.65 ns)

benchmarking bounds/[Word8]
time                 42.59 μs   (42.58 μs .. 42.62 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.58 μs   (42.58 μs .. 42.59 μs)
std dev              24.19 ns   (12.53 ns .. 46.54 ns)

benchmarking small ByteString
time                 239.9 ns   (239.6 ns .. 240.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 239.5 ns   (239.3 ns .. 239.7 ns)
std dev              580.0 ps   (507.7 ps .. 674.5 ps)

benchmarking large ByteString
time                 240.3 ns   (240.1 ns .. 240.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 240.6 ns   (240.4 ns .. 240.8 ns)
std dev              532.9 ps   (433.0 ps .. 743.5 ps)

benchmarking length-prefixed ByteString
time                 6.790 μs   (6.789 μs .. 6.792 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.794 μs   (6.793 μs .. 6.795 μs)
std dev              3.082 ns   (2.530 ns .. 3.817 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 362.8 μs   (362.5 μs .. 363.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 362.7 μs   (362.6 μs .. 362.8 μs)
std dev              407.5 ns   (351.0 ns .. 481.4 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 221.3 μs   (221.2 μs .. 221.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 221.2 μs   (221.2 μs .. 221.2 μs)
std dev              124.9 ns   (86.63 ns .. 196.8 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 151.7 μs   (151.6 μs .. 151.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 151.7 μs   (151.6 μs .. 151.9 μs)
std dev              443.0 ns   (322.0 ns .. 629.4 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 94.27 μs   (94.06 μs .. 94.41 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 94.21 μs   (94.09 μs .. 94.31 μs)
std dev              384.8 ns   (303.7 ns .. 460.0 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.844 ms   (5.842 ms .. 5.847 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.850 ms   (5.848 ms .. 5.856 ms)
std dev              9.974 μs   (6.062 μs .. 16.53 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.193 ms   (6.190 ms .. 6.197 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.187 ms   (6.183 ms .. 6.191 ms)
std dev              11.50 μs   (9.223 μs .. 14.43 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.654 ms   (2.653 ms .. 2.655 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.654 ms   (2.652 ms .. 2.655 ms)
std dev              3.811 μs   (3.079 μs .. 4.824 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.724 ms   (2.723 ms .. 2.727 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.727 ms   (2.726 ms .. 2.729 ms)
std dev              5.533 μs   (4.537 μs .. 6.902 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.650 ms   (2.649 ms .. 2.651 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.651 ms   (2.649 ms .. 2.652 ms)
std dev              3.935 μs   (3.220 μs .. 4.800 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.213 ms   (7.209 ms .. 7.218 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.210 ms   (7.206 ms .. 7.214 ms)
std dev              11.18 μs   (7.337 μs .. 17.61 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.26 ms   (22.68 ms .. 23.94 ms)
                     0.997 R²   (0.996 R² .. 0.999 R²)
mean                 23.82 ms   (23.37 ms .. 24.42 ms)
std dev              1.187 ms   (795.5 μs .. 1.668 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.44 ms   (35.63 ms .. 37.33 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 36.62 ms   (36.16 ms .. 37.34 ms)
std dev              1.211 ms   (675.1 μs .. 2.052 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.40 ms   (25.89 ms .. 26.85 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.59 ms   (26.18 ms .. 27.52 ms)
std dev              1.246 ms   (426.9 μs .. 2.256 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.949 ms   (1.949 ms .. 1.950 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.949 ms   (1.949 ms .. 1.950 ms)
std dev              777.6 ns   (556.4 ns .. 1.143 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 13.79 ms   (13.79 ms .. 13.80 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.79 ms   (13.79 ms .. 13.79 ms)
std dev              4.178 μs   (3.327 μs .. 5.675 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.218 ms   (2.214 ms .. 2.223 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.217 ms   (2.214 ms .. 2.220 ms)
std dev              11.40 μs   (9.533 μs .. 14.55 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.952 ms   (1.951 ms .. 1.953 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.953 ms   (1.953 ms .. 1.954 ms)
std dev              2.433 μs   (1.927 μs .. 3.205 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.762 ms   (5.759 ms .. 5.765 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.763 ms   (5.762 ms .. 5.765 ms)
std dev              4.506 μs   (3.509 μs .. 6.131 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.387 ms   (7.383 ms .. 7.391 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.389 ms   (7.387 ms .. 7.391 ms)
std dev              5.424 μs   (4.330 μs .. 7.898 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.65 ms   (12.65 ms .. 12.66 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.66 ms   (12.66 ms .. 12.68 ms)
std dev              26.98 μs   (7.390 μs .. 50.05 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.019 ms   (1.019 ms .. 1.019 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.019 ms   (1.019 ms .. 1.020 ms)
std dev              1.868 μs   (1.461 μs .. 2.660 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 601.5 μs   (601.1 μs .. 602.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 604.8 μs   (603.7 μs .. 606.2 μs)
std dev              4.186 μs   (3.354 μs .. 5.335 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 503.4 μs   (503.2 μs .. 503.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 503.2 μs   (503.0 μs .. 503.5 μs)
std dev              817.0 ns   (482.9 ns .. 1.280 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 553.0 μs   (553.0 μs .. 553.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 553.0 μs   (552.9 μs .. 553.1 μs)
std dev              236.0 ns   (171.8 ns .. 333.2 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.280s, at: 3571.2MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.296s, at: 3378.2MB/s
1000MB of bytes read    in 0.416s, at: 2403.7MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.072s, at: 13887.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.808s, at: 1237.5MB/s
1000MB of bytes read    in 0.824s, at: 1213.5MB/s
1000MB of words written in 0.112s, at: 8928.0MB/s
1000MB of words read    in 0.112s, at: 8928.0MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  242.7 MB/s write,   89.9 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  471.7 MB/s write,  155.3 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  862.0 MB/s write,  328.9 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1470.5 MB/s write,  862.0 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 6892225ebc38c8bb7fee85b903fafcae3cbbfd8e.log.tmp 6892225ebc38c8bb7fee85b903fafcae3cbbfd8e.log
