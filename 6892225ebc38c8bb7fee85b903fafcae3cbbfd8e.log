
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 6892225ebc38c8bb7fee85b903fafcae3cbbfd8e
Note: checking out '6892225ebc38c8bb7fee85b903fafcae3cbbfd8e'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 6892225... Merge pull request #77 from mboes/ghc710-warnings

Identifying

git log -n 1
commit 6892225ebc38c8bb7fee85b903fafcae3cbbfd8e
Merge: 8debedd 5714385
Author: Lennart Kolmodin <kolmodin@gmail.com>
Date:   Sun Jun 7 20:17:31 2015 -0700

    Merge pull request #77 from mboes/ghc710-warnings
    
    Fix AMP and Safe Haskell related warnings in GHC 7.10.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1328       1028      43.6%        421       2777
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1328       1028      43.6%        421       2777

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.5.0...
cabal build
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.5.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
Preprocessing benchmark 'get' for binary-0.7.5.0...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.03 μs   (35.03 μs .. 35.04 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.06 μs   (35.05 μs .. 35.07 μs)
std dev              25.08 ns   (21.12 ns .. 30.52 ns)

benchmarking bounds/[Word8]
time                 42.66 μs   (42.65 μs .. 42.67 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.67 μs   (42.66 μs .. 42.67 μs)
std dev              18.61 ns   (14.47 ns .. 24.71 ns)

benchmarking small ByteString
time                 323.3 ns   (323.1 ns .. 323.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.4 ns   (323.3 ns .. 323.6 ns)
std dev              409.0 ps   (333.4 ps .. 498.1 ps)

benchmarking large ByteString
time                 325.2 ns   (325.1 ns .. 325.3 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.5 ns   (325.4 ns .. 325.7 ns)
std dev              500.7 ps   (431.3 ps .. 593.7 ps)

benchmarking length-prefixed ByteString
time                 6.698 μs   (6.696 μs .. 6.699 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.698 μs   (6.698 μs .. 6.699 μs)
std dev              2.173 ns   (1.793 ns .. 2.662 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 367.7 μs   (367.7 μs .. 367.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 367.8 μs   (367.8 μs .. 367.9 μs)
std dev              191.1 ns   (149.3 ns .. 244.0 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.8 μs   (224.5 μs .. 225.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.4 μs   (224.3 μs .. 224.6 μs)
std dev              617.4 ns   (544.9 ns .. 742.8 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.8 μs   (154.4 μs .. 155.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.6 μs   (154.5 μs .. 154.7 μs)
std dev              297.0 ns   (137.9 ns .. 489.7 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 96.79 μs   (96.72 μs .. 96.84 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 96.73 μs   (96.70 μs .. 96.76 μs)
std dev              109.4 ns   (86.77 ns .. 135.8 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.804 ms   (5.802 ms .. 5.806 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.811 ms   (5.808 ms .. 5.815 ms)
std dev              10.58 μs   (5.867 μs .. 16.87 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.175 ms   (6.172 ms .. 6.179 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.169 ms   (6.165 ms .. 6.172 ms)
std dev              11.36 μs   (8.853 μs .. 15.30 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.930 ms   (2.925 ms .. 2.935 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.923 ms   (2.916 ms .. 2.930 ms)
std dev              22.26 μs   (16.90 μs .. 29.41 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.946 ms   (2.936 ms .. 2.959 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.925 ms   (2.914 ms .. 2.934 ms)
std dev              34.08 μs   (27.01 μs .. 46.61 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.736 ms   (2.731 ms .. 2.741 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.734 ms   (2.730 ms .. 2.739 ms)
std dev              14.89 μs   (10.94 μs .. 23.52 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.507 ms   (7.503 ms .. 7.512 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.508 ms   (7.503 ms .. 7.512 ms)
std dev              12.48 μs   (8.934 μs .. 18.58 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.11 ms   (22.60 ms .. 23.65 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.60 ms   (23.26 ms .. 24.02 ms)
std dev              857.4 μs   (594.0 μs .. 1.252 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.57 ms   (35.86 ms .. 37.45 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 37.01 ms   (36.52 ms .. 37.83 ms)
std dev              1.255 ms   (700.4 μs .. 2.153 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.43 ms   (25.90 ms .. 26.96 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.53 ms   (26.12 ms .. 27.34 ms)
std dev              1.187 ms   (542.8 μs .. 2.063 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.959 ms   (1.958 ms .. 1.959 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.959 ms   (1.958 ms .. 1.959 ms)
std dev              652.3 ns   (545.5 ns .. 819.3 ns)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.13 ms   (14.13 ms .. 14.13 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.12 ms   (14.12 ms .. 14.13 ms)
std dev              4.551 μs   (3.342 μs .. 6.182 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.338 ms   (2.334 ms .. 2.342 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.327 ms   (2.323 ms .. 2.331 ms)
std dev              11.77 μs   (9.668 μs .. 14.44 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.009 ms   (2.008 ms .. 2.010 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.009 ms   (2.008 ms .. 2.009 ms)
std dev              2.079 μs   (1.701 μs .. 2.727 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.958 ms   (5.955 ms .. 5.960 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.958 ms   (5.957 ms .. 5.960 ms)
std dev              3.890 μs   (2.914 μs .. 5.247 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.629 ms   (7.621 ms .. 7.637 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.630 ms   (7.627 ms .. 7.633 ms)
std dev              8.586 μs   (7.316 μs .. 10.53 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.92 ms   (12.91 ms .. 12.92 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.93 ms   (12.92 ms .. 12.95 ms)
std dev              29.43 μs   (5.845 μs .. 58.59 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 976.7 μs   (976.3 μs .. 977.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 976.7 μs   (976.4 μs .. 977.1 μs)
std dev              1.180 μs   (964.0 ns .. 1.477 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 596.0 μs   (595.7 μs .. 596.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 595.7 μs   (595.3 μs .. 596.1 μs)
std dev              1.420 μs   (1.139 μs .. 1.879 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 503.2 μs   (503.1 μs .. 503.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 503.3 μs   (503.1 μs .. 503.4 μs)
std dev              480.0 ns   (335.2 ns .. 709.7 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 553.9 μs   (553.8 μs .. 553.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 553.9 μs   (553.9 μs .. 553.9 μs)
std dev              125.6 ns   (103.6 ns .. 151.4 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7771.0MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.9MB/s
1000MB of bytes read    in 0.413s, at: 2423.1MB/s
1000MB of words written in 0.114s, at: 8794.6MB/s
1000MB of words read    in 0.068s, at: 14734.3MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.6MB/s
1000MB of bytes read    in 0.820s, at: 1220.0MB/s
1000MB of words written in 0.113s, at: 8833.7MB/s
1000MB of words read    in 0.107s, at: 9346.3MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.9 MB/s write,   87.9 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  466.7 MB/s write,  152.3 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  846.0 MB/s write,  326.6 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1406.1 MB/s write,  843.2 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 6892225ebc38c8bb7fee85b903fafcae3cbbfd8e.log.tmp 6892225ebc38c8bb7fee85b903fafcae3cbbfd8e.log
