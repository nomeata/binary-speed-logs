
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 112a1a5d6d8069cd227d51d99a142da64f0a61aa
Note: checking out '112a1a5d6d8069cd227d51d99a142da64f0a61aa'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 112a1a5... Mark INLINEs with a phase to remove warning.

Identifying

git log -n 1
commit 112a1a5d6d8069cd227d51d99a142da64f0a61aa
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Thu Jul 30 18:56:51 2015 +0200

    Mark INLINEs with a phase to remove warning.
    
    The warnings are like this;
    Rule "getWord16le/readN" may never fire
      because ‘getWord16le’ might inline first
    
    The RULES do the same thing as the inlining, so either one is fine.
    Specifying a phase removes the warning.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.08 μs   (35.07 μs .. 35.10 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.11 μs   (35.10 μs .. 35.13 μs)
std dev              45.98 ns   (34.07 ns .. 69.98 ns)

benchmarking bounds/[Word8]
time                 42.69 μs   (42.68 μs .. 42.71 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.68 μs   (42.68 μs .. 42.69 μs)
std dev              25.53 ns   (17.62 ns .. 41.17 ns)

benchmarking small ByteString
time                 323.9 ns   (323.6 ns .. 324.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.7 ns   (323.5 ns .. 323.9 ns)
std dev              726.3 ps   (618.8 ps .. 836.7 ps)

benchmarking large ByteString
time                 327.2 ns   (327.1 ns .. 327.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 327.9 ns   (327.7 ns .. 328.3 ns)
std dev              987.0 ps   (765.4 ps .. 1.325 ns)

benchmarking length-prefixed ByteString
time                 7.528 μs   (7.526 μs .. 7.530 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.527 μs   (7.525 μs .. 7.528 μs)
std dev              4.547 ns   (3.288 ns .. 6.401 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 364.8 μs   (363.8 μs .. 365.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 364.1 μs   (363.9 μs .. 364.6 μs)
std dev              863.5 ns   (120.5 ns .. 1.553 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.8 μs   (224.6 μs .. 225.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.4 μs   (224.3 μs .. 224.6 μs)
std dev              451.1 ns   (381.5 ns .. 552.4 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.3 μs   (154.0 μs .. 154.8 μs)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 154.6 μs   (154.3 μs .. 156.2 μs)
std dev              1.720 μs   (180.2 ns .. 4.189 μs)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.14 μs   (97.12 μs .. 97.17 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.15 μs   (97.13 μs .. 97.17 μs)
std dev              54.01 ns   (40.31 ns .. 80.99 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.831 ms   (5.828 ms .. 5.833 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.835 ms   (5.833 ms .. 5.840 ms)
std dev              10.16 μs   (7.262 μs .. 15.54 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.213 ms   (6.210 ms .. 6.218 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.206 ms   (6.202 ms .. 6.210 ms)
std dev              12.56 μs   (10.15 μs .. 16.81 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.685 ms   (2.684 ms .. 2.686 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.685 ms   (2.684 ms .. 2.686 ms)
std dev              4.413 μs   (3.536 μs .. 5.846 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.753 ms   (2.750 ms .. 2.756 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.756 ms   (2.754 ms .. 2.758 ms)
std dev              7.126 μs   (5.294 μs .. 10.96 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.671 ms   (2.669 ms .. 2.673 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.669 ms   (2.668 ms .. 2.671 ms)
std dev              4.279 μs   (3.556 μs .. 5.351 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 8.181 ms   (8.176 ms .. 8.185 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 8.185 ms   (8.182 ms .. 8.190 ms)
std dev              12.08 μs   (8.795 μs .. 16.69 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.03 ms   (22.50 ms .. 23.57 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.51 ms   (23.14 ms .. 23.84 ms)
std dev              849.0 μs   (574.0 μs .. 1.335 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.63 ms   (35.57 ms .. 37.70 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 36.77 ms   (36.24 ms .. 37.64 ms)
std dev              1.297 ms   (728.4 μs .. 2.247 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.39 ms   (25.86 ms .. 27.03 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.50 ms   (26.14 ms .. 27.39 ms)
std dev              1.207 ms   (539.6 μs .. 2.246 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.959 ms   (1.958 ms .. 1.959 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.959 ms   (1.958 ms .. 1.959 ms)
std dev              1.349 μs   (719.2 ns .. 2.277 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.14 ms   (14.14 ms .. 14.15 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.14 ms   (14.14 ms .. 14.14 ms)
std dev              4.891 μs   (3.423 μs .. 7.420 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.222 ms   (2.220 ms .. 2.225 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.223 ms   (2.221 ms .. 2.226 ms)
std dev              8.455 μs   (6.253 μs .. 12.98 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.002 ms   (2.001 ms .. 2.002 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.003 ms   (2.002 ms .. 2.005 ms)
std dev              3.763 μs   (2.669 μs .. 5.890 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.940 ms   (5.937 ms .. 5.943 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.937 ms   (5.935 ms .. 5.939 ms)
std dev              7.007 μs   (5.525 μs .. 8.970 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.645 ms   (7.627 ms .. 7.660 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.642 ms   (7.635 ms .. 7.649 ms)
std dev              20.57 μs   (18.37 μs .. 22.92 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.91 ms   (12.90 ms .. 12.92 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.92 ms   (12.91 ms .. 12.93 ms)
std dev              18.92 μs   (7.952 μs .. 31.46 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.010 ms   (1.009 ms .. 1.011 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.005 ms   (1.001 ms .. 1.007 ms)
std dev              11.01 μs   (8.110 μs .. 14.05 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 590.7 μs   (589.8 μs .. 592.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 596.4 μs   (594.9 μs .. 597.8 μs)
std dev              4.875 μs   (4.450 μs .. 5.293 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 504.3 μs   (503.9 μs .. 504.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 504.0 μs   (503.7 μs .. 504.3 μs)
std dev              951.3 ns   (800.0 ns .. 1.244 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 553.8 μs   (553.6 μs .. 554.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 553.7 μs   (553.7 μs .. 553.8 μs)
std dev              217.2 ns   (175.1 ns .. 268.7 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.132s, at: 7562.2MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.8MB/s
1000MB of bytes read    in 0.413s, at: 2423.8MB/s
1000MB of words written in 0.114s, at: 8801.2MB/s
1000MB of words read    in 0.068s, at: 14716.5MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.810s, at: 1234.8MB/s
1000MB of bytes read    in 0.820s, at: 1219.8MB/s
1000MB of words written in 0.113s, at: 8837.9MB/s
1000MB of words read    in 0.107s, at: 9346.2MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  261.8 MB/s write,   87.6 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  468.9 MB/s write,  153.6 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  846.9 MB/s write,  327.4 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1412.0 MB/s write,  843.0 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 112a1a5d6d8069cd227d51d99a142da64f0a61aa.log.tmp 112a1a5d6d8069cd227d51d99a142da64f0a61aa.log
