
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 112a1a5d6d8069cd227d51d99a142da64f0a61aa
Note: checking out '112a1a5d6d8069cd227d51d99a142da64f0a61aa'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 112a1a5... Mark INLINEs with a phase to remove warning.

Identifying

git log -n 1
commit 112a1a5d6d8069cd227d51d99a142da64f0a61aa
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Thu Jul 30 18:56:51 2015 +0200

    Mark INLINEs with a phase to remove warning.
    
    The warnings are like this;
    Rule "getWord16le/readN" may never fire
      because ‘getWord16le’ might inline first
    
    The RULES do the same thing as the inlining, so either one is fine.
    Specifying a phase removes the warning.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Warning: The package list for 'hackage.haskell.org' is 78 days old.
Run 'cabal update' to get the latest list of available packages.
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.82 μs   (34.80 μs .. 34.84 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.82 μs   (34.82 μs .. 34.83 μs)
std dev              24.92 ns   (20.22 ns .. 30.45 ns)

benchmarking bounds/[Word8]
time                 42.61 μs   (42.61 μs .. 42.62 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.62 μs   (42.61 μs .. 42.63 μs)
std dev              18.46 ns   (13.98 ns .. 25.18 ns)

benchmarking small ByteString
time                 331.9 ns   (331.8 ns .. 332.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 332.5 ns   (332.3 ns .. 332.7 ns)
std dev              801.9 ps   (688.9 ps .. 969.7 ps)

benchmarking large ByteString
time                 331.4 ns   (331.1 ns .. 331.6 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 330.9 ns   (330.7 ns .. 331.2 ns)
std dev              740.0 ps   (606.0 ps .. 963.4 ps)

benchmarking length-prefixed ByteString
time                 7.580 μs   (7.579 μs .. 7.581 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.580 μs   (7.580 μs .. 7.581 μs)
std dev              2.274 ns   (1.840 ns .. 2.725 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 369.5 μs   (369.5 μs .. 369.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 369.1 μs   (368.8 μs .. 369.3 μs)
std dev              839.5 ns   (623.6 ns .. 1.088 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 225.3 μs   (225.1 μs .. 225.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.9 μs   (224.7 μs .. 225.1 μs)
std dev              573.7 ns   (497.6 ns .. 678.2 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.4 μs   (155.2 μs .. 155.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.5 μs   (155.4 μs .. 155.6 μs)
std dev              224.4 ns   (178.3 ns .. 298.8 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.35 μs   (97.28 μs .. 97.40 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.27 μs   (97.23 μs .. 97.30 μs)
std dev              113.5 ns   (94.37 ns .. 141.0 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 6.020 ms   (6.016 ms .. 6.023 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.024 ms   (6.021 ms .. 6.028 ms)
std dev              10.84 μs   (7.154 μs .. 15.07 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.399 ms   (6.396 ms .. 6.404 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.394 ms   (6.390 ms .. 6.398 ms)
std dev              11.01 μs   (8.722 μs .. 13.81 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.740 ms   (2.731 ms .. 2.757 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.734 ms   (2.731 ms .. 2.742 ms)
std dev              13.21 μs   (4.157 μs .. 30.29 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.904 ms   (2.898 ms .. 2.910 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.912 ms   (2.906 ms .. 2.921 ms)
std dev              23.95 μs   (16.74 μs .. 39.77 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.723 ms   (2.722 ms .. 2.724 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.723 ms   (2.722 ms .. 2.724 ms)
std dev              4.376 μs   (3.247 μs .. 6.509 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.378 ms   (7.375 ms .. 7.382 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.381 ms   (7.377 ms .. 7.385 ms)
std dev              11.50 μs   (8.837 μs .. 15.98 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.17 ms   (22.70 ms .. 23.63 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.45 ms   (23.22 ms .. 23.82 ms)
std dev              641.4 μs   (455.8 μs .. 987.7 μs)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.76 ms   (36.00 ms .. 37.66 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 36.84 ms   (36.12 ms .. 37.39 ms)
std dev              1.340 ms   (908.2 μs .. 2.083 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.32 ms   (25.77 ms .. 26.82 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 26.39 ms   (26.03 ms .. 27.24 ms)
std dev              1.144 ms   (552.1 μs .. 2.038 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.952 ms   (1.951 ms .. 1.952 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.952 ms   (1.952 ms .. 1.952 ms)
std dev              992.2 ns   (722.9 ns .. 1.366 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.22 ms   (14.22 ms .. 14.22 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.22 ms   (14.21 ms .. 14.22 ms)
std dev              5.434 μs   (4.108 μs .. 7.725 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.329 ms   (2.319 ms .. 2.339 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.325 ms   (2.320 ms .. 2.329 ms)
std dev              15.21 μs   (12.04 μs .. 18.91 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.019 ms   (2.018 ms .. 2.019 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.019 ms   (2.019 ms .. 2.020 ms)
std dev              2.293 μs   (1.866 μs .. 2.896 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.997 ms   (5.994 ms .. 6.001 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.001 ms   (5.999 ms .. 6.002 ms)
std dev              4.752 μs   (3.837 μs .. 6.309 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.731 ms   (7.715 ms .. 7.748 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.733 ms   (7.726 ms .. 7.742 ms)
std dev              21.19 μs   (19.41 μs .. 23.25 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.93 ms   (12.93 ms .. 12.94 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.94 ms   (12.94 ms .. 12.95 ms)
std dev              11.77 μs   (7.795 μs .. 17.83 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.022 ms   (1.021 ms .. 1.023 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.022 ms   (1.021 ms .. 1.022 ms)
std dev              1.467 μs   (1.206 μs .. 1.780 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 601.4 μs   (601.2 μs .. 601.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 601.6 μs   (601.3 μs .. 601.8 μs)
std dev              824.9 ns   (621.9 ns .. 1.186 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 503.9 μs   (503.6 μs .. 504.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 504.3 μs   (504.1 μs .. 504.8 μs)
std dev              1.177 μs   (686.2 ns .. 2.125 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.0 μs   (554.0 μs .. 554.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.0 μs   (554.0 μs .. 554.1 μs)
std dev              98.63 ns   (82.44 ns .. 120.1 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.133s, at: 7507.6MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.8MB/s
1000MB of bytes read    in 0.413s, at: 2423.2MB/s
1000MB of words written in 0.114s, at: 8787.0MB/s
1000MB of words read    in 0.068s, at: 14705.2MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.820s, at: 1220.1MB/s
1000MB of words written in 0.113s, at: 8821.3MB/s
1000MB of words read    in 0.107s, at: 9343.9MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  261.8 MB/s write,   87.6 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  471.6 MB/s write,  153.5 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  859.6 MB/s write,  328.6 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1429.5 MB/s write,  839.9 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 112a1a5d6d8069cd227d51d99a142da64f0a61aa.log.tmp 112a1a5d6d8069cd227d51d99a142da64f0a61aa.log
