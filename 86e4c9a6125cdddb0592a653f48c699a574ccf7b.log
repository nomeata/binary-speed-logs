
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 86e4c9a6125cdddb0592a653f48c699a574ccf7b
Note: checking out '86e4c9a6125cdddb0592a653f48c699a574ccf7b'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 86e4c9a... Bump version to 0.7.5.0

Identifying

git log -n 1
commit 86e4c9a6125cdddb0592a653f48c699a574ccf7b
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sun May 31 17:03:00 2015 +0200

    Bump version to 0.7.5.0
    
    and update the changelog.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1309       1026      43.9%        418       2753
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1309       1026      43.9%        418       2753

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.5.0...
cabal build
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.5.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.5.0...
Preprocessing library binary-0.7.5.0...
In-place registering binary-0.7.5.0...
Preprocessing benchmark 'builder' for binary-0.7.5.0...
Preprocessing benchmark 'get' for binary-0.7.5.0...
Preprocessing benchmark 'bench' for binary-0.7.5.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.08 μs   (35.07 μs .. 35.10 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.12 μs   (35.11 μs .. 35.13 μs)
std dev              37.97 ns   (31.13 ns .. 50.94 ns)

benchmarking bounds/[Word8]
time                 42.73 μs   (42.72 μs .. 42.73 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.69 μs   (42.68 μs .. 42.70 μs)
std dev              34.58 ns   (30.25 ns .. 38.58 ns)

benchmarking small ByteString
time                 321.1 ns   (320.9 ns .. 321.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 321.4 ns   (321.2 ns .. 321.6 ns)
std dev              753.5 ps   (673.6 ps .. 881.5 ps)

benchmarking large ByteString
time                 321.4 ns   (321.2 ns .. 321.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 321.2 ns   (321.1 ns .. 321.3 ns)
std dev              371.0 ps   (321.4 ps .. 443.4 ps)

benchmarking length-prefixed ByteString
time                 6.702 μs   (6.700 μs .. 6.703 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.705 μs   (6.704 μs .. 6.706 μs)
std dev              3.028 ns   (2.146 ns .. 4.317 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 365.2 μs   (365.2 μs .. 365.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 365.3 μs   (365.2 μs .. 365.4 μs)
std dev              229.9 ns   (177.4 ns .. 304.3 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.2 μs   (223.9 μs .. 224.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.1 μs   (224.0 μs .. 224.3 μs)
std dev              471.4 ns   (368.3 ns .. 615.5 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 153.9 μs   (153.8 μs .. 154.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.1 μs   (154.0 μs .. 154.1 μs)
std dev              162.3 ns   (137.3 ns .. 189.8 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.88 μs   (97.72 μs .. 97.98 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.55 μs   (97.38 μs .. 97.70 μs)
std dev              557.6 ns   (506.7 ns .. 612.5 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.969 ms   (5.964 ms .. 5.976 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.975 ms   (5.971 ms .. 5.981 ms)
std dev              12.76 μs   (8.992 μs .. 17.32 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.343 ms   (6.339 ms .. 6.347 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.337 ms   (6.332 ms .. 6.341 ms)
std dev              12.15 μs   (9.505 μs .. 16.01 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.755 ms   (2.754 ms .. 2.757 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.759 ms   (2.757 ms .. 2.763 ms)
std dev              9.337 μs   (6.668 μs .. 14.36 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.850 ms   (2.847 ms .. 2.853 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.850 ms   (2.847 ms .. 2.853 ms)
std dev              8.786 μs   (6.269 μs .. 12.72 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.741 ms   (2.739 ms .. 2.744 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.740 ms   (2.739 ms .. 2.742 ms)
std dev              5.206 μs   (3.899 μs .. 8.316 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.479 ms   (7.473 ms .. 7.486 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.485 ms   (7.480 ms .. 7.493 ms)
std dev              18.16 μs   (12.39 μs .. 28.11 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.24 ms   (22.73 ms .. 23.74 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.75 ms   (23.40 ms .. 24.16 ms)
std dev              849.9 μs   (574.1 μs .. 1.315 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 37.00 ms   (36.00 ms .. 38.03 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 37.14 ms   (36.62 ms .. 37.95 ms)
std dev              1.288 ms   (711.7 μs .. 2.130 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.54 ms   (26.03 ms .. 27.16 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.66 ms   (26.26 ms .. 27.39 ms)
std dev              1.192 ms   (563.2 μs .. 2.072 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.960 ms   (1.960 ms .. 1.960 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.961 ms   (1.961 ms .. 1.964 ms)
std dev              3.206 μs   (703.9 ns .. 7.173 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.23 ms   (14.23 ms .. 14.25 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.22 ms   (14.22 ms .. 14.23 ms)
std dev              16.12 μs   (11.12 μs .. 23.07 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.327 ms   (2.321 ms .. 2.332 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.329 ms   (2.324 ms .. 2.334 ms)
std dev              16.75 μs   (13.93 μs .. 22.84 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.008 ms   (2.007 ms .. 2.009 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.009 ms   (2.008 ms .. 2.009 ms)
std dev              2.241 μs   (1.824 μs .. 3.066 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.989 ms   (5.984 ms .. 5.995 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.994 ms   (5.990 ms .. 5.999 ms)
std dev              12.71 μs   (8.546 μs .. 16.41 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.725 ms   (7.712 ms .. 7.741 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.718 ms   (7.712 ms .. 7.725 ms)
std dev              18.34 μs   (14.31 μs .. 26.25 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.94 ms   (12.94 ms .. 12.95 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.95 ms   (12.95 ms .. 12.96 ms)
std dev              16.52 μs   (7.778 μs .. 31.52 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 977.4 μs   (976.7 μs .. 978.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 977.6 μs   (976.9 μs .. 978.6 μs)
std dev              2.833 μs   (2.160 μs .. 4.155 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 601.8 μs   (601.4 μs .. 602.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 601.6 μs   (601.4 μs .. 601.9 μs)
std dev              908.4 ns   (573.7 ns .. 1.248 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 504.1 μs   (503.7 μs .. 504.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 503.7 μs   (503.6 μs .. 503.9 μs)
std dev              531.1 ns   (416.9 ns .. 697.3 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.2 μs   (554.0 μs .. 554.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.3 μs   (554.2 μs .. 554.5 μs)
std dev              357.9 ns   (155.3 ns .. 674.9 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7769.1MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3354.6MB/s
1000MB of bytes read    in 0.413s, at: 2423.1MB/s
1000MB of words written in 0.114s, at: 8778.9MB/s
1000MB of words read    in 0.068s, at: 14640.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.4MB/s
1000MB of bytes read    in 0.820s, at: 1220.0MB/s
1000MB of words written in 0.114s, at: 8806.7MB/s
1000MB of words read    in 0.107s, at: 9335.8MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.2 MB/s write,   87.3 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  467.2 MB/s write,  152.7 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  843.3 MB/s write,  304.9 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1401.3 MB/s write,  841.2 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 86e4c9a6125cdddb0592a653f48c699a574ccf7b.log.tmp 86e4c9a6125cdddb0592a653f48c699a574ccf7b.log
