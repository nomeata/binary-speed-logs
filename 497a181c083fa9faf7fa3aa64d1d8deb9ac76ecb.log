
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 497a181c083fa9faf7fa3aa64d1d8deb9ac76ecb
Note: checking out '497a181c083fa9faf7fa3aa64d1d8deb9ac76ecb'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 497a181... Fix memory leak when decoding Float and Double.

Identifying

git log -n 1
commit 497a181c083fa9faf7fa3aa64d1d8deb9ac76ecb
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sat May 30 16:14:03 2015 +0200

    Fix memory leak when decoding Float and Double.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1309       1026      43.9%        418       2753
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1309       1026      43.9%        418       2753

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.10 μs   (35.08 μs .. 35.11 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.09 μs   (35.08 μs .. 35.10 μs)
std dev              33.72 ns   (29.87 ns .. 39.99 ns)

benchmarking bounds/[Word8]
time                 42.58 μs   (42.57 μs .. 42.59 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.58 μs   (42.58 μs .. 42.59 μs)
std dev              19.52 ns   (13.50 ns .. 32.89 ns)

benchmarking small ByteString
time                 325.3 ns   (325.1 ns .. 325.6 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.5 ns   (325.3 ns .. 325.7 ns)
std dev              690.1 ps   (573.9 ps .. 829.4 ps)

benchmarking large ByteString
time                 327.6 ns   (327.5 ns .. 327.7 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 327.4 ns   (327.3 ns .. 327.5 ns)
std dev              434.0 ps   (364.3 ps .. 532.9 ps)

benchmarking length-prefixed ByteString
time                 6.699 μs   (6.698 μs .. 6.699 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.699 μs   (6.698 μs .. 6.701 μs)
std dev              4.687 ns   (2.933 ns .. 7.883 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.4 μs   (366.3 μs .. 366.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.4 μs   (366.3 μs .. 366.5 μs)
std dev              216.4 ns   (169.8 ns .. 318.4 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.7 μs   (224.5 μs .. 224.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.1 μs   (224.0 μs .. 224.3 μs)
std dev              505.4 ns   (431.7 ns .. 590.9 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.9 μs   (154.7 μs .. 155.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.6 μs   (154.4 μs .. 154.7 μs)
std dev              468.0 ns   (400.4 ns .. 576.2 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.44 μs   (97.12 μs .. 97.73 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.17 μs   (97.11 μs .. 97.29 μs)
std dev              294.8 ns   (171.1 ns .. 472.9 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.965 ms   (5.958 ms .. 5.973 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.968 ms   (5.965 ms .. 5.972 ms)
std dev              10.17 μs   (7.045 μs .. 13.93 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.346 ms   (6.341 ms .. 6.351 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.336 ms   (6.332 ms .. 6.339 ms)
std dev              11.42 μs   (9.064 μs .. 14.51 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.752 ms   (2.750 ms .. 2.753 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.751 ms   (2.750 ms .. 2.753 ms)
std dev              5.058 μs   (3.940 μs .. 7.880 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.837 ms   (2.835 ms .. 2.839 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.842 ms   (2.839 ms .. 2.845 ms)
std dev              8.550 μs   (6.303 μs .. 11.97 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.736 ms   (2.734 ms .. 2.738 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.734 ms   (2.733 ms .. 2.736 ms)
std dev              5.208 μs   (4.076 μs .. 7.169 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.464 ms   (7.456 ms .. 7.472 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.469 ms   (7.462 ms .. 7.477 ms)
std dev              22.03 μs   (16.40 μs .. 31.12 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.22 ms   (22.69 ms .. 23.79 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.69 ms   (23.32 ms .. 24.05 ms)
std dev              830.4 μs   (573.6 μs .. 1.328 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.81 ms   (35.82 ms .. 37.86 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 36.95 ms   (36.43 ms .. 37.78 ms)
std dev              1.286 ms   (753.8 μs .. 2.075 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.51 ms   (25.98 ms .. 27.11 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.64 ms   (26.25 ms .. 27.68 ms)
std dev              1.197 ms   (528.3 μs .. 2.137 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.959 ms   (1.959 ms .. 1.960 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.961 ms   (1.960 ms .. 1.962 ms)
std dev              2.947 μs   (1.154 μs .. 5.832 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.19 ms   (14.19 ms .. 14.20 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.18 ms   (14.18 ms .. 14.19 ms)
std dev              9.400 μs   (7.042 μs .. 13.11 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.336 ms   (2.331 ms .. 2.340 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.329 ms   (2.325 ms .. 2.332 ms)
std dev              12.01 μs   (9.576 μs .. 16.69 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.004 ms   (2.003 ms .. 2.005 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.005 ms   (2.004 ms .. 2.006 ms)
std dev              2.675 μs   (2.037 μs .. 3.525 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.976 ms   (5.971 ms .. 5.981 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.978 ms   (5.976 ms .. 5.980 ms)
std dev              6.430 μs   (4.717 μs .. 9.704 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.680 ms   (7.669 ms .. 7.690 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.676 ms   (7.671 ms .. 7.681 ms)
std dev              13.57 μs   (11.60 μs .. 16.07 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.88 ms   (12.87 ms .. 12.89 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.91 ms   (12.90 ms .. 12.93 ms)
std dev              38.22 μs   (19.33 μs .. 58.38 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 975.4 μs   (975.0 μs .. 976.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 975.8 μs   (975.4 μs .. 976.3 μs)
std dev              1.453 μs   (1.222 μs .. 1.914 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 602.1 μs   (601.9 μs .. 602.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 602.1 μs   (601.9 μs .. 602.2 μs)
std dev              419.4 ns   (339.9 ns .. 561.7 ns)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 504.9 μs   (504.7 μs .. 505.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 504.8 μs   (504.6 μs .. 505.1 μs)
std dev              731.1 ns   (575.5 ns .. 957.6 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.5 μs   (554.4 μs .. 554.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.6 μs   (554.5 μs .. 554.7 μs)
std dev              315.9 ns   (217.8 ns .. 453.5 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7773.8MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.0MB/s
1000MB of bytes read    in 0.413s, at: 2422.5MB/s
1000MB of words written in 0.114s, at: 8791.6MB/s
1000MB of words read    in 0.068s, at: 14700.0MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.820s, at: 1219.8MB/s
1000MB of words written in 0.113s, at: 8822.7MB/s
1000MB of words read    in 0.107s, at: 9338.4MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.6 MB/s write,   87.6 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  468.9 MB/s write,  153.0 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  846.5 MB/s write,  305.5 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1405.5 MB/s write,  846.9 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 497a181c083fa9faf7fa3aa64d1d8deb9ac76ecb.log.tmp 497a181c083fa9faf7fa3aa64d1d8deb9ac76ecb.log
