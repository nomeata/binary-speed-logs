
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 497a181c083fa9faf7fa3aa64d1d8deb9ac76ecb
Note: checking out '497a181c083fa9faf7fa3aa64d1d8deb9ac76ecb'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 497a181... Fix memory leak when decoding Float and Double.

Identifying

git log -n 1
commit 497a181c083fa9faf7fa3aa64d1d8deb9ac76ecb
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sat May 30 16:14:03 2015 +0200

    Fix memory leak when decoding Float and Double.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1309       1026      43.9%        418       2753
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1309       1026      43.9%        418       2753

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.80 μs   (34.79 μs .. 34.82 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.81 μs   (34.81 μs .. 34.82 μs)
std dev              19.85 ns   (14.02 ns .. 27.83 ns)

benchmarking bounds/[Word8]
time                 42.67 μs   (42.65 μs .. 42.69 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.71 μs   (42.70 μs .. 42.76 μs)
std dev              80.30 ns   (37.91 ns .. 156.5 ns)

benchmarking small ByteString
time                 240.5 ns   (240.4 ns .. 240.6 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 240.3 ns   (240.0 ns .. 240.4 ns)
std dev              634.9 ps   (517.0 ps .. 783.9 ps)

benchmarking large ByteString
time                 239.1 ns   (238.9 ns .. 239.3 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 239.4 ns   (239.3 ns .. 239.5 ns)
std dev              455.3 ps   (394.0 ps .. 537.1 ps)

benchmarking length-prefixed ByteString
time                 6.788 μs   (6.785 μs .. 6.790 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.790 μs   (6.789 μs .. 6.794 μs)
std dev              6.311 ns   (2.615 ns .. 13.46 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 362.2 μs   (362.1 μs .. 362.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 362.1 μs   (362.0 μs .. 362.2 μs)
std dev              264.6 ns   (222.7 ns .. 332.8 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 221.1 μs   (221.0 μs .. 221.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 221.1 μs   (221.1 μs .. 221.2 μs)
std dev              204.7 ns   (141.3 ns .. 340.5 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 150.4 μs   (150.2 μs .. 150.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 150.4 μs   (150.3 μs .. 150.5 μs)
std dev              363.3 ns   (271.7 ns .. 470.7 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 94.91 μs   (94.69 μs .. 95.08 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 94.57 μs   (94.44 μs .. 94.73 μs)
std dev              488.7 ns   (440.1 ns .. 567.5 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.926 ms   (5.923 ms .. 5.928 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.933 ms   (5.930 ms .. 5.940 ms)
std dev              13.61 μs   (7.250 μs .. 24.45 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.296 ms   (6.292 ms .. 6.298 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.295 ms   (6.291 ms .. 6.299 ms)
std dev              10.67 μs   (8.156 μs .. 15.01 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.722 ms   (2.721 ms .. 2.724 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.723 ms   (2.722 ms .. 2.725 ms)
std dev              5.032 μs   (3.776 μs .. 7.056 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.778 ms   (2.776 ms .. 2.781 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.780 ms   (2.777 ms .. 2.782 ms)
std dev              8.766 μs   (5.966 μs .. 14.26 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.702 ms   (2.700 ms .. 2.704 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.704 ms   (2.703 ms .. 2.705 ms)
std dev              3.471 μs   (2.905 μs .. 4.164 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.712 ms   (7.708 ms .. 7.716 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.716 ms   (7.711 ms .. 7.722 ms)
std dev              15.40 μs   (11.14 μs .. 24.04 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.15 ms   (22.56 ms .. 23.79 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 23.64 ms   (23.17 ms .. 24.28 ms)
std dev              1.199 ms   (834.9 μs .. 1.794 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.30 ms   (35.49 ms .. 37.24 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 36.50 ms   (36.05 ms .. 37.29 ms)
std dev              1.237 ms   (697.5 μs .. 2.118 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.15 ms   (25.77 ms .. 26.57 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.41 ms   (26.05 ms .. 27.47 ms)
std dev              1.195 ms   (500.1 μs .. 2.118 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.953 ms   (1.953 ms .. 1.953 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.953 ms   (1.953 ms .. 1.954 ms)
std dev              1.039 μs   (827.7 ns .. 1.334 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 13.72 ms   (13.72 ms .. 13.73 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.73 ms   (13.73 ms .. 13.73 ms)
std dev              4.153 μs   (3.179 μs .. 5.387 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.211 ms   (2.207 ms .. 2.215 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.216 ms   (2.213 ms .. 2.219 ms)
std dev              10.83 μs   (9.058 μs .. 13.58 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.959 ms   (1.957 ms .. 1.960 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.957 ms   (1.956 ms .. 1.958 ms)
std dev              2.738 μs   (2.340 μs .. 3.332 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.740 ms   (5.737 ms .. 5.743 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.738 ms   (5.735 ms .. 5.740 ms)
std dev              7.525 μs   (5.684 μs .. 10.36 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.393 ms   (7.389 ms .. 7.397 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.395 ms   (7.393 ms .. 7.398 ms)
std dev              7.575 μs   (6.134 μs .. 9.533 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 13.02 ms   (13.01 ms .. 13.03 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.04 ms   (13.03 ms .. 13.06 ms)
std dev              28.43 μs   (9.707 μs .. 54.01 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.015 ms   (1.014 ms .. 1.015 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.015 ms   (1.014 ms .. 1.016 ms)
std dev              2.285 μs   (1.777 μs .. 3.083 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 617.1 μs   (615.6 μs .. 619.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 620.8 μs   (619.0 μs .. 623.2 μs)
std dev              7.165 μs   (5.906 μs .. 9.453 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 502.1 μs   (501.9 μs .. 502.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 502.1 μs   (502.0 μs .. 502.1 μs)
std dev              270.3 ns   (197.0 ns .. 423.6 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 553.3 μs   (553.1 μs .. 553.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 553.3 μs   (553.2 μs .. 553.4 μs)
std dev              254.8 ns   (209.4 ns .. 344.7 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.284s, at: 3520.9MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.300s, at: 3333.1MB/s
1000MB of bytes read    in 0.412s, at: 2427.0MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.072s, at: 13887.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.812s, at: 1231.5MB/s
1000MB of bytes read    in 0.820s, at: 1219.4MB/s
1000MB of words written in 0.116s, at: 8620.2MB/s
1000MB of words read    in 0.108s, at: 9258.7MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  242.7 MB/s write,   89.6 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  471.7 MB/s write,  156.2 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  862.0 MB/s write,  308.6 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1470.5 MB/s write,  862.0 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 497a181c083fa9faf7fa3aa64d1d8deb9ac76ecb.log.tmp 497a181c083fa9faf7fa3aa64d1d8deb9ac76ecb.log
