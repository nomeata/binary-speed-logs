
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 038830410c1880e337cbfd85343ca78d07b11180
Note: checking out '038830410c1880e337cbfd85343ca78d07b11180'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 0388304... benchmark builder: Specify Int as we otherwise default to Integer.

Identifying

git log -n 1
commit 038830410c1880e337cbfd85343ca78d07b11180
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Fri Aug 14 22:31:12 2015 +0200

    benchmark builder: Specify Int as we otherwise default to Integer.
    
    The benchmark executes 25% faster, time which could not be attribute to
    the speed of binary itself.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
[ 1 of 11] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 2 of 11] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder.o )
[ 3 of 11] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 4 of 11] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Put.o )
[ 5 of 11] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get.o )
[ 6 of 11] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Class.o )
[ 7 of 11] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Generic.o )
[ 8 of 11] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary.o )
[ 9 of 11] Compiling GenericsBenchTypes ( benchmarks/GenericsBenchTypes.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchTypes.o )
[10 of 11] Compiling GenericsBenchCache ( benchmarks/GenericsBenchCache.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchCache.o )
[11 of 11] Compiling Main             ( benchmarks/GenericsBench.hs, dist/build/generics-bench/generics-bench-tmp/Main.o )
Linking dist/build/generics-bench/generics-bench ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[3 of 3] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 4 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.80 μs   (34.78 μs .. 34.81 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.92 μs   (34.84 μs .. 35.31 μs)
std dev              503.8 ns   (16.50 ns .. 1.156 μs)

benchmarking bounds/[Word8]
time                 42.74 μs   (42.73 μs .. 42.75 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.72 μs   (42.72 μs .. 42.73 μs)
std dev              17.15 ns   (14.46 ns .. 23.70 ns)

benchmarking small ByteString
time                 325.1 ns   (325.0 ns .. 325.3 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.0 ns   (324.9 ns .. 325.3 ns)
std dev              643.1 ps   (498.6 ps .. 982.4 ps)

benchmarking large ByteString
time                 325.6 ns   (325.4 ns .. 325.7 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 325.2 ns   (325.1 ns .. 325.4 ns)
std dev              556.3 ps   (472.5 ps .. 683.2 ps)

benchmarking length-prefixed ByteString
time                 6.085 μs   (6.083 μs .. 6.088 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.086 μs   (6.085 μs .. 6.088 μs)
std dev              4.569 ns   (2.343 ns .. 7.348 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.3 μs   (366.2 μs .. 366.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.5 μs   (366.4 μs .. 366.7 μs)
std dev              442.0 ns   (326.3 ns .. 594.7 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.9 μs   (224.7 μs .. 225.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 225.0 μs   (224.8 μs .. 225.1 μs)
std dev              425.0 ns   (345.9 ns .. 513.9 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.1 μs   (155.0 μs .. 155.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.1 μs   (155.0 μs .. 155.2 μs)
std dev              254.3 ns   (88.40 ns .. 470.0 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.17 μs   (97.14 μs .. 97.19 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.08 μs   (97.05 μs .. 97.11 μs)
std dev              106.2 ns   (96.39 ns .. 117.2 ns)

Benchmark builder: FINISH
Benchmark generics-bench: RUNNING...
creating cabal cache file... done
benchmarking encode
time                 45.24 ms   (44.52 ms .. 45.94 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 45.11 ms   (44.68 ms .. 46.20 ms)
std dev              1.225 ms   (494.5 μs .. 2.124 ms)

benchmarking decode
time                 17.69 ms   (17.35 ms .. 18.02 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 17.54 ms   (17.07 ms .. 18.02 ms)
std dev              1.097 ms   (723.8 μs .. 1.695 ms)
variance introduced by outliers: 25% (moderately inflated)

benchmarking decode null
time                 11.13 ms   (10.91 ms .. 11.36 ms)
                     0.996 R²   (0.993 R² .. 0.998 R²)
mean                 11.04 ms   (10.87 ms .. 11.25 ms)
std dev              516.5 μs   (408.0 μs .. 725.2 μs)
variance introduced by outliers: 20% (moderately inflated)

benchmarking embarrassment/read
time                 638.4 ms   (632.7 ms .. 644.0 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 634.8 ms   (633.8 ms .. 635.7 ms)
std dev              1.336 ms   (0.0 s .. 1.469 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking embarrassment/show
time                 36.02 ms   (35.68 ms .. 36.33 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 35.92 ms   (35.69 ms .. 36.14 ms)
std dev              472.2 μs   (364.9 μs .. 616.0 μs)

Benchmark generics-bench: FINISH
Benchmark get: RUNNING...
benchmarking brackets/Binary 100kb, one chunk
time                 6.379 ms   (6.376 ms .. 6.381 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.387 ms   (6.384 ms .. 6.393 ms)
std dev              13.17 μs   (8.833 μs .. 18.23 μs)

benchmarking brackets/Binary 100kb, 100 byte chunks
time                 6.755 ms   (6.751 ms .. 6.759 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.747 ms   (6.742 ms .. 6.750 ms)
std dev              12.42 μs   (10.11 μs .. 15.93 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, one chunk
time                 2.796 ms   (2.794 ms .. 2.798 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.786 ms   (2.783 ms .. 2.788 ms)
std dev              8.499 μs   (7.719 μs .. 9.473 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, 100 byte chunks
time                 2.857 ms   (2.853 ms .. 2.859 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.854 ms   (2.852 ms .. 2.858 ms)
std dev              8.015 μs   (4.403 μs .. 14.69 μs)

benchmarking brackets/Attoparsec strict-bs 100kb
time                 2.784 ms   (2.783 ms .. 2.785 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.783 ms   (2.782 ms .. 2.785 ms)
std dev              4.797 μs   (3.725 μs .. 6.698 μs)

benchmarking brackets/Cereal strict-bs 100kb
time                 7.401 ms   (7.395 ms .. 7.406 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.399 ms   (7.395 ms .. 7.403 ms)
std dev              12.15 μs   (8.798 μs .. 18.85 μs)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Attoparsec
time                 26.81 ms   (26.40 ms .. 27.29 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.81 ms   (26.45 ms .. 27.63 ms)
std dev              1.181 ms   (462.4 μs .. 2.112 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Binary
time                 23.23 ms   (22.56 ms .. 23.89 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 23.56 ms   (23.09 ms .. 24.07 ms)
std dev              1.084 ms   (752.0 μs .. 1.636 ms)
variance introduced by outliers: 14% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Cereal
time                 36.68 ms   (35.80 ms .. 37.83 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 37.02 ms   (36.23 ms .. 37.69 ms)
std dev              1.455 ms   (978.7 μs .. 2.155 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking comparison getWord8, 1MB/Attoparsec
time                 106.3 ms   (95.36 ms .. 112.4 ms)
                     0.987 R²   (0.953 R² .. 0.999 R²)
mean                 110.5 ms   (105.5 ms .. 115.6 ms)
std dev              7.785 ms   (5.004 ms .. 12.73 ms)
variance introduced by outliers: 20% (moderately inflated)

benchmarking comparison getWord8, 1MB/Binary
time                 65.87 ms   (63.26 ms .. 68.45 ms)
                     0.995 R²   (0.985 R² .. 0.999 R²)
mean                 67.52 ms   (66.11 ms .. 70.25 ms)
std dev              3.352 ms   (1.540 ms .. 5.195 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking comparison getWord8, 1MB/Cereal
time                 118.1 ms   (112.0 ms .. 124.6 ms)
                     0.993 R²   (0.971 R² .. 1.000 R²)
mean                 122.2 ms   (116.5 ms .. 125.1 ms)
std dev              5.933 ms   (2.860 ms .. 8.858 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 2 bytes
time                 34.27 ms   (33.83 ms .. 34.81 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.73 ms   (34.30 ms .. 35.68 ms)
std dev              1.280 ms   (593.8 μs .. 2.224 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 4 bytes
time                 25.86 ms   (25.32 ms .. 26.38 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 26.04 ms   (25.77 ms .. 26.27 ms)
std dev              569.2 μs   (433.7 μs .. 806.4 μs)

benchmarking getWord8 1MB/chunk size 8 bytes
time                 16.98 ms   (16.96 ms .. 17.00 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 17.01 ms   (17.00 ms .. 17.04 ms)
std dev              39.26 μs   (11.66 μs .. 74.93 μs)

benchmarking getWord8 1MB/chunk size 16 bytes
time                 17.47 ms   (17.32 ms .. 17.61 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 17.45 ms   (17.32 ms .. 17.87 ms)
std dev              507.7 μs   (135.5 μs .. 985.6 μs)

benchmarking getWord8 1MB Applicative/chunk size 2 bytes
time                 34.05 ms   (33.64 ms .. 34.66 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.11 ms   (33.40 ms .. 34.45 ms)
std dev              977.6 μs   (402.5 μs .. 1.730 ms)

benchmarking getWord8 1MB Applicative/chunk size 4 bytes
time                 18.46 ms   (18.18 ms .. 18.81 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 18.46 ms   (18.36 ms .. 18.64 ms)
std dev              322.0 μs   (207.9 μs .. 488.5 μs)

benchmarking getWord8 1MB Applicative/chunk size 8 bytes
time                 11.85 ms   (11.71 ms .. 12.05 ms)
                     0.999 R²   (0.997 R² .. 1.000 R²)
mean                 11.80 ms   (11.71 ms .. 11.91 ms)
std dev              260.4 μs   (193.0 μs .. 355.0 μs)

benchmarking getWord8 1MB Applicative/chunk size 16 bytes
time                 7.442 ms   (7.396 ms .. 7.498 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 7.425 ms   (7.349 ms .. 7.499 ms)
std dev              209.1 μs   (133.9 μs .. 316.9 μs)
variance introduced by outliers: 11% (moderately inflated)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7741.2MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.2MB/s
1000MB of bytes read    in 0.413s, at: 2422.7MB/s
1000MB of words written in 0.114s, at: 8797.4MB/s
1000MB of words read    in 0.068s, at: 14712.2MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.810s, at: 1235.3MB/s
1000MB of bytes read    in 0.820s, at: 1219.9MB/s
1000MB of words written in 0.113s, at: 8834.3MB/s
1000MB of words read    in 0.107s, at: 9345.2MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.7 MB/s write,   87.5 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  466.1 MB/s write,  153.3 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  844.3 MB/s write,  326.8 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1406.2 MB/s write,  839.9 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 038830410c1880e337cbfd85343ca78d07b11180.log.tmp 038830410c1880e337cbfd85343ca78d07b11180.log
