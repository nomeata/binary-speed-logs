
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 038830410c1880e337cbfd85343ca78d07b11180
Note: checking out '038830410c1880e337cbfd85343ca78d07b11180'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 0388304... benchmark builder: Specify Int as we otherwise default to Integer.

Identifying

git log -n 1
commit 038830410c1880e337cbfd85343ca78d07b11180
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Fri Aug 14 22:31:12 2015 +0200

    benchmark builder: Specify Int as we otherwise default to Integer.
    
    The benchmark executes 25% faster, time which could not be attribute to
    the speed of binary itself.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
[ 1 of 11] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 2 of 11] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder.o )
[ 3 of 11] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 4 of 11] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Put.o )
[ 5 of 11] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get.o )
[ 6 of 11] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Class.o )
[ 7 of 11] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Generic.o )
[ 8 of 11] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary.o )
[ 9 of 11] Compiling GenericsBenchTypes ( benchmarks/GenericsBenchTypes.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchTypes.o )
[10 of 11] Compiling GenericsBenchCache ( benchmarks/GenericsBenchCache.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchCache.o )
[11 of 11] Compiling Main             ( benchmarks/GenericsBench.hs, dist/build/generics-bench/generics-bench-tmp/Main.o )
Linking dist/build/generics-bench/generics-bench ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[3 of 3] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 4 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.83 μs   (34.82 μs .. 34.84 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.83 μs   (34.83 μs .. 34.84 μs)
std dev              26.83 ns   (16.16 ns .. 44.46 ns)

benchmarking bounds/[Word8]
time                 42.72 μs   (42.71 μs .. 42.72 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.72 μs   (42.72 μs .. 42.74 μs)
std dev              30.68 ns   (18.35 ns .. 47.56 ns)

benchmarking small ByteString
time                 324.4 ns   (324.1 ns .. 324.7 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.5 ns   (324.3 ns .. 324.7 ns)
std dev              689.9 ps   (557.5 ps .. 855.8 ps)

benchmarking large ByteString
time                 324.1 ns   (323.9 ns .. 324.3 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.9 ns   (323.8 ns .. 324.0 ns)
std dev              399.1 ps   (334.2 ps .. 481.8 ps)

benchmarking length-prefixed ByteString
time                 6.080 μs   (6.079 μs .. 6.080 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.079 μs   (6.078 μs .. 6.080 μs)
std dev              3.122 ns   (1.923 ns .. 6.485 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.8 μs   (366.6 μs .. 367.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.5 μs   (366.4 μs .. 366.6 μs)
std dev              375.6 ns   (258.1 ns .. 525.0 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 225.1 μs   (224.8 μs .. 225.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 225.2 μs   (225.1 μs .. 225.3 μs)
std dev              293.6 ns   (202.0 ns .. 402.8 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.2 μs   (155.1 μs .. 155.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.3 μs   (155.2 μs .. 155.4 μs)
std dev              298.0 ns   (202.9 ns .. 447.5 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 98.39 μs   (98.13 μs .. 98.68 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 98.23 μs   (98.05 μs .. 98.41 μs)
std dev              628.5 ns   (587.0 ns .. 696.8 ns)

Benchmark builder: FINISH
Benchmark generics-bench: RUNNING...
creating cabal cache file... done
benchmarking encode
time                 45.24 ms   (44.51 ms .. 45.94 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 45.11 ms   (44.63 ms .. 46.09 ms)
std dev              1.223 ms   (517.1 μs .. 2.175 ms)

benchmarking decode
time                 17.69 ms   (17.32 ms .. 18.01 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 17.54 ms   (17.12 ms .. 18.00 ms)
std dev              1.094 ms   (696.9 μs .. 1.564 ms)
variance introduced by outliers: 25% (moderately inflated)

benchmarking decode null
time                 11.13 ms   (10.91 ms .. 11.38 ms)
                     0.996 R²   (0.993 R² .. 0.998 R²)
mean                 11.04 ms   (10.87 ms .. 11.25 ms)
std dev              516.3 μs   (403.7 μs .. 752.9 μs)
variance introduced by outliers: 20% (moderately inflated)

benchmarking embarrassment/read
time                 636.6 ms   (630.6 ms .. 642.3 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 633.4 ms   (632.3 ms .. 634.3 ms)
std dev              1.272 ms   (0.0 s .. 1.443 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking embarrassment/show
time                 36.01 ms   (35.68 ms .. 36.34 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 35.91 ms   (35.70 ms .. 36.15 ms)
std dev              466.9 μs   (360.1 μs .. 624.2 μs)

Benchmark generics-bench: FINISH
Benchmark get: RUNNING...
benchmarking brackets/Binary 100kb, one chunk
time                 6.389 ms   (6.386 ms .. 6.392 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.399 ms   (6.396 ms .. 6.405 ms)
std dev              13.55 μs   (9.829 μs .. 19.18 μs)

benchmarking brackets/Binary 100kb, 100 byte chunks
time                 6.765 ms   (6.761 ms .. 6.769 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.758 ms   (6.752 ms .. 6.761 ms)
std dev              11.59 μs   (8.578 μs .. 17.34 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, one chunk
time                 2.799 ms   (2.795 ms .. 2.801 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.789 ms   (2.786 ms .. 2.791 ms)
std dev              8.461 μs   (7.624 μs .. 10.16 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, 100 byte chunks
time                 2.850 ms   (2.849 ms .. 2.853 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.857 ms   (2.855 ms .. 2.860 ms)
std dev              7.284 μs   (5.530 μs .. 10.14 μs)

benchmarking brackets/Attoparsec strict-bs 100kb
time                 2.780 ms   (2.774 ms .. 2.785 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.772 ms   (2.769 ms .. 2.774 ms)
std dev              7.711 μs   (6.367 μs .. 9.070 μs)

benchmarking brackets/Cereal strict-bs 100kb
time                 7.412 ms   (7.405 ms .. 7.418 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.405 ms   (7.400 ms .. 7.409 ms)
std dev              13.06 μs   (9.941 μs .. 19.19 μs)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Attoparsec
time                 26.77 ms   (26.36 ms .. 27.19 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 26.76 ms   (26.41 ms .. 27.76 ms)
std dev              1.183 ms   (446.9 μs .. 2.224 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Binary
time                 23.21 ms   (22.55 ms .. 23.85 ms)
                     0.997 R²   (0.996 R² .. 0.999 R²)
mean                 23.54 ms   (23.11 ms .. 24.02 ms)
std dev              1.072 ms   (759.7 μs .. 1.599 ms)
variance introduced by outliers: 14% (moderately inflated)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Cereal
time                 36.51 ms   (35.66 ms .. 37.67 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 36.87 ms   (36.07 ms .. 37.58 ms)
std dev              1.487 ms   (1.055 ms .. 2.126 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking comparison getWord8, 1MB/Attoparsec
time                 106.2 ms   (97.06 ms .. 112.5 ms)
                     0.987 R²   (0.959 R² .. 0.999 R²)
mean                 110.4 ms   (105.1 ms .. 115.0 ms)
std dev              7.760 ms   (4.973 ms .. 13.17 ms)
variance introduced by outliers: 20% (moderately inflated)

benchmarking comparison getWord8, 1MB/Binary
time                 65.89 ms   (62.69 ms .. 68.46 ms)
                     0.995 R²   (0.984 R² .. 0.999 R²)
mean                 67.49 ms   (65.98 ms .. 70.14 ms)
std dev              3.377 ms   (1.622 ms .. 5.548 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking comparison getWord8, 1MB/Cereal
time                 117.5 ms   (111.6 ms .. 123.7 ms)
                     0.993 R²   (0.969 R² .. 1.000 R²)
mean                 121.5 ms   (116.2 ms .. 124.4 ms)
std dev              5.973 ms   (2.750 ms .. 8.862 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 2 bytes
time                 34.27 ms   (33.87 ms .. 34.88 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.66 ms   (34.24 ms .. 35.57 ms)
std dev              1.235 ms   (592.4 μs .. 2.047 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB/chunk size 4 bytes
time                 25.83 ms   (25.33 ms .. 26.37 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 26.03 ms   (25.78 ms .. 26.29 ms)
std dev              566.6 μs   (411.0 μs .. 796.1 μs)

benchmarking getWord8 1MB/chunk size 8 bytes
time                 16.96 ms   (16.94 ms .. 16.98 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 16.98 ms   (16.97 ms .. 17.00 ms)
std dev              30.99 μs   (11.51 μs .. 60.32 μs)

benchmarking getWord8 1MB/chunk size 16 bytes
time                 17.47 ms   (17.31 ms .. 17.62 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 17.45 ms   (17.33 ms .. 17.98 ms)
std dev              504.5 μs   (124.2 μs .. 1.042 ms)

benchmarking getWord8 1MB Applicative/chunk size 2 bytes
time                 34.12 ms   (33.65 ms .. 34.64 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 34.17 ms   (33.40 ms .. 34.51 ms)
std dev              1.022 ms   (440.7 μs .. 1.788 ms)

benchmarking getWord8 1MB Applicative/chunk size 4 bytes
time                 18.49 ms   (18.24 ms .. 18.81 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 18.51 ms   (18.40 ms .. 18.68 ms)
std dev              316.8 μs   (203.3 μs .. 486.8 μs)

benchmarking getWord8 1MB Applicative/chunk size 8 bytes
time                 11.83 ms   (11.70 ms .. 11.98 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 11.77 ms   (11.68 ms .. 11.87 ms)
std dev              242.2 μs   (188.5 μs .. 355.2 μs)

benchmarking getWord8 1MB Applicative/chunk size 16 bytes
time                 7.444 ms   (7.397 ms .. 7.503 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 7.423 ms   (7.347 ms .. 7.488 ms)
std dev              210.3 μs   (130.6 μs .. 321.2 μs)
variance introduced by outliers: 11% (moderately inflated)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7769.8MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.8MB/s
1000MB of bytes read    in 0.413s, at: 2423.6MB/s
1000MB of words written in 0.114s, at: 8792.4MB/s
1000MB of words read    in 0.068s, at: 14690.1MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.5MB/s
1000MB of bytes read    in 0.820s, at: 1220.1MB/s
1000MB of words written in 0.113s, at: 8834.4MB/s
1000MB of words read    in 0.107s, at: 9346.8MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.4 MB/s write,   87.3 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  464.3 MB/s write,  153.1 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  843.1 MB/s write,  326.0 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1402.4 MB/s write,  839.1 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 038830410c1880e337cbfd85343ca78d07b11180.log.tmp 038830410c1880e337cbfd85343ca78d07b11180.log
