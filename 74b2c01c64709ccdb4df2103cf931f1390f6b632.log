
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 74b2c01c64709ccdb4df2103cf931f1390f6b632
Note: checking out '74b2c01c64709ccdb4df2103cf931f1390f6b632'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 74b2c01... Add instance for Natural.

Identifying

git log -n 1
commit 74b2c01c64709ccdb4df2103cf931f1390f6b632
Author: Lennart Kolmodin <kolmodin@gmail.com>
Date:   Thu Jan 1 21:26:18 2015 +0300

    Add instance for Natural.
    
    Natural is a new data type that comes with base-4.8 (GHC 7.10).
    We serialize it in the same way as we do with Integer.
    Since this is a new data type there are some ugly CPPs to handle whether
    Natural is there or not.
    Serialization tests have been added as well. Since QuickCheck doesn't yet
    implement instance Arbitrary Natural we do a workaround here.
    This fixes #63.

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1027      44.0%        410       2744
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1027      44.0%        410       2744

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.2.3...
cabal build
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.2.3...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
Preprocessing benchmark 'get' for binary-0.7.2.3...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.13 μs   (35.11 μs .. 35.16 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.13 μs   (35.12 μs .. 35.14 μs)
std dev              44.33 ns   (33.43 ns .. 59.54 ns)

benchmarking bounds/[Word8]
time                 42.69 μs   (42.68 μs .. 42.71 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.69 μs   (42.68 μs .. 42.70 μs)
std dev              29.85 ns   (17.59 ns .. 46.81 ns)

benchmarking small ByteString
time                 325.8 ns   (325.5 ns .. 326.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 326.1 ns   (325.8 ns .. 326.6 ns)
std dev              1.032 ns   (586.5 ps .. 1.837 ns)

benchmarking large ByteString
time                 320.8 ns   (320.6 ns .. 321.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 321.0 ns   (320.9 ns .. 321.2 ns)
std dev              537.2 ps   (479.9 ps .. 622.9 ps)

benchmarking length-prefixed ByteString
time                 6.718 μs   (6.717 μs .. 6.720 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.718 μs   (6.718 μs .. 6.719 μs)
std dev              2.345 ns   (1.998 ns .. 2.853 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 367.1 μs   (366.9 μs .. 367.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 367.0 μs   (367.0 μs .. 367.2 μs)
std dev              303.5 ns   (157.0 ns .. 509.3 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.6 μs   (224.4 μs .. 224.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.4 μs   (224.2 μs .. 224.5 μs)
std dev              464.3 ns   (359.9 ns .. 624.7 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.6 μs   (154.6 μs .. 154.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.6 μs   (154.5 μs .. 154.7 μs)
std dev              251.2 ns   (187.3 ns .. 335.8 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.91 μs   (97.80 μs .. 97.99 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.90 μs   (97.82 μs .. 97.96 μs)
std dev              214.2 ns   (127.8 ns .. 318.1 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.952 ms   (5.948 ms .. 5.955 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.963 ms   (5.959 ms .. 5.969 ms)
std dev              12.93 μs   (8.596 μs .. 21.91 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.164 ms   (6.161 ms .. 6.166 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.168 ms   (6.165 ms .. 6.171 ms)
std dev              9.595 μs   (7.528 μs .. 13.07 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.690 ms   (2.687 ms .. 2.693 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.688 ms   (2.687 ms .. 2.690 ms)
std dev              5.466 μs   (4.617 μs .. 6.630 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.761 ms   (2.760 ms .. 2.763 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.760 ms   (2.758 ms .. 2.762 ms)
std dev              6.155 μs   (4.367 μs .. 9.499 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.693 ms   (2.691 ms .. 2.695 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.692 ms   (2.691 ms .. 2.693 ms)
std dev              4.125 μs   (3.496 μs .. 4.784 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.420 ms   (7.416 ms .. 7.425 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.420 ms   (7.416 ms .. 7.424 ms)
std dev              11.28 μs   (8.193 μs .. 17.31 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 24.40 ms   (23.81 ms .. 25.10 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 24.59 ms   (24.23 ms .. 24.86 ms)
std dev              711.8 μs   (531.9 μs .. 973.4 μs)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.98 ms   (35.91 ms .. 37.99 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 36.68 ms   (36.21 ms .. 37.13 ms)
std dev              893.3 μs   (692.1 μs .. 1.309 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.61 ms   (25.96 ms .. 27.20 ms)
                     0.997 R²   (0.994 R² .. 0.999 R²)
mean                 26.70 ms   (26.28 ms .. 27.62 ms)
std dev              1.289 ms   (700.9 μs .. 2.211 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.893 ms   (1.893 ms .. 1.894 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.894 ms   (1.893 ms .. 1.896 ms)
std dev              2.897 μs   (1.092 μs .. 5.777 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.08 ms   (14.08 ms .. 14.09 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.08 ms   (14.08 ms .. 14.08 ms)
std dev              5.818 μs   (3.680 μs .. 9.746 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.230 ms   (2.224 ms .. 2.238 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.234 ms   (2.230 ms .. 2.238 ms)
std dev              14.08 μs   (11.39 μs .. 17.92 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.876 ms   (1.875 ms .. 1.876 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.876 ms   (1.876 ms .. 1.877 ms)
std dev              1.815 μs   (924.6 ns .. 3.354 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.794 ms   (5.792 ms .. 5.795 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.794 ms   (5.792 ms .. 5.795 ms)
std dev              4.233 μs   (3.499 μs .. 5.337 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.481 ms   (7.479 ms .. 7.484 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.484 ms   (7.482 ms .. 7.486 ms)
std dev              4.800 μs   (2.663 μs .. 8.780 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 10.63 ms   (10.63 ms .. 10.63 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 10.63 ms   (10.63 ms .. 10.64 ms)
std dev              10.59 μs   (4.135 μs .. 20.92 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 955.4 μs   (954.7 μs .. 956.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 955.2 μs   (954.7 μs .. 955.7 μs)
std dev              1.682 μs   (1.410 μs .. 2.117 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 547.9 μs   (547.1 μs .. 548.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 548.3 μs   (547.5 μs .. 549.2 μs)
std dev              2.800 μs   (2.035 μs .. 3.885 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 440.8 μs   (440.7 μs .. 440.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 440.9 μs   (440.8 μs .. 441.0 μs)
std dev              297.3 ns   (191.1 ns .. 446.7 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 491.3 μs   (491.2 μs .. 491.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 491.4 μs   (491.3 μs .. 491.6 μs)
std dev              408.1 ns   (169.0 ns .. 796.9 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.134s, at: 7460.3MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.0MB/s
1000MB of bytes read    in 0.413s, at: 2422.8MB/s
1000MB of words written in 0.114s, at: 8800.6MB/s
1000MB of words read    in 0.068s, at: 14726.7MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.6MB/s
1000MB of bytes read    in 0.830s, at: 1204.7MB/s
1000MB of words written in 0.113s, at: 8837.4MB/s
1000MB of words read    in 0.107s, at: 9347.4MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  261.5 MB/s write,   92.5 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  523.3 MB/s write,  160.5 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  939.6 MB/s write,  345.4 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1621.7 MB/s write,  860.5 MB/s read,   0.5 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 74b2c01c64709ccdb4df2103cf931f1390f6b632.log.tmp 74b2c01c64709ccdb4df2103cf931f1390f6b632.log
