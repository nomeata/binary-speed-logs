
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 76d2475f47dbbecc6aced2a4799db5ade11c392b
Note: checking out '76d2475f47dbbecc6aced2a4799db5ade11c392b'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 76d2475... Silence some warnings in benchmarks/Get.hs

Identifying

git log -n 1
commit 76d2475f47dbbecc6aced2a4799db5ade11c392b
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sun Aug 9 17:49:26 2015 +0200

    Silence some warnings in benchmarks/Get.hs

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[3 of 3] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.98 μs   (34.96 μs .. 35.01 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.02 μs   (35.00 μs .. 35.04 μs)
std dev              66.82 ns   (49.89 ns .. 87.28 ns)

benchmarking bounds/[Word8]
time                 42.82 μs   (42.78 μs .. 42.86 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.79 μs   (42.78 μs .. 42.82 μs)
std dev              61.28 ns   (47.99 ns .. 77.67 ns)

benchmarking small ByteString
time                 327.1 ns   (326.8 ns .. 327.3 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 327.6 ns   (327.4 ns .. 327.9 ns)
std dev              827.2 ps   (711.5 ps .. 981.8 ps)

benchmarking large ByteString
time                 327.1 ns   (326.9 ns .. 327.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 327.9 ns   (327.6 ns .. 328.3 ns)
std dev              1.168 ns   (936.0 ps .. 1.535 ns)

benchmarking length-prefixed ByteString
time                 7.530 μs   (7.524 μs .. 7.537 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.527 μs   (7.524 μs .. 7.531 μs)
std dev              10.88 ns   (7.522 ns .. 15.07 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 365.0 μs   (364.9 μs .. 365.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 365.5 μs   (365.3 μs .. 365.8 μs)
std dev              784.0 ns   (505.4 ns .. 1.428 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 223.9 μs   (223.8 μs .. 224.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.3 μs   (224.1 μs .. 224.6 μs)
std dev              764.3 ns   (492.4 ns .. 1.268 μs)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.6 μs   (154.4 μs .. 154.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.2 μs   (154.1 μs .. 154.3 μs)
std dev              375.8 ns   (320.2 ns .. 442.0 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.70 μs   (97.38 μs .. 97.90 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.31 μs   (97.22 μs .. 97.44 μs)
std dev              354.2 ns   (261.1 ns .. 439.7 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 6.283 ms   (6.279 ms .. 6.285 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.280 ms   (6.277 ms .. 6.283 ms)
std dev              9.666 μs   (6.797 μs .. 13.85 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.679 ms   (6.675 ms .. 6.682 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.673 ms   (6.668 ms .. 6.677 ms)
std dev              12.94 μs   (10.45 μs .. 16.50 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.695 ms   (2.692 ms .. 2.697 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.691 ms   (2.690 ms .. 2.693 ms)
std dev              4.817 μs   (3.981 μs .. 5.865 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.777 ms   (2.772 ms .. 2.781 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.773 ms   (2.771 ms .. 2.775 ms)
std dev              7.135 μs   (5.889 μs .. 8.974 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.677 ms   (2.676 ms .. 2.679 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.677 ms   (2.676 ms .. 2.679 ms)
std dev              4.640 μs   (3.669 μs .. 5.887 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.382 ms   (7.374 ms .. 7.388 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.380 ms   (7.375 ms .. 7.386 ms)
std dev              15.76 μs   (11.45 μs .. 23.91 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.20 ms   (22.72 ms .. 23.76 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.66 ms   (23.28 ms .. 24.03 ms)
std dev              844.7 μs   (596.2 μs .. 1.272 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.90 ms   (35.86 ms .. 37.85 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 37.01 ms   (36.43 ms .. 37.74 ms)
std dev              1.281 ms   (743.9 μs .. 2.031 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.53 ms   (25.98 ms .. 27.11 ms)
                     0.999 R²   (0.998 R² .. 0.999 R²)
mean                 26.68 ms   (26.35 ms .. 27.68 ms)
std dev              1.170 ms   (479.3 μs .. 2.055 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.957 ms   (1.956 ms .. 1.958 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.957 ms   (1.957 ms .. 1.958 ms)
std dev              1.617 μs   (1.152 μs .. 2.568 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.42 ms   (14.42 ms .. 14.43 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.41 ms   (14.41 ms .. 14.42 ms)
std dev              11.01 μs   (6.756 μs .. 16.87 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.180 ms   (2.180 ms .. 2.181 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.180 ms   (2.180 ms .. 2.180 ms)
std dev              554.2 ns   (428.2 ns .. 710.8 ns)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.008 ms   (2.007 ms .. 2.009 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.009 ms   (2.008 ms .. 2.011 ms)
std dev              4.526 μs   (3.234 μs .. 6.003 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.979 ms   (5.972 ms .. 5.986 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.974 ms   (5.972 ms .. 5.977 ms)
std dev              6.541 μs   (4.331 μs .. 9.470 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.667 ms   (7.653 ms .. 7.682 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.668 ms   (7.662 ms .. 7.674 ms)
std dev              17.76 μs   (15.78 μs .. 20.24 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 13.54 ms   (13.53 ms .. 13.55 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.54 ms   (13.53 ms .. 13.55 ms)
std dev              18.93 μs   (9.554 μs .. 35.55 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 972.7 μs   (972.3 μs .. 973.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 972.4 μs   (972.1 μs .. 972.8 μs)
std dev              1.197 μs   (852.1 ns .. 1.955 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 602.6 μs   (602.5 μs .. 602.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 602.7 μs   (602.6 μs .. 603.1 μs)
std dev              616.7 ns   (274.0 ns .. 1.169 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 504.6 μs   (504.5 μs .. 504.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 504.6 μs   (504.4 μs .. 504.9 μs)
std dev              757.4 ns   (590.8 ns .. 1.066 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 553.5 μs   (552.8 μs .. 554.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.3 μs   (554.2 μs .. 554.4 μs)
std dev              337.9 ns   (175.5 ns .. 588.0 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7777.3MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.8MB/s
1000MB of bytes read    in 0.413s, at: 2423.8MB/s
1000MB of words written in 0.114s, at: 8799.3MB/s
1000MB of words read    in 0.068s, at: 14698.7MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.6MB/s
1000MB of bytes read    in 0.820s, at: 1219.1MB/s
1000MB of words written in 0.113s, at: 8843.7MB/s
1000MB of words read    in 0.107s, at: 9344.8MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.9 MB/s write,   87.3 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  466.1 MB/s write,  153.0 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  839.8 MB/s write,  325.9 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1397.3 MB/s write,  837.6 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 76d2475f47dbbecc6aced2a4799db5ade11c392b.log.tmp 76d2475f47dbbecc6aced2a4799db5ade11c392b.log
