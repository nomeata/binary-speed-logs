
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 77c7d5f5ada4f74fdcde2d1046accc9ae7ff742b
Note: checking out '77c7d5f5ada4f74fdcde2d1046accc9ae7ff742b'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 77c7d5f... Update changelog.md with changes for 0.7.3.0

Identifying

git log -n 1
commit 77c7d5f5ada4f74fdcde2d1046accc9ae7ff742b
Author: Lennart Kolmodin <kolmodin@gmail.com>
Date:   Thu Jan 22 18:13:42 2015 +0100

    Update changelog.md with changes for 0.7.3.0

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1027      44.0%        410       2744
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1027      44.0%        410       2744

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.2.3...
cabal build
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.2.3...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
Preprocessing benchmark 'get' for binary-0.7.2.3...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.09 μs   (35.07 μs .. 35.12 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.13 μs   (35.09 μs .. 35.26 μs)
std dev              237.3 ns   (41.78 ns .. 447.4 ns)

benchmarking bounds/[Word8]
time                 42.69 μs   (42.68 μs .. 42.69 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.69 μs   (42.69 μs .. 42.70 μs)
std dev              11.35 ns   (9.617 ns .. 13.42 ns)

benchmarking small ByteString
time                 328.0 ns   (327.4 ns .. 328.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 327.6 ns   (327.3 ns .. 328.3 ns)
std dev              1.372 ns   (830.7 ps .. 2.409 ns)

benchmarking large ByteString
time                 327.1 ns   (326.9 ns .. 327.4 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 327.2 ns   (327.1 ns .. 327.4 ns)
std dev              419.7 ps   (338.2 ps .. 538.0 ps)

benchmarking length-prefixed ByteString
time                 6.720 μs   (6.718 μs .. 6.721 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.717 μs   (6.716 μs .. 6.719 μs)
std dev              4.202 ns   (3.384 ns .. 5.559 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.0 μs   (365.9 μs .. 366.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.3 μs   (366.1 μs .. 366.9 μs)
std dev              1.147 μs   (698.8 ns .. 1.754 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.5 μs   (224.2 μs .. 224.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.2 μs   (224.1 μs .. 224.4 μs)
std dev              601.4 ns   (429.7 ns .. 738.4 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.3 μs   (155.1 μs .. 155.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.6 μs   (154.5 μs .. 154.8 μs)
std dev              569.3 ns   (468.0 ns .. 720.1 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.96 μs   (97.81 μs .. 98.06 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.49 μs   (97.35 μs .. 97.64 μs)
std dev              515.7 ns   (482.6 ns .. 581.1 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.946 ms   (5.943 ms .. 5.950 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.954 ms   (5.951 ms .. 5.958 ms)
std dev              10.28 μs   (8.098 μs .. 15.37 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.161 ms   (6.157 ms .. 6.164 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.157 ms   (6.155 ms .. 6.160 ms)
std dev              8.661 μs   (6.656 μs .. 11.57 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.683 ms   (2.681 ms .. 2.685 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.690 ms   (2.688 ms .. 2.694 ms)
std dev              9.132 μs   (6.489 μs .. 14.50 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.761 ms   (2.759 ms .. 2.763 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.759 ms   (2.757 ms .. 2.760 ms)
std dev              5.459 μs   (4.211 μs .. 7.607 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.690 ms   (2.687 ms .. 2.694 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.686 ms   (2.685 ms .. 2.688 ms)
std dev              5.553 μs   (4.849 μs .. 6.431 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.415 ms   (7.410 ms .. 7.420 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.415 ms   (7.410 ms .. 7.418 ms)
std dev              11.49 μs   (7.055 μs .. 19.73 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.98 ms   (23.47 ms .. 24.51 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 24.01 ms   (23.52 ms .. 24.31 ms)
std dev              805.8 μs   (593.4 μs .. 1.133 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.57 ms   (35.55 ms .. 37.67 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 36.68 ms   (36.13 ms .. 37.52 ms)
std dev              1.295 ms   (741.4 μs .. 2.190 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.28 ms   (25.81 ms .. 26.77 ms)
                     0.999 R²   (0.997 R² .. 0.999 R²)
mean                 26.36 ms   (26.01 ms .. 27.26 ms)
std dev              1.159 ms   (504.4 μs .. 2.146 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.893 ms   (1.892 ms .. 1.893 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.892 ms   (1.892 ms .. 1.893 ms)
std dev              1.089 μs   (818.2 ns .. 1.531 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.04 ms   (14.03 ms .. 14.04 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.04 ms   (14.03 ms .. 14.04 ms)
std dev              4.121 μs   (3.044 μs .. 5.862 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.217 ms   (2.214 ms .. 2.221 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.214 ms   (2.211 ms .. 2.217 ms)
std dev              9.433 μs   (7.381 μs .. 12.12 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.876 ms   (1.876 ms .. 1.877 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.876 ms   (1.876 ms .. 1.877 ms)
std dev              1.704 μs   (1.135 μs .. 2.775 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.788 ms   (5.785 ms .. 5.791 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.786 ms   (5.785 ms .. 5.788 ms)
std dev              4.624 μs   (3.293 μs .. 6.977 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.475 ms   (7.473 ms .. 7.476 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.477 ms   (7.476 ms .. 7.480 ms)
std dev              4.396 μs   (2.026 μs .. 7.116 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 10.62 ms   (10.61 ms .. 10.62 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 10.61 ms   (10.61 ms .. 10.62 ms)
std dev              6.383 μs   (2.820 μs .. 12.03 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 955.0 μs   (954.6 μs .. 955.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 954.9 μs   (954.4 μs .. 955.3 μs)
std dev              1.331 μs   (1.116 μs .. 1.620 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 546.3 μs   (545.2 μs .. 547.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 545.8 μs   (545.0 μs .. 546.9 μs)
std dev              3.113 μs   (2.574 μs .. 3.944 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 441.2 μs   (441.0 μs .. 441.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 441.1 μs   (441.0 μs .. 441.2 μs)
std dev              322.8 ns   (253.0 ns .. 440.3 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 491.4 μs   (491.4 μs .. 491.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 491.4 μs   (491.4 μs .. 491.5 μs)
std dev              123.7 ns   (88.45 ns .. 191.0 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7774.3MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.3MB/s
1000MB of bytes read    in 0.413s, at: 2421.1MB/s
1000MB of words written in 0.114s, at: 8742.1MB/s
1000MB of words read    in 0.068s, at: 14714.8MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.4MB/s
1000MB of bytes read    in 0.830s, at: 1204.6MB/s
1000MB of words written in 0.113s, at: 8828.0MB/s
1000MB of words read    in 0.107s, at: 9347.5MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  261.5 MB/s write,   92.4 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  522.2 MB/s write,  160.3 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  938.2 MB/s write,  345.2 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1636.2 MB/s write,  859.3 MB/s read,   0.5 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 77c7d5f5ada4f74fdcde2d1046accc9ae7ff742b.log.tmp 77c7d5f5ada4f74fdcde2d1046accc9ae7ff742b.log
