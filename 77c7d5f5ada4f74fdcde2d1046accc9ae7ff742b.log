
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 77c7d5f5ada4f74fdcde2d1046accc9ae7ff742b
Note: checking out '77c7d5f5ada4f74fdcde2d1046accc9ae7ff742b'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 77c7d5f... Update changelog.md with changes for 0.7.3.0

Identifying

git log -n 1
commit 77c7d5f5ada4f74fdcde2d1046accc9ae7ff742b
Author: Lennart Kolmodin <kolmodin@gmail.com>
Date:   Thu Jan 22 18:13:42 2015 +0100

    Update changelog.md with changes for 0.7.3.0

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1307       1027      44.0%        410       2744
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1307       1027      44.0%        410       2744

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.2.3...
cabal build
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.2.3...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:402:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.2.3...
Preprocessing library binary-0.7.2.3...
In-place registering binary-0.7.2.3...
Preprocessing benchmark 'builder' for binary-0.7.2.3...
Preprocessing benchmark 'get' for binary-0.7.2.3...
Preprocessing benchmark 'bench' for binary-0.7.2.3...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.76 μs   (34.74 μs .. 34.78 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.77 μs   (34.76 μs .. 34.79 μs)
std dev              35.70 ns   (24.17 ns .. 59.75 ns)

benchmarking bounds/[Word8]
time                 42.67 μs   (42.67 μs .. 42.68 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.68 μs   (42.67 μs .. 42.69 μs)
std dev              25.40 ns   (18.34 ns .. 37.42 ns)

benchmarking small ByteString
time                 240.1 ns   (239.7 ns .. 240.3 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 239.5 ns   (239.3 ns .. 239.7 ns)
std dev              749.4 ps   (621.7 ps .. 898.1 ps)

benchmarking large ByteString
time                 239.4 ns   (239.2 ns .. 239.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 239.4 ns   (239.2 ns .. 239.5 ns)
std dev              461.1 ps   (377.6 ps .. 579.5 ps)

benchmarking length-prefixed ByteString
time                 6.805 μs   (6.804 μs .. 6.807 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.810 μs   (6.808 μs .. 6.811 μs)
std dev              3.760 ns   (3.039 ns .. 4.665 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 362.2 μs   (362.1 μs .. 362.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 362.4 μs   (362.3 μs .. 362.5 μs)
std dev              361.4 ns   (291.0 ns .. 508.3 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 221.8 μs   (221.6 μs .. 222.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 221.9 μs   (221.8 μs .. 222.0 μs)
std dev              372.8 ns   (267.1 ns .. 495.5 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 151.6 μs   (151.2 μs .. 152.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 151.9 μs   (151.7 μs .. 152.0 μs)
std dev              500.5 ns   (383.8 ns .. 602.3 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 94.55 μs   (94.27 μs .. 94.73 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 94.09 μs   (93.95 μs .. 94.26 μs)
std dev              514.3 ns   (428.2 ns .. 626.4 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.741 ms   (5.737 ms .. 5.743 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.750 ms   (5.747 ms .. 5.755 ms)
std dev              10.72 μs   (8.323 μs .. 13.70 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 5.949 ms   (5.946 ms .. 5.951 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.949 ms   (5.946 ms .. 5.952 ms)
std dev              8.372 μs   (5.703 μs .. 13.07 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.703 ms   (2.702 ms .. 2.705 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.703 ms   (2.701 ms .. 2.704 ms)
std dev              4.490 μs   (3.560 μs .. 6.425 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.773 ms   (2.771 ms .. 2.775 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.769 ms   (2.766 ms .. 2.771 ms)
std dev              8.100 μs   (5.660 μs .. 12.89 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.699 ms   (2.698 ms .. 2.700 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.700 ms   (2.700 ms .. 2.702 ms)
std dev              3.656 μs   (2.914 μs .. 4.754 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.687 ms   (7.681 ms .. 7.691 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.688 ms   (7.684 ms .. 7.693 ms)
std dev              13.05 μs   (9.457 μs .. 17.05 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 24.75 ms   (24.13 ms .. 25.46 ms)
                     0.996 R²   (0.993 R² .. 0.999 R²)
mean                 24.37 ms   (23.92 ms .. 24.79 ms)
std dev              957.8 μs   (729.5 μs .. 1.284 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.63 ms   (35.88 ms .. 37.46 ms)
                     0.999 R²   (0.998 R² .. 0.999 R²)
mean                 36.54 ms   (35.98 ms .. 36.90 ms)
std dev              879.0 μs   (546.0 μs .. 1.429 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.49 ms   (25.90 ms .. 27.12 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 26.64 ms   (26.27 ms .. 27.67 ms)
std dev              1.246 ms   (584.5 μs .. 2.255 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.893 ms   (1.893 ms .. 1.893 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.893 ms   (1.893 ms .. 1.894 ms)
std dev              1.281 μs   (777.5 ns .. 2.127 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 13.77 ms   (13.77 ms .. 13.77 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 13.77 ms   (13.77 ms .. 13.77 ms)
std dev              5.816 μs   (2.606 μs .. 11.51 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.217 ms   (2.213 ms .. 2.221 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.209 ms   (2.205 ms .. 2.213 ms)
std dev              12.06 μs   (9.917 μs .. 15.74 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.827 ms   (1.826 ms .. 1.827 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.826 ms   (1.826 ms .. 1.827 ms)
std dev              929.1 ns   (682.7 ns .. 1.410 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.602 ms   (5.600 ms .. 5.604 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.602 ms   (5.601 ms .. 5.604 ms)
std dev              3.481 μs   (2.753 μs .. 4.921 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.243 ms   (7.240 ms .. 7.246 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.242 ms   (7.240 ms .. 7.245 ms)
std dev              5.996 μs   (3.339 μs .. 10.59 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 10.43 ms   (10.42 ms .. 10.44 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 10.43 ms   (10.42 ms .. 10.43 ms)
std dev              10.47 μs   (5.197 μs .. 19.17 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 953.5 μs   (952.8 μs .. 954.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 953.4 μs   (953.0 μs .. 953.7 μs)
std dev              1.208 μs   (1.023 μs .. 1.523 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 551.4 μs   (550.7 μs .. 552.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 551.7 μs   (551.3 μs .. 552.3 μs)
std dev              1.760 μs   (1.430 μs .. 2.310 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 441.1 μs   (441.1 μs .. 441.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 441.1 μs   (441.1 μs .. 441.2 μs)
std dev              232.0 ns   (121.2 ns .. 360.9 ns)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 493.4 μs   (493.4 μs .. 493.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 493.5 μs   (493.4 μs .. 493.5 μs)
std dev              162.9 ns   (132.6 ns .. 201.9 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.280s, at: 3571.2MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.300s, at: 3333.1MB/s
1000MB of bytes read    in 0.416s, at: 2403.7MB/s
1000MB of words written in 0.116s, at: 8620.1MB/s
1000MB of words read    in 0.068s, at: 14705.0MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.808s, at: 1237.5MB/s
1000MB of bytes read    in 0.832s, at: 1201.8MB/s
1000MB of words written in 0.112s, at: 8928.0MB/s
1000MB of words read    in 0.112s, at: 8928.0MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  240.4 MB/s write,   94.0 MB/s read,   0.4 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  531.9 MB/s write,  163.4 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  961.5 MB/s write,  352.1 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1562.4 MB/s write,  892.8 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 77c7d5f5ada4f74fdcde2d1046accc9ae7ff742b.log.tmp 77c7d5f5ada4f74fdcde2d1046accc9ae7ff742b.log
