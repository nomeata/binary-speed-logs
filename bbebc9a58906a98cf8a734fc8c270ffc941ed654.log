
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout bbebc9a58906a98cf8a734fc8c270ffc941ed654
Note: checking out 'bbebc9a58906a98cf8a734fc8c270ffc941ed654'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at bbebc9a... Inline flush late to give the RULES a chanse to act

Identifying

git log -n 1
commit bbebc9a58906a98cf8a734fc8c270ffc941ed654
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Thu Jul 30 18:55:21 2015 +0200

    Inline flush late to give the RULES a chanse to act
    
    RULE:
      append flush flush = flush

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Warning: The package list for 'hackage.haskell.org' is 78 days old.
Run 'cabal update' to get the latest list of available packages.
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.80 μs   (34.78 μs .. 34.81 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.81 μs   (34.81 μs .. 34.82 μs)
std dev              25.87 ns   (21.54 ns .. 34.51 ns)

benchmarking bounds/[Word8]
time                 42.60 μs   (42.60 μs .. 42.60 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.60 μs   (42.60 μs .. 42.60 μs)
std dev              11.57 ns   (9.829 ns .. 13.94 ns)

benchmarking small ByteString
time                 331.8 ns   (331.6 ns .. 331.9 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 331.9 ns   (331.7 ns .. 332.1 ns)
std dev              546.0 ps   (472.0 ps .. 634.8 ps)

benchmarking large ByteString
time                 329.4 ns   (329.2 ns .. 329.5 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 329.3 ns   (329.1 ns .. 329.4 ns)
std dev              427.6 ps   (365.4 ps .. 509.5 ps)

benchmarking length-prefixed ByteString
time                 7.568 μs   (7.567 μs .. 7.569 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.570 μs   (7.569 μs .. 7.571 μs)
std dev              3.001 ns   (2.529 ns .. 3.863 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 364.7 μs   (364.6 μs .. 364.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 364.7 μs   (364.7 μs .. 364.8 μs)
std dev              100.9 ns   (77.95 ns .. 137.5 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.8 μs   (224.7 μs .. 225.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 225.0 μs   (224.9 μs .. 225.0 μs)
std dev              166.6 ns   (112.5 ns .. 243.8 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.5 μs   (154.3 μs .. 154.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.6 μs   (154.5 μs .. 154.7 μs)
std dev              383.6 ns   (253.1 ns .. 530.9 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.95 μs   (97.79 μs .. 98.16 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.87 μs   (97.76 μs .. 98.02 μs)
std dev              399.8 ns   (306.4 ns .. 570.2 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 6.009 ms   (6.007 ms .. 6.011 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.016 ms   (6.013 ms .. 6.020 ms)
std dev              11.31 μs   (7.138 μs .. 16.16 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.395 ms   (6.392 ms .. 6.398 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.391 ms   (6.388 ms .. 6.395 ms)
std dev              10.37 μs   (8.438 μs .. 13.15 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.729 ms   (2.728 ms .. 2.730 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.730 ms   (2.728 ms .. 2.731 ms)
std dev              5.006 μs   (3.619 μs .. 7.618 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.885 ms   (2.877 ms .. 2.896 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.907 ms   (2.899 ms .. 2.917 ms)
std dev              28.71 μs   (19.31 μs .. 41.47 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.715 ms   (2.713 ms .. 2.716 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.714 ms   (2.713 ms .. 2.716 ms)
std dev              4.418 μs   (3.316 μs .. 6.363 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.359 ms   (7.356 ms .. 7.362 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.359 ms   (7.354 ms .. 7.362 ms)
std dev              11.61 μs   (8.131 μs .. 20.03 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.02 ms   (22.65 ms .. 23.42 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.34 ms   (23.10 ms .. 23.68 ms)
std dev              663.2 μs   (467.8 μs .. 1.038 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.48 ms   (35.77 ms .. 37.40 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 36.58 ms   (35.81 ms .. 37.20 ms)
std dev              1.338 ms   (889.3 μs .. 1.998 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.24 ms   (25.73 ms .. 26.75 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 26.34 ms   (25.97 ms .. 27.24 ms)
std dev              1.152 ms   (546.8 μs .. 2.035 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.951 ms   (1.950 ms .. 1.951 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.951 ms   (1.951 ms .. 1.951 ms)
std dev              665.8 ns   (541.9 ns .. 867.4 ns)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.16 ms   (14.16 ms .. 14.17 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.16 ms   (14.16 ms .. 14.16 ms)
std dev              9.397 μs   (5.955 μs .. 14.42 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.312 ms   (2.307 ms .. 2.317 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.307 ms   (2.300 ms .. 2.310 ms)
std dev              16.30 μs   (10.96 μs .. 27.44 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 2.000 ms   (1.999 ms .. 2.001 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.000 ms   (1.999 ms .. 2.000 ms)
std dev              2.151 μs   (1.721 μs .. 2.729 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.956 ms   (5.952 ms .. 5.959 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.957 ms   (5.955 ms .. 5.958 ms)
std dev              4.725 μs   (3.697 μs .. 6.217 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.669 ms   (7.659 ms .. 7.678 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.670 ms   (7.666 ms .. 7.674 ms)
std dev              12.65 μs   (11.01 μs .. 15.61 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.87 ms   (12.86 ms .. 12.87 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.88 ms   (12.87 ms .. 12.90 ms)
std dev              26.22 μs   (5.875 μs .. 53.35 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 1.018 ms   (1.018 ms .. 1.019 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.019 ms   (1.018 ms .. 1.019 ms)
std dev              1.923 μs   (1.578 μs .. 2.377 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 601.4 μs   (601.1 μs .. 602.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 602.1 μs   (601.7 μs .. 602.7 μs)
std dev              1.692 μs   (1.362 μs .. 2.120 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 504.0 μs   (503.7 μs .. 504.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 504.2 μs   (503.9 μs .. 504.6 μs)
std dev              1.087 μs   (728.1 ns .. 1.702 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 553.6 μs   (553.5 μs .. 553.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 553.6 μs   (553.6 μs .. 553.7 μs)
std dev              233.6 ns   (146.4 ns .. 405.1 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.133s, at: 7521.0MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3356.8MB/s
1000MB of bytes read    in 0.413s, at: 2423.6MB/s
1000MB of words written in 0.114s, at: 8790.7MB/s
1000MB of words read    in 0.068s, at: 14632.9MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.6MB/s
1000MB of bytes read    in 0.819s, at: 1220.3MB/s
1000MB of words written in 0.113s, at: 8840.1MB/s
1000MB of words read    in 0.107s, at: 9345.6MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  260.4 MB/s write,   87.3 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  469.7 MB/s write,  153.3 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  861.9 MB/s write,  327.3 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1423.9 MB/s write,  838.5 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv bbebc9a58906a98cf8a734fc8c270ffc941ed654.log.tmp bbebc9a58906a98cf8a734fc8c270ffc941ed654.log
