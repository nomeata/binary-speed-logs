
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout bbebc9a58906a98cf8a734fc8c270ffc941ed654
Note: checking out 'bbebc9a58906a98cf8a734fc8c270ffc941ed654'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at bbebc9a... Inline flush late to give the RULES a chanse to act

Identifying

git log -n 1
commit bbebc9a58906a98cf8a734fc8c270ffc941ed654
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Thu Jul 30 18:55:21 2015 +0200

    Inline flush late to give the RULES a chanse to act
    
    RULE:
      append flush flush = flush

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1330       1030      43.6%        421       2781
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1330       1030      43.6%        421       2781

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.89 μs   (34.88 μs .. 34.91 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.93 μs   (34.92 μs .. 34.96 μs)
std dev              63.61 ns   (31.58 ns .. 121.3 ns)

benchmarking bounds/[Word8]
time                 42.80 μs   (42.79 μs .. 42.82 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.82 μs   (42.80 μs .. 42.85 μs)
std dev              81.01 ns   (66.32 ns .. 97.31 ns)

benchmarking small ByteString
time                 324.6 ns   (324.4 ns .. 324.8 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.6 ns   (324.5 ns .. 324.7 ns)
std dev              321.3 ps   (267.5 ps .. 394.7 ps)

benchmarking large ByteString
time                 324.1 ns   (324.0 ns .. 324.3 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.6 ns   (324.4 ns .. 324.8 ns)
std dev              684.7 ps   (611.4 ps .. 828.2 ps)

benchmarking length-prefixed ByteString
time                 7.490 μs   (7.489 μs .. 7.491 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.492 μs   (7.489 μs .. 7.498 μs)
std dev              12.73 ns   (5.114 ns .. 24.54 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 365.1 μs   (364.2 μs .. 366.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 364.4 μs   (364.3 μs .. 364.9 μs)
std dev              746.9 ns   (268.5 ns .. 1.425 μs)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.7 μs   (224.3 μs .. 224.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 224.2 μs   (224.1 μs .. 224.4 μs)
std dev              532.0 ns   (410.1 ns .. 694.7 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 154.8 μs   (154.6 μs .. 154.9 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 154.5 μs   (154.4 μs .. 154.6 μs)
std dev              307.4 ns   (217.3 ns .. 472.2 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.31 μs   (97.29 μs .. 97.34 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.31 μs   (97.29 μs .. 97.35 μs)
std dev              100.6 ns   (76.03 ns .. 138.3 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.844 ms   (5.839 ms .. 5.848 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.846 ms   (5.844 ms .. 5.851 ms)
std dev              9.445 μs   (6.898 μs .. 15.34 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.218 ms   (6.214 ms .. 6.222 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.207 ms   (6.202 ms .. 6.211 ms)
std dev              13.15 μs   (10.33 μs .. 17.70 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.687 ms   (2.686 ms .. 2.688 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.687 ms   (2.686 ms .. 2.688 ms)
std dev              4.414 μs   (3.478 μs .. 6.011 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.752 ms   (2.750 ms .. 2.754 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.757 ms   (2.754 ms .. 2.760 ms)
std dev              8.867 μs   (6.620 μs .. 12.16 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.670 ms   (2.668 ms .. 2.672 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.668 ms   (2.667 ms .. 2.669 ms)
std dev              4.313 μs   (3.609 μs .. 5.347 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 8.182 ms   (8.176 ms .. 8.188 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 8.184 ms   (8.179 ms .. 8.188 ms)
std dev              13.51 μs   (9.469 μs .. 22.12 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.08 ms   (22.57 ms .. 23.68 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.56 ms   (23.20 ms .. 23.92 ms)
std dev              831.0 μs   (554.0 μs .. 1.476 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.62 ms   (35.56 ms .. 37.67 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 36.80 ms   (36.31 ms .. 37.62 ms)
std dev              1.319 ms   (725.3 μs .. 2.122 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.67 ms   (26.21 ms .. 27.09 ms)
                     0.999 R²   (0.997 R² .. 0.999 R²)
mean                 26.81 ms   (26.45 ms .. 27.58 ms)
std dev              1.165 ms   (507.1 μs .. 2.026 ms)
variance introduced by outliers: 15% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.960 ms   (1.960 ms .. 1.961 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.961 ms   (1.960 ms .. 1.961 ms)
std dev              1.030 μs   (714.0 ns .. 1.692 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.10 ms   (14.09 ms .. 14.10 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.10 ms   (14.10 ms .. 14.11 ms)
std dev              9.555 μs   (6.013 μs .. 16.18 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.208 ms   (2.204 ms .. 2.212 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.210 ms   (2.207 ms .. 2.213 ms)
std dev              10.18 μs   (8.075 μs .. 13.35 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.999 ms   (1.999 ms .. 2.000 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.999 ms   (1.999 ms .. 2.000 ms)
std dev              2.253 μs   (1.749 μs .. 3.065 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.940 ms   (5.936 ms .. 5.944 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.939 ms   (5.937 ms .. 5.943 ms)
std dev              7.722 μs   (5.339 μs .. 12.40 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.633 ms   (7.625 ms .. 7.642 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.628 ms   (7.625 ms .. 7.631 ms)
std dev              8.520 μs   (6.471 μs .. 11.72 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.89 ms   (12.89 ms .. 12.90 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.90 ms   (12.90 ms .. 12.91 ms)
std dev              10.91 μs   (6.967 μs .. 16.84 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 979.0 μs   (978.1 μs .. 980.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 978.9 μs   (978.2 μs .. 979.7 μs)
std dev              2.662 μs   (2.201 μs .. 3.376 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 590.6 μs   (590.5 μs .. 590.8 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 590.7 μs   (590.6 μs .. 591.0 μs)
std dev              633.1 ns   (340.9 ns .. 1.243 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 504.7 μs   (504.5 μs .. 505.0 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 505.1 μs   (504.8 μs .. 505.5 μs)
std dev              1.177 μs   (840.7 ns .. 1.850 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.4 μs   (554.3 μs .. 554.6 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.7 μs   (554.5 μs .. 555.2 μs)
std dev              1.022 μs   (319.1 ns .. 1.839 μs)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7775.4MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.5MB/s
1000MB of bytes read    in 0.413s, at: 2422.8MB/s
1000MB of words written in 0.114s, at: 8794.0MB/s
1000MB of words read    in 0.068s, at: 14701.3MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.810s, at: 1235.2MB/s
1000MB of bytes read    in 0.820s, at: 1219.8MB/s
1000MB of words written in 0.113s, at: 8828.1MB/s
1000MB of words read    in 0.107s, at: 9343.7MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  261.0 MB/s write,   87.5 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  466.6 MB/s write,  153.5 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  846.8 MB/s write,  327.3 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1408.3 MB/s write,  841.6 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv bbebc9a58906a98cf8a734fc8c270ffc941ed654.log.tmp bbebc9a58906a98cf8a734fc8c270ffc941ed654.log
