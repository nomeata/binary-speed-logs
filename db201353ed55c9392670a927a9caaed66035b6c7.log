
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout db201353ed55c9392670a927a9caaed66035b6c7
Note: checking out 'db201353ed55c9392670a927a9caaed66035b6c7'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at db20135... Merge branch 'feature/void-binary-instance'

Identifying

git log -n 1
commit db201353ed55c9392670a927a9caaed66035b6c7
Merge: 0b7abd9 0adaed9
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Wed Nov 11 11:51:36 2015 +0100

    Merge branch 'feature/void-binary-instance'

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1339       1032      43.5%        422       2793
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1339       1032      43.5%        422       2793

Building

cabal configure --enable-benchmarks
Warning: The package list for 'hackage.haskell.org' is 79 days old.
Run 'cabal update' to get the latest list of available packages.
Resolving dependencies...
Configuring binary-0.7.6.1...
cabal build
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
[ 1 of 11] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 2 of 11] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Builder.o )
[ 3 of 11] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[ 4 of 11] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Put.o )
[ 5 of 11] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Get.o )
[ 6 of 11] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Class.o )
[ 7 of 11] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary/Generic.o )
[ 8 of 11] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/generics-bench/generics-bench-tmp/Data/Binary.o )
[ 9 of 11] Compiling GenericsBenchTypes ( benchmarks/GenericsBenchTypes.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchTypes.o )
[10 of 11] Compiling GenericsBenchCache ( benchmarks/GenericsBenchCache.hs, dist/build/generics-bench/generics-bench-tmp/GenericsBenchCache.o )
[11 of 11] Compiling Main             ( benchmarks/GenericsBench.hs, dist/build/generics-bench/generics-bench-tmp/Main.o )
Linking dist/build/generics-bench/generics-bench ...
Preprocessing benchmark 'get' for binary-0.7.6.1...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:193:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.6.1...
Preprocessing library binary-0.7.6.1...
In-place registering binary-0.7.6.1...
Preprocessing benchmark 'builder' for binary-0.7.6.1...
Preprocessing benchmark 'generics-bench' for binary-0.7.6.1...
Preprocessing benchmark 'get' for binary-0.7.6.1...
Preprocessing benchmark 'bench' for binary-0.7.6.1...
Linking dist/build/bench/bench ...
Running 4 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 34.85 μs   (34.82 μs .. 34.91 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 34.87 μs   (34.83 μs .. 35.00 μs)
std dev              260.0 ns   (22.07 ns .. 500.1 ns)

benchmarking bounds/[Word8]
time                 42.81 μs   (42.81 μs .. 42.83 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.84 μs   (42.83 μs .. 42.85 μs)
std dev              31.18 ns   (23.52 ns .. 44.61 ns)

benchmarking small ByteString
time                 325.7 ns   (325.5 ns .. 326.0 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 326.4 ns   (326.2 ns .. 326.6 ns)
std dev              687.1 ps   (598.3 ps .. 814.4 ps)

benchmarking large ByteString
time                 321.7 ns   (321.6 ns .. 321.9 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 322.0 ns   (321.9 ns .. 322.2 ns)
std dev              499.6 ps   (389.8 ps .. 651.8 ps)

benchmarking length-prefixed ByteString
time                 6.094 μs   (6.092 μs .. 6.095 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.093 μs   (6.092 μs .. 6.095 μs)
std dev              4.625 ns   (2.605 ns .. 8.265 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 366.4 μs   (366.3 μs .. 366.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 366.3 μs   (366.1 μs .. 366.4 μs)
std dev              372.5 ns   (299.8 ns .. 457.8 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 225.0 μs   (224.8 μs .. 225.2 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 225.0 μs   (224.9 μs .. 225.2 μs)
std dev              453.8 ns   (336.8 ns .. 650.0 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.0 μs   (154.8 μs .. 155.3 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.1 μs   (154.9 μs .. 155.3 μs)
std dev              525.4 ns   (394.8 ns .. 747.0 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 98.22 μs   (98.12 μs .. 98.30 μs)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 98.61 μs   (98.16 μs .. 100.8 μs)
std dev              2.780 μs   (199.4 ns .. 6.359 μs)
variance introduced by outliers: 25% (moderately inflated)

Benchmark builder: FINISH
Benchmark generics-bench: RUNNING...
creating cabal cache file... done
benchmarking encode
time                 45.77 ms   (44.97 ms .. 46.53 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 45.71 ms   (45.24 ms .. 46.75 ms)
std dev              1.321 ms   (508.5 μs .. 2.339 ms)

benchmarking decode
time                 17.84 ms   (17.45 ms .. 18.20 ms)
                     0.997 R²   (0.995 R² .. 0.999 R²)
mean                 17.74 ms   (17.24 ms .. 18.21 ms)
std dev              1.147 ms   (767.8 μs .. 1.660 ms)
variance introduced by outliers: 29% (moderately inflated)

benchmarking decode null
time                 11.16 ms   (10.93 ms .. 11.40 ms)
                     0.996 R²   (0.993 R² .. 0.998 R²)
mean                 11.07 ms   (10.89 ms .. 11.30 ms)
std dev              544.1 μs   (426.2 μs .. 768.3 μs)
variance introduced by outliers: 23% (moderately inflated)

benchmarking embarrassment/read
time                 640.8 ms   (633.4 ms .. 648.6 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 636.7 ms   (635.3 ms .. 637.8 ms)
std dev              1.719 ms   (0.0 s .. 1.922 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking embarrassment/show
time                 36.28 ms   (35.95 ms .. 36.59 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 36.15 ms   (35.90 ms .. 36.39 ms)
std dev              478.9 μs   (362.1 μs .. 638.7 μs)

Benchmark generics-bench: FINISH
Benchmark get: RUNNING...
benchmarking brackets/Binary 100kb, one chunk
time                 6.372 ms   (6.351 ms .. 6.400 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.379 ms   (6.364 ms .. 6.400 ms)
std dev              54.09 μs   (38.62 μs .. 74.59 μs)

benchmarking brackets/Binary 100kb, 100 byte chunks
time                 6.708 ms   (6.697 ms .. 6.716 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.699 ms   (6.688 ms .. 6.714 ms)
std dev              34.36 μs   (27.18 μs .. 47.95 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, one chunk
time                 2.748 ms   (2.743 ms .. 2.752 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.747 ms   (2.742 ms .. 2.755 ms)
std dev              19.00 μs   (13.02 μs .. 31.09 μs)

benchmarking brackets/Attoparsec lazy-bs 100kb, 100 byte chunks
time                 2.859 ms   (2.854 ms .. 2.863 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.864 ms   (2.859 ms .. 2.869 ms)
std dev              15.80 μs   (12.51 μs .. 21.75 μs)

benchmarking brackets/Attoparsec strict-bs 100kb
time                 2.724 ms   (2.719 ms .. 2.729 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.724 ms   (2.720 ms .. 2.732 ms)
std dev              18.77 μs   (13.42 μs .. 29.24 μs)

benchmarking brackets/Cereal strict-bs 100kb
time                 7.323 ms   (7.306 ms .. 7.339 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.323 ms   (7.310 ms .. 7.339 ms)
std dev              44.46 μs   (33.45 μs .. 72.70 μs)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Attoparsec
time                 26.68 ms   (26.11 ms .. 27.24 ms)
                     0.998 R²   (0.995 R² .. 0.999 R²)
mean                 26.80 ms   (26.46 ms .. 27.18 ms)
std dev              809.6 μs   (589.9 μs .. 1.107 ms)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Binary
time                 23.77 ms   (23.44 ms .. 24.13 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 23.85 ms   (23.48 ms .. 24.33 ms)
std dev              949.5 μs   (543.9 μs .. 1.810 ms)

benchmarking comparison getStruct4, 1MB of struct of 4 Word8s/Cereal
time                 37.35 ms   (36.76 ms .. 38.15 ms)
                     0.999 R²   (0.998 R² .. 1.000 R²)
mean                 37.25 ms   (36.76 ms .. 37.59 ms)
std dev              801.8 μs   (540.9 μs .. 1.231 ms)

benchmarking comparison getWord8, 1MB/Attoparsec
time                 103.7 ms   (95.71 ms .. 114.4 ms)
                     0.984 R²   (0.959 R² .. 0.997 R²)
mean                 105.4 ms   (99.97 ms .. 110.5 ms)
std dev              8.210 ms   (5.193 ms .. 12.95 ms)
variance introduced by outliers: 21% (moderately inflated)

benchmarking comparison getWord8, 1MB/Binary
time                 66.30 ms   (63.58 ms .. 69.88 ms)
                     0.995 R²   (0.985 R² .. 0.999 R²)
mean                 66.85 ms   (64.98 ms .. 68.32 ms)
std dev              2.908 ms   (2.127 ms .. 3.977 ms)

benchmarking comparison getWord8, 1MB/Cereal
time                 117.7 ms   (108.0 ms .. 128.6 ms)
                     0.988 R²   (0.964 R² .. 0.997 R²)
mean                 122.3 ms   (117.8 ms .. 126.9 ms)
std dev              6.867 ms   (4.644 ms .. 9.350 ms)
variance introduced by outliers: 12% (moderately inflated)

benchmarking getWord8 1MB/chunk size 2 bytes
time                 34.52 ms   (33.43 ms .. 35.52 ms)
                     0.995 R²   (0.987 R² .. 0.998 R²)
mean                 35.09 ms   (34.18 ms .. 36.12 ms)
std dev              1.899 ms   (1.407 ms .. 2.635 ms)
variance introduced by outliers: 18% (moderately inflated)

benchmarking getWord8 1MB/chunk size 4 bytes
time                 26.03 ms   (25.62 ms .. 26.55 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 25.75 ms   (25.21 ms .. 26.12 ms)
std dev              1.001 ms   (588.2 μs .. 1.770 ms)

benchmarking getWord8 1MB/chunk size 8 bytes
time                 18.82 ms   (18.72 ms .. 18.93 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 18.95 ms   (18.87 ms .. 19.12 ms)
std dev              276.1 μs   (138.5 μs .. 492.0 μs)

benchmarking getWord8 1MB/chunk size 16 bytes
time                 18.03 ms   (17.91 ms .. 18.15 ms)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 18.20 ms   (18.11 ms .. 18.32 ms)
std dev              248.9 μs   (173.8 μs .. 336.7 μs)

benchmarking getWord8 1MB Applicative/chunk size 2 bytes
time                 35.63 ms   (34.60 ms .. 36.36 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 35.34 ms   (34.80 ms .. 35.98 ms)
std dev              1.201 ms   (822.8 μs .. 1.695 ms)
variance introduced by outliers: 11% (moderately inflated)

benchmarking getWord8 1MB Applicative/chunk size 4 bytes
time                 22.67 ms   (22.02 ms .. 23.34 ms)
                     0.996 R²   (0.993 R² .. 0.998 R²)
mean                 22.27 ms   (21.76 ms .. 22.66 ms)
std dev              1.082 ms   (725.0 μs .. 1.639 ms)
variance introduced by outliers: 19% (moderately inflated)

benchmarking getWord8 1MB Applicative/chunk size 8 bytes
time                 12.74 ms   (12.40 ms .. 13.08 ms)
                     0.996 R²   (0.994 R² .. 0.998 R²)
mean                 12.71 ms   (12.53 ms .. 12.85 ms)
std dev              394.3 μs   (322.3 μs .. 484.4 μs)
variance introduced by outliers: 10% (moderately inflated)

benchmarking getWord8 1MB Applicative/chunk size 16 bytes
time                 8.346 ms   (8.262 ms .. 8.423 ms)
                     0.999 R²   (0.999 R² .. 1.000 R²)
mean                 8.364 ms   (8.285 ms .. 8.472 ms)
std dev              263.3 μs   (147.0 μs .. 445.3 μs)
variance introduced by outliers: 11% (moderately inflated)

benchmarking roll/foldr
time                 458.5 ms   (456.9 ms .. 459.4 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 458.5 ms   (458.2 ms .. 458.6 ms)
std dev              239.9 μs   (0.0 s .. 256.5 μs)
variance introduced by outliers: 19% (moderately inflated)

benchmarking roll/foldl'
time                 374.5 ms   (373.9 ms .. 375.4 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 373.7 ms   (373.5 ms .. 373.9 ms)
std dev              301.1 μs   (0.0 s .. 332.4 μs)
variance introduced by outliers: 19% (moderately inflated)

benchmarking Integer/decode
time                 380.4 ms   (380.3 ms .. 380.5 ms)
                     1.000 R²   (NaN R² .. 1.000 R²)
mean                 381.4 ms   (381.1 ms .. 381.6 ms)
std dev              368.4 μs   (0.0 s .. 411.5 μs)
variance introduced by outliers: 19% (moderately inflated)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.129s, at: 7764.8MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.7MB/s
1000MB of bytes read    in 0.413s, at: 2423.1MB/s
1000MB of words written in 0.114s, at: 8773.5MB/s
1000MB of words read    in 0.068s, at: 14697.2MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.3MB/s
1000MB of bytes read    in 0.820s, at: 1219.9MB/s
1000MB of words written in 0.113s, at: 8813.1MB/s
1000MB of words read    in 0.107s, at: 9342.1MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  259.5 MB/s write,   87.2 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  464.4 MB/s write,  152.6 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  847.5 MB/s write,  326.3 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1402.1 MB/s write,  775.6 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv db201353ed55c9392670a927a9caaed66035b6c7.log.tmp db201353ed55c9392670a927a9caaed66035b6c7.log
