
Cloning

git clone --recursive --reference binary-master git://github.com/kolmodin/binary.git binary-tmp-REV
Cloning into 'binary-tmp-REV'...
git checkout 5faca823298c26b9fe32bd50dbe61f2ffa73a037
Note: checking out '5faca823298c26b9fe32bd50dbe61f2ffa73a037'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

  git checkout -b new_branch_name

HEAD is now at 5faca82... Sync dependencies in .travis.yml to binary.cabal

Identifying

git log -n 1
commit 5faca823298c26b9fe32bd50dbe61f2ffa73a037
Author: Lennart Kolmodin <kolmodin@google.com>
Date:   Sun May 31 16:47:01 2015 +0200

    Sync dependencies in .travis.yml to binary.cabal

Code stats

ohcount src/
Examining 14 file(s)

                          Ohloh Line Count Summary                          

Language          Files       Code    Comment  Comment %      Blank      Total
----------------  -----  ---------  ---------  ---------  ---------  ---------
haskell               9       1309       1026      43.9%        418       2753
----------------  -----  ---------  ---------  ---------  ---------  ---------
Total                 9       1309       1026      43.9%        418       2753

Building

cabal configure --enable-benchmarks
Resolving dependencies...
Configuring binary-0.7.4.0...
cabal build
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder.Internal ( src/Data/Binary/Builder/Internal.hs, dist/build/Data/Binary/Builder/Internal.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/Data/Binary/Builder.o )
[5 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/Data/Binary/Get.o )

src/Data/Binary/Get.hs:206:1: Warning:
    The import of `Control.Applicative' is redundant
      except perhaps to import instances from `Control.Applicative'
    To import instances alone, use: import Control.Applicative()
[6 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/Data/Binary/Put.o )
[7 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/Data/Binary/Class.o )
[8 of 9] Compiling Data.Binary.Generic ( src/Data/Binary/Generic.hs, dist/build/Data/Binary/Generic.o )
[9 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/Data/Binary.o )
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
[1 of 3] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/builder/builder-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 3] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/builder/builder-tmp/Data/Binary/Builder.o )
[3 of 3] Compiling Main             ( benchmarks/Builder.hs, dist/build/builder/builder-tmp/Main.o )
Linking dist/build/builder/builder ...
Preprocessing benchmark 'get' for binary-0.7.4.0...
[1 of 8] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/get/get-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 8] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/get/get-tmp/Data/Binary/Builder.o )
[3 of 8] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/get/get-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 8] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/get/get-tmp/Data/Binary/Put.o )
[5 of 8] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/get/get-tmp/Data/Binary/Get.o )
[6 of 8] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/get/get-tmp/Data/Binary/Class.o )
[7 of 8] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/get/get-tmp/Data/Binary.o )
[8 of 8] Compiling Main             ( benchmarks/Get.hs, dist/build/get/get-tmp/Main.o )
Linking dist/build/get/get ...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
[1 of 9] Compiling Data.Binary.Builder.Base ( src/Data/Binary/Builder/Base.hs, dist/build/bench/bench-tmp/Data/Binary/Builder/Base.o )

src/Data/Binary/Builder/Base.hs:192:37: Warning:
    In the use of `inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[2 of 9] Compiling Data.Binary.Builder ( src/Data/Binary/Builder.hs, dist/build/bench/bench-tmp/Data/Binary/Builder.o )
[3 of 9] Compiling Data.Binary.Get.Internal ( src/Data/Binary/Get/Internal.hs, dist/build/bench/bench-tmp/Data/Binary/Get/Internal.o )

src/Data/Binary/Get/Internal.hs:417:21: Warning:
    In the use of `B.inlinePerformIO'
    (imported from Data.ByteString.Internal):
    Deprecated: "If you think you know what you are doing, use 'unsafePerformIO'. If you are sure you know what you are doing, use 'unsafeDupablePerformIO'. If you enjoy sharing an address space with a malevolent agent of chaos, try 'accursedUnutterablePerformIO'."
[4 of 9] Compiling Data.Binary.Get  ( src/Data/Binary/Get.hs, dist/build/bench/bench-tmp/Data/Binary/Get.o )
[5 of 9] Compiling Data.Binary.Put  ( src/Data/Binary/Put.hs, dist/build/bench/bench-tmp/Data/Binary/Put.o )
[6 of 9] Compiling Data.Binary.Class ( src/Data/Binary/Class.hs, dist/build/bench/bench-tmp/Data/Binary/Class.o )
[7 of 9] Compiling Data.Binary      ( src/Data/Binary.hs, dist/build/bench/bench-tmp/Data/Binary.o )
[8 of 9] Compiling MemBench         ( benchmarks/MemBench.hs, dist/build/bench/bench-tmp/MemBench.o )
[9 of 9] Compiling Main             ( benchmarks/Benchmark.hs, dist/build/bench/bench-tmp/Main.o )
Linking dist/build/bench/bench ...

Benchmarking

cabal bench
Building binary-0.7.4.0...
Preprocessing library binary-0.7.4.0...
In-place registering binary-0.7.4.0...
Preprocessing benchmark 'builder' for binary-0.7.4.0...
Preprocessing benchmark 'get' for binary-0.7.4.0...
Preprocessing benchmark 'bench' for binary-0.7.4.0...
Linking dist/build/bench/bench ...
Running 3 benchmarks...
Benchmark builder: RUNNING...
benchmarking [Word8]
time                 35.11 μs   (35.10 μs .. 35.12 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 35.11 μs   (35.10 μs .. 35.12 μs)
std dev              22.51 ns   (17.83 ns .. 29.41 ns)

benchmarking bounds/[Word8]
time                 42.65 μs   (42.64 μs .. 42.67 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 42.65 μs   (42.64 μs .. 42.66 μs)
std dev              29.90 ns   (19.15 ns .. 42.66 ns)

benchmarking small ByteString
time                 324.9 ns   (324.7 ns .. 325.1 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 324.9 ns   (324.8 ns .. 325.1 ns)
std dev              621.5 ps   (476.5 ps .. 826.1 ps)

benchmarking large ByteString
time                 323.0 ns   (322.8 ns .. 323.2 ns)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 323.6 ns   (323.4 ns .. 323.9 ns)
std dev              866.8 ps   (771.0 ps .. 1.008 ns)

benchmarking length-prefixed ByteString
time                 6.711 μs   (6.709 μs .. 6.713 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.708 μs   (6.707 μs .. 6.709 μs)
std dev              3.773 ns   (2.895 ns .. 5.636 ns)

benchmarking Host endian/1MB of Word8 in chunks of 16
time                 367.0 μs   (366.8 μs .. 367.5 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 367.0 μs   (366.9 μs .. 367.1 μs)
std dev              311.3 ns   (184.9 ns .. 540.4 ns)

benchmarking Host endian/1MB of Word16 in chunks of 16
time                 224.7 μs   (224.5 μs .. 225.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 225.1 μs   (224.9 μs .. 225.2 μs)
std dev              408.3 ns   (295.6 ns .. 561.7 ns)

benchmarking Host endian/1MB of Word32 in chunks of 16
time                 155.0 μs   (154.9 μs .. 155.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 155.0 μs   (154.9 μs .. 155.1 μs)
std dev              187.4 ns   (140.0 ns .. 295.2 ns)

benchmarking Host endian/1MB of Word64 in chunks of 16
time                 97.19 μs   (97.16 μs .. 97.22 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 97.22 μs   (97.19 μs .. 97.26 μs)
std dev              109.2 ns   (84.97 ns .. 169.3 ns)

Benchmark builder: FINISH
Benchmark get: RUNNING...
benchmarking brackets 100kb one chunk input
time                 5.961 ms   (5.959 ms .. 5.964 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.969 ms   (5.966 ms .. 5.973 ms)
std dev              11.40 μs   (7.758 μs .. 16.92 μs)

benchmarking brackets 100kb in 100 byte chunks
time                 6.334 ms   (6.329 ms .. 6.339 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 6.327 ms   (6.322 ms .. 6.331 ms)
std dev              13.14 μs   (9.804 μs .. 17.43 μs)

benchmarking Attoparsec lazy-bs brackets 100kb one chunk
time                 2.746 ms   (2.744 ms .. 2.748 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.745 ms   (2.744 ms .. 2.747 ms)
std dev              5.184 μs   (4.246 μs .. 7.050 μs)

benchmarking Attoparsec lazy-bs brackets 100kb in 100 byte chunks
time                 2.838 ms   (2.836 ms .. 2.839 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.838 ms   (2.836 ms .. 2.841 ms)
std dev              8.298 μs   (5.790 μs .. 12.28 μs)

benchmarking Attoparsec strict-bs brackets 100kb
time                 2.737 ms   (2.736 ms .. 2.739 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.737 ms   (2.736 ms .. 2.739 ms)
std dev              4.912 μs   (4.005 μs .. 6.310 μs)

benchmarking Cereal strict-bs brackets 100kb
time                 7.466 ms   (7.458 ms .. 7.475 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.464 ms   (7.458 ms .. 7.471 ms)
std dev              19.37 μs   (14.64 μs .. 27.31 μs)

benchmarking Binary getStruct4 1MB struct of 4 word8
time                 23.22 ms   (22.70 ms .. 23.77 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 23.70 ms   (23.32 ms .. 24.06 ms)
std dev              834.6 μs   (575.5 μs .. 1.219 ms)

benchmarking Cereal getStruct4 1MB struct of 4 word8
time                 36.89 ms   (35.89 ms .. 37.91 ms)
                     0.998 R²   (0.996 R² .. 0.999 R²)
mean                 37.05 ms   (36.46 ms .. 37.86 ms)
std dev              1.289 ms   (754.0 μs .. 2.099 ms)

benchmarking Attoparsec getStruct4 1MB struct of 4 word8
time                 26.57 ms   (25.98 ms .. 27.22 ms)
                     0.998 R²   (0.997 R² .. 0.999 R²)
mean                 26.67 ms   (26.28 ms .. 27.51 ms)
std dev              1.213 ms   (540.9 μs .. 2.138 ms)
variance introduced by outliers: 16% (moderately inflated)

benchmarking Binary getWord8 1MB chunk size 1 byte
time                 1.960 ms   (1.959 ms .. 1.960 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 1.960 ms   (1.960 ms .. 1.960 ms)
std dev              830.1 ns   (630.0 ns .. 1.206 μs)

benchmarking Cereal getWord8 1MB chunk size 1 byte
time                 14.20 ms   (14.19 ms .. 14.20 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 14.19 ms   (14.18 ms .. 14.19 ms)
std dev              10.00 μs   (6.578 μs .. 15.81 μs)

benchmarking Attoparsec getWord8 1MB chunk size 1 byte
time                 2.344 ms   (2.337 ms .. 2.351 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.350 ms   (2.345 ms .. 2.355 ms)
std dev              17.38 μs   (13.87 μs .. 22.39 μs)

benchmarking getWord8 1MB chunk size 2 bytes
time                 1.999 ms   (1.998 ms .. 2.000 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 2.001 ms   (2.000 ms .. 2.005 ms)
std dev              6.624 μs   (2.906 μs .. 11.40 μs)

benchmarking getWord8 1MB chunk size 4 bytes
time                 5.959 ms   (5.954 ms .. 5.963 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 5.956 ms   (5.954 ms .. 5.958 ms)
std dev              5.827 μs   (4.684 μs .. 7.422 μs)

benchmarking getWord8 1MB chunk size 8 bytes
time                 7.659 ms   (7.650 ms .. 7.666 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 7.657 ms   (7.653 ms .. 7.661 ms)
std dev              10.62 μs   (8.852 μs .. 13.37 μs)

benchmarking getWord8 1MB chunk size 16 bytes
time                 12.87 ms   (12.86 ms .. 12.88 ms)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 12.88 ms   (12.87 ms .. 12.88 ms)
std dev              15.92 μs   (9.576 μs .. 23.66 μs)

benchmarking getWord8 1MB chunk size 2 bytes Applicative
time                 976.0 μs   (975.4 μs .. 976.7 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 975.9 μs   (975.5 μs .. 976.3 μs)
std dev              1.386 μs   (1.152 μs .. 1.749 μs)

benchmarking getWord8 1MB chunk size 4 bytes Applicative
time                 601.3 μs   (599.5 μs .. 602.1 μs)
                     1.000 R²   (0.999 R² .. 1.000 R²)
mean                 602.3 μs   (602.2 μs .. 602.9 μs)
std dev              958.1 ns   (421.6 ns .. 1.835 μs)

benchmarking getWord8 1MB chunk size 8 bytes Applicative
time                 504.2 μs   (503.9 μs .. 504.4 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 504.1 μs   (504.0 μs .. 504.3 μs)
std dev              633.2 ns   (463.8 ns .. 1.051 μs)

benchmarking getWord8 1MB chunk size 16 bytes Applicative
time                 554.7 μs   (554.4 μs .. 555.1 μs)
                     1.000 R²   (1.000 R² .. 1.000 R²)
mean                 554.5 μs   (554.4 μs .. 554.7 μs)
std dev              440.2 ns   (277.6 ns .. 686.2 ns)

Benchmark get: FINISH
Benchmark bench: RUNNING...
1000MB of setup         in 0.132s, at: 7556.4MB/s

C memory throughput benchmarks:
1000MB of bytes written in 0.298s, at: 3355.8MB/s
1000MB of bytes read    in 0.413s, at: 2422.8MB/s
1000MB of words written in 0.114s, at: 8796.5MB/s
1000MB of words read    in 0.068s, at: 14748.8MB/s

Haskell memory throughput benchmarks:
1000MB of bytes written in 0.809s, at: 1235.3MB/s
1000MB of bytes read    in 0.820s, at: 1219.9MB/s
1000MB of words written in 0.113s, at: 8825.7MB/s
1000MB of words read    in 0.107s, at: 9348.2MB/s

Binary (de)serialisation benchmarks:
100MB of Word8  in chunks of 16 (  Host endian):  261.1 MB/s write,   87.6 MB/s read,   0.3 get/put-ratio
100MB of Word16 in chunks of 16 (  Host endian):  467.5 MB/s write,  153.1 MB/s read,   0.3 get/put-ratio
100MB of Word32 in chunks of 16 (  Host endian):  846.5 MB/s write,  305.4 MB/s read,   0.4 get/put-ratio
100MB of Word64 in chunks of 16 (  Host endian): 1409.2 MB/s write,  846.3 MB/s read,   0.6 get/put-ratio
Benchmark bench: FINISH

Cleaning up

cd ..
rm -rf binary-tmp-REV
mv 5faca823298c26b9fe32bd50dbe61f2ffa73a037.log.tmp 5faca823298c26b9fe32bd50dbe61f2ffa73a037.log
